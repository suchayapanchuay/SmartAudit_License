DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

       cpp name       |       acl / passthrough name


cfg::globals::front_connection_time ⇒ front_connection_time   [std::chrono::milliseconds]
    From incoming connection to "up_and_running" state.
cfg::globals::target_connection_time ⇒ target_connection_time   [std::chrono::milliseconds]
    From Module rdp creation to "up_and_running" state.
cfg::globals::auth_user ⇔ login   [std::string]
cfg::globals::host ⇔ ip_client   [std::string]
cfg::globals::target ⇒ ip_target   [std::string]
cfg::globals::target_device ⇐ target_device   [std::string]
cfg::globals::device_id ⇐ device_id   [std::string]
cfg::globals::primary_user_id ⇐ primary_user_id   [std::string]
cfg::globals::target_user ⇔ target_login   [std::string]
cfg::globals::target_application ⇐ target_application   [std::string]
cfg::globals::target_application_account ⇐ target_application_account   [std::string]
cfg::globals::target_application_password ⇐ target_application_password   [std::string]
cfg::globals::inactivity_timeout ⇐ globals:inactivity_timeout   [std::chrono::seconds]
    No automatic disconnection due to inactivity, timer is set on target session.
    If the value is between 1 and 30, then 30 is used.
    If the value is set to 0, then the value set in [globals]base_inactivity_timeout is used.
cfg::globals::trace_type ⇐ trace_type   [TraceType]
    Session record options.
      0: No encryption (faster).
      1: No encryption, with checksum.
      2: Encryption enabled.
    When session records are encrypted, they can be read only by the WALLIX Bastion where they have been generated.
cfg::globals::is_rec ⇐ is_rec   [bool]
cfg::globals::enable_osd_display_remote_target ⇐ enable_osd_display_remote_target   [bool]
    Allows showing the target device name with F12 during the session.

cfg::client::disable_tsk_switch_shortcuts ⇐ disable_tsk_switch_shortcuts   [bool]
    If enabled, ignore Ctrl+Alt+Del, Ctrl+Shift+Esc and Windows+Tab keyboard sequences.

cfg::all_target_mod::tcp_user_timeout ⇐ all_target_mod:tcp_user_timeout   [std::chrono::milliseconds]
    This parameter allows you to specify max timeout before a TCP connection is aborted. If the option value is specified as 0, TCP will use the system default.
    in milliseconds


cfg::mod_rdp::disabled_orders ⇐ mod_rdp:disabled_orders   [std::string]
    This option should only be used if the target server or client is showing graphical issues.
    In general, disabling RDP orders has a negative impact on performance.
    
    Drawing orders that can be disabled:
       0: DstBlt
       1: PatBlt
       2: ScrBlt
       3: MemBlt
       4: Mem3Blt
       9: LineTo
      15: MultiDstBlt
      16: MultiPatBlt
      17: MultiScrBlt
      18: MultiOpaqueRect
      22: Polyline
      25: EllipseSC
      27: GlyphIndex
    values are comma-separated
cfg::mod_rdp::enable_nla ⇐ mod_rdp:enable_nla   [bool]
    Enable NLA authentication in secondary targets.
cfg::mod_rdp::enable_kerberos ⇐ mod_rdp:enable_kerberos   [bool]
    When [mod_rdp]enable_nla is selected:
    Enabling this option instructs the Bastion to use Kerberos as its initial method.
    Disabling this option instructs the Bastion to only use NTLM.
cfg::mod_rdp::allow_nla_ntlm_fallback ⇐ mod_rdp:allow_nla_ntlm_fallback   [bool]
    When both [mod_rdp]enable_nla and [mod_rdp]enable_kerberos are selected:
    Enabling this option instructs the Bastion to use Kerberos first and, if necessary, NTLM as a backup.
    Disabling this option instructs the Bastion to only use Kerberos.
cfg::mod_rdp::allow_tls_only_fallback ⇐ mod_rdp:allow_tls_only_fallback   [bool]
    Allow TLS only.
cfg::mod_rdp::allow_rdp_legacy_fallback ⇐ mod_rdp:allow_rdp_legacy_fallback   [bool]
    Allow Standard RDP Security (Legacy).
cfg::mod_rdp::tls_min_level ⇐ mod_rdp:tls_min_level   [uint32_t]
    Minimal incoming TLS level 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_rdp::tls_max_level ⇐ mod_rdp:tls_max_level   [uint32_t]
    Maximal incoming TLS level 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_rdp::cipher_string ⇐ mod_rdp:cipher_string   [std::string]
    TLSv1.2 and below additional ciphers supported.
    Empty to apply system-wide configuration (SSL security level 2), ALL for support of all ciphers to ensure highest compatibility with target servers.
    The format used is described on this page: https://www.openssl.org/docs/man3.1/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT
cfg::mod_rdp::tls_enable_legacy_server ⇐ mod_rdp:tls_enable_legacy_server   [bool]
    Allow TLS legacy insecure renegotiation to unpatched target servers.
    For Windows Server 2008, requires also to set ALL@SECLEVEL=0 in [mod_rdp]cipher_string.
cfg::mod_rdp::tls_1_3_ciphersuites ⇐ mod_rdp:tls_1_3_ciphersuites   [std::string]
    Configure the available TLSv1.3 ciphersuites.
    Empty to apply system-wide configuration.
    The format used is described in the third paragraph of this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_ciphersuites.html#DESCRIPTION
cfg::mod_rdp::tls_key_exchange_groups ⇐ mod_rdp:tls_key_exchange_groups   [std::string]
    Configure the supported key exchange groups.
    Empty to apply system-wide configuration.
    The format used is described in this page: https://www.openssl.org/docs/man3.2/man3/SSL_CONF_cmd.html#groups-groups
cfg::mod_rdp::show_common_cipher_list ⇐ mod_rdp:show_common_cipher_list   [bool]
    Show in the logs the common cipher list supported by client and target server
    ⚠ Only for debugging purposes.
cfg::mod_rdp::allowed_channels ⇐ mod_rdp:allowed_channels   [std::string]
    List of (comma-separated) enabled (static) virtual channel. If character '*' is used as a name then enables everything.
    Explicit names have higher priority than '*' in [mod_rdp]denied_channels.
    values are comma-separated
cfg::mod_rdp::denied_channels ⇐ mod_rdp:denied_channels   [std::string]
    List of (comma-separated) disabled (static) virtual channel. If character '*' is used as a name then disables everything.
    Explicit names have higher priority than '*' in [mod_rdp]allowed_channels.
    values are comma-separated
cfg::mod_rdp::allowed_dynamic_channels ⇐ mod_rdp:allowed_dynamic_channels   [std::string]
    List of (comma-separated) enabled dynamic virtual channel. If character '*' is used as a name then enables everything.
    Explicit names have higher priority than '*' in [mod_rdp]denied_dynamic_channels.
cfg::mod_rdp::denied_dynamic_channels ⇐ mod_rdp:denied_dynamic_channels   [std::string]
    List of (comma-separated) disabled dynamic virtual channel. If character '*' is used as a name then disables everything.
    Explicit names have higher priority than '*' in [mod_rdp]allowed_dynamic_channels.
cfg::mod_rdp::disable_coreinput_dynamic_channel ⇐ mod_rdp:disable_coreinput_dynamic_channel   [bool]
    If this option is unchecked, keyboard/mouse inputs are transmitted over the dynamic virtual channel.
    This will cause the session inactivity detection and keyboard input log to malfunction in Windows 11 and Windows Server 2025.
cfg::mod_rdp::force_screen_resolution ⇐ mod_rdp:force_screen_resolution   [ScreenResolution]
    Force the screen resolution of a RDP target.
    This option is ignored when the value is 0x0 or empty.
    in {width}x{height} format (e.g. 800x600)
cfg::mod_rdp::server_redirection_support ⇐ mod_rdp:server_redirection_support   [bool]
    The secondary target connection can be redirected to a specific session on another RDP server.
cfg::mod_rdp::load_balance_info ⇐ mod_rdp:load_balance_info   [std::string]
    Load balancing information.
    For example 'tsv://MS Terminal Services Plugin.1.Sessions' where 'Sessions' is the name of the targeted RD Collection which works fine.
cfg::mod_rdp::proxy_managed_drives ⇐ mod_rdp:proxy_managed_drives   [std::string]
    Shared directory between proxy and secondary target.
    Requires RDPDR support.
    values are comma-separated
cfg::mod_rdp::ignore_auth_channel ⇐ mod_rdp:ignore_auth_channel   [bool]
cfg::mod_rdp::alternate_shell ⇐ alternate_shell   [std::string]
cfg::mod_rdp::shell_arguments ⇐ shell_arguments   [std::string]
cfg::mod_rdp::shell_working_directory ⇐ shell_working_directory   [std::string]
cfg::mod_rdp::use_client_provided_alternate_shell ⇐ mod_rdp:use_client_provided_alternate_shell   [bool]
    As far as possible, use client-provided initial program (Alternate Shell).
cfg::mod_rdp::use_client_provided_remoteapp ⇐ mod_rdp:use_client_provided_remoteapp   [bool]
    As far as possible, use client-provided remote program (RemoteApp).
cfg::mod_rdp::use_native_remoteapp_capability ⇐ mod_rdp:use_native_remoteapp_capability   [bool]
    As far as possible, use native RemoteApp capability.
cfg::mod_rdp::enable_rdpdr_data_analysis ⇐ mod_rdp:enable_rdpdr_data_analysis   [bool]
    Adds RDPDR channel metadata to session logs. Disabling this option makes shared disks more responsive, but metadata will no longer be collected.if at least one authorization of RDPDR is missing (Printer, ComPort, SmartCard, Drive), then this option is considered enabled.
cfg::mod_rdp::wabam_uses_translated_remoteapp ⇐ mod_rdp:wabam_uses_translated_remoteapp   [bool]
    Actives conversion of RemoteApp target session to desktop session.
    Otherwise, Alternate Shell will be used.
    Some Windows Shell features may be unavailable in one or both cases, and applications using them may behave differently.
cfg::mod_rdp::enable_remotefx ⇐ mod_rdp:enable_remotefx   [bool]
    Enables support of the RemoteFX codec on target connection.
cfg::mod_rdp::enable_restricted_admin_mode ⇐ mod_rdp:enable_restricted_admin_mode   [bool]
    Connect to the target server in Restricted Admin mode.
    This mode must be supported by the target server (available from Windows Server 2012 R2), otherwise, connection will fail.
    NLA must be enabled.
cfg::mod_rdp::force_smartcard_authentication ⇐ mod_rdp:force_smartcard_authentication   [bool]
    NLA will be disabled.
    Target must be set for interactive login, otherwise the  connection may not be guaranteed.
    Smartcard device must be available on client desktop.
    Smartcard redirection (Proxy option RDP_SMARTCARD) must be enabled on service.
cfg::mod_rdp::enable_ipv6 ⇐ mod_rdp:enable_ipv6   [bool]
    Enable target connection on IPv6
cfg::mod_rdp::mode_console ⇐ mod_rdp:mode_console   [RdpModeConsole ⇐ std::string]
    Console mode management for targets on Windows Server 2003 (requested with /console or /admin mstsc option).
      allow: Forward Console mode request from client to the target.
      force: Force Console mode on target regardless of client request.
      forbid: Block Console mode request from client.
cfg::mod_rdp::auto_reconnection_on_losing_target_link ⇐ mod_rdp:auto_reconnection_on_losing_target_link   [bool]
    Allows the proxy to automatically reconnect to secondary target when a network error occurs.
    The target server must support reconnection cookie.
cfg::mod_rdp::allow_session_reconnection_by_shortcut ⇐ mod_rdp:allow_session_reconnection_by_shortcut   [bool]
    If the feature is enabled, the end user can trigger a session disconnection/reconnection with the shortcut Ctrl+F12.
    This feature should not be used together with the [session_probe]end_disconnected_session.
    The keyboard shortcut is fixed and cannot be changed.
cfg::mod_rdp::session_reconnection_delay ⇐ mod_rdp:session_reconnection_delay   [std::chrono::milliseconds]
    The delay between a session disconnection and the automatic reconnection that follows.
    in milliseconds
cfg::mod_rdp::forward_client_build_number ⇐ mod_rdp:forward_client_build_number   [bool]
    Forward the build number advertised by the client to the target server. If forwarding is disabled a default (static) build number will be sent to the target server.
cfg::mod_rdp::bogus_monitor_layout_treatment ⇐ mod_rdp:bogus_monitor_layout_treatment   [bool]
    To resolve the session freeze issue with Windows 7/Windows Server 2008 target.
cfg::mod_rdp::effective_krb_armoring_user ⇐ effective_krb_armoring_user   [std::string]
    Effective username to be used for armoring Kerberos tickets.
cfg::mod_rdp::effective_krb_armoring_password ⇐ effective_krb_armoring_password   [std::string]
    Effective password to be used for armoring Kerberos tickets.
cfg::mod_rdp::remote_programs_disconnect_message_delay ⇐ mod_rdp:remote_programs_disconnect_message_delay   [std::chrono::milliseconds]
    Delay before showing disconnect message after the last RemoteApp window is closed.
    in milliseconds
cfg::mod_rdp::use_session_probe_to_launch_remote_program ⇐ mod_rdp:use_session_probe_to_launch_remote_program   [bool]
    This option only has an effect in RemoteApp sessions (RDS meaning).
    If enabled, the RDP Proxy relies on the Session Probe to launch the remote programs.
    Otherwise, remote programs will be launched according to Remote Programs Virtual Channel Extension of Remote Desktop Protocol. This latter is the native method.
    The difference is that Session Probe does not start a new application when its host session is resumed. Conversely, launching applications according to Remote Programs Virtual Channel Extension of Remote Desktop Protocol is not affected by this behavior. However, launching applications via the native method requires them to be published in Remote Desktop Services, which is unnecessary if launched by the Session Probe.
cfg::mod_rdp::replace_null_pointer_by_default_pointer ⇐ mod_rdp:replace_null_pointer_by_default_pointer   [bool]
    Replace an empty mouse pointer with normal pointer.
cfg::mod_rdp::windows_xp_clipboard_support ⇐ mod_rdp:windows_xp_clipboard_support   [bool]
    Enable Windows XP clipboard support.
cfg::mod_rdp::block_user_input_until_appdriver_completes ⇐ mod_rdp:block_user_input_until_appdriver_completes   [bool]
    Block user input in the session during the execution of Application Driver. Do not activate this option if the application session does not use Application Driver.

cfg::protocol::save_session_info_pdu ⇐ protocol:save_session_info_pdu   [RdpSaveSessionInfoPDU]
      0: Windows
      1: Bastion, xrdp or others

cfg::session_probe::enable_session_probe ⇐ session_probe:enable_session_probe   [bool]
cfg::session_probe::use_smart_launcher ⇐ session_probe:use_smart_launcher   [bool]
    This parameter only has an effect in Desktop sessions.
    It allows you to choose between Smart launcher and Legacy launcher to launch the Session Probe.
    The Smart launcher and the Legacy launcher do not have the same technical prerequisites. Detailed information can be found in the Administration guide.
cfg::session_probe::enable_launch_mask ⇐ session_probe:enable_launch_mask   [bool]
    This parameter enables or disables the Session Probe’s launch mask.
    The Launch mask hides the Session Probe launch steps from the end-users.
    Disabling the mask makes it easier to diagnose Session Probe launch issues. It is recommended to enable the mask for normal operation.
cfg::session_probe::on_launch_failure ⇐ session_probe:on_launch_failure   [SessionProbeOnLaunchFailure]
    It is recommended to use option 1 (disconnect user).
      0: ignore and continue: The metadata collected is not essential for us. Instead, we prefer to minimize the impact on the user experience. The Session Probe launch will be in best-effort mode. The prevailing duration is defined by the 'Launch fallback timeout' instead of the 'Launch timeout'.
      1: disconnect user: This is the recommended setting. If the target meets all the technical prerequisites, there is no reason for the Session Probe not to launch. All that remains is to adapt the value of 'Launch timeout' to the performance of the target.
      2: retry without session probe: We wish to be able to recover the behavior of Bastion 5 when the Session Probe does not launch. The prevailing duration is defined by the 'Launch fallback timeout' instead of the 'Launch timeout'.
cfg::session_probe::launch_timeout ⇐ session_probe:launch_timeout   [std::chrono::milliseconds]
    This parameter is used if [session_probe]on_launch_failure is 1 (disconnect user).
    0 to disable timeout.
    in milliseconds
cfg::session_probe::launch_fallback_timeout ⇐ session_probe:launch_fallback_timeout   [std::chrono::milliseconds]
    This parameter is used if [session_probe]on_launch_failure is 0 (ignore failure and continue) or 2 (retry without Session Probe).
    0 to disable timeout.
    in milliseconds
cfg::session_probe::start_launch_timeout_timer_only_after_logon ⇐ session_probe:start_launch_timeout_timer_only_after_logon   [bool]
    If enabled, the [session_probe]launch_timeout countdown timer will be started only after user logged in Windows. Otherwise, the countdown timer will be started immediately after RDP protocol connexion.
cfg::session_probe::keepalive_timeout ⇐ session_probe:keepalive_timeout   [std::chrono::milliseconds]
    The amount of time that RDP Proxy waits for a reply from the Session Probe to the KeepAlive message before adopting the behavior defined by [session_probe]on_keepalive_timeout.
    If our local network is subject to congestion, or if the Windows lacks responsiveness, it is possible to increase the value of the timeout to minimize disturbances related to the behavior defined by [session_probe]on_keepalive_timeout.
    The KeepAlive message is used to detect Session Probe unavailability. Without Session Probe, session monitoring will be minimal. No metadata will be collected.
    During the delay between sending a KeepAlive request and receiving the corresponding reply, Session Probe availability is indeterminate.
    in milliseconds
cfg::session_probe::on_keepalive_timeout ⇐ session_probe:on_keepalive_timeout   [SessionProbeOnKeepaliveTimeout]
    This parameter allows us to choose the behavior of the RDP Proxy in case of losing the connection with Session Probe.
      0: ignore and continue: Designed to minimize the impact on the user experience if the Session Probe is unstable. It should not be used when Session Probe is working well. An attacker can take advantage of this setting by simulating a Session Probe crash in order to bypass the surveillance.
      1: disconnect user: Legacy behavior. It’s a choice that gives more security, but the impact on the user experience seems disproportionate. The RDP session can be closed (resulting in the permanent loss of all its unsaved elements) if the 'End disconnected session' parameter (or an equivalent setting at the RDS-level) is enabled.
      2: freeze connection and wait: This is the recommended setting. User actions will be blocked until contact with the Session Probe (reply to KeepAlive message or something else) is resumed.
cfg::session_probe::end_disconnected_session ⇐ session_probe:end_disconnected_session   [bool]
    The behavior of this parameter is different between the Desktop session and the RemoteApp session (RDS meaning). But in each case, the purpose of enabling this parameter is to not leave disconnected sessions in a state unusable by the RDP proxy.
    If enabled, Session Probe will automatically end the disconnected Desktop session. Otherwise, the RDP session and the applications it contains will remain active after user disconnection (unless a parameter defined at the RDS-level decides otherwise).
    The parameter in RemoteApp session (RDS meaning) does not cause the latter to be closed but a simple cleanup. However, this makes the session suitable for reuse.
    This parameter must be enabled for Web applications because an existing session with a running browser cannot be reused.
    It is also recommended to enable this parameter for connections in RemoteApp mode (RDS meaning) when [mod_rdp]use_session_probe_to_launch_remote_program is enabled. Because an existing Session Probe does not launch a startup program (a new Bastion application) when the RemoteApp session resumes.
cfg::session_probe::enable_autodeployed_appdriver_affinity ⇐ session_probe:enable_autodeployed_appdriver_affinity   [bool]
    If enabled, disconnected auto-deployed Application Driver session will automatically terminate by Session Probe.
cfg::session_probe::enable_log ⇐ session_probe:enable_log   [bool]
    This parameter allows you to enable the Windows-side logging of Session Probe.
    The generated files are located in the Windows user's temporary directory. These files can only be analyzed by the WALLIX team.
    This log does not help diagnose a launch problem. For this, you should instead use the debugging settings in the Configuration options.
cfg::session_probe::enable_log_rotation ⇐ session_probe:enable_log_rotation   [bool]
    This parameter enables or disables the Log files rotation for Windows-side logging of Session Probe.
    The Log files rotation helps reduce disk space consumption caused by logging. But the interesting information may be lost if the corresponding file is not retrieved in time.
cfg::session_probe::log_level ⇐ session_probe:log_level   [SessionProbeLogLevel]
    Defines logging severity levels.
      1: Fatal: Designates very severe error events that will presumably lead the application to abort.
      2: Error: Designates error events that might still allow the application to continue running.
      3: Info: Designates informational messages that highlight the progress of the application at coarse-grained level.
      4: Warning: Designates potentially harmful situations.
      5: Debug: Designates fine-grained informational events that are mostly useful to debug an application.
      6: Detail: Designates finer-grained informational events than Debug.
cfg::session_probe::disconnected_application_limit ⇐ session_probe:disconnected_application_limit   [std::chrono::milliseconds]
    (Deprecated!)
    The period above which the disconnected Application session will be automatically closed by the Session Probe.
    0 to disable timeout.
    in milliseconds
cfg::session_probe::disconnected_session_limit ⇐ session_probe:disconnected_session_limit   [std::chrono::milliseconds]
    The period above which the disconnected Desktop session will be automatically closed by the Session Probe.
    0 to disable timeout.
    in milliseconds
cfg::session_probe::idle_session_limit ⇐ session_probe:idle_session_limit   [std::chrono::milliseconds]
    The period of user inactivity above which the session will be locked by the Session Probe.
    0 to disable timeout.
    in milliseconds
cfg::session_probe::smart_launcher_clipboard_initialization_delay ⇐ session_probe:smart_launcher_clipboard_initialization_delay   [std::chrono::milliseconds]
    The additional period given to the device to make Clipboard redirection available.
    This parameter is effective only if [session_probe]use_smart_launcher is enabled.
    If we see the message "Clipboard Virtual Channel is unavailable" in the Bastion’s syslog and we are sure that this virtual channel is allowed on the device (confirmed by a direct connection test for example), we probably need to use this parameter.
cfg::session_probe::smart_launcher_start_delay ⇐ session_probe:smart_launcher_start_delay   [std::chrono::milliseconds]
    For under-performing devices.
    The extra time given to the device before starting the Session Probe launch sequence.
    This parameter is effective only if [session_probe]use_smart_launcher is enabled.
    This parameter can be useful when (with Launch mask disabled) Windows Explorer is not immediately visible when the RDP session is opened.
cfg::session_probe::smart_launcher_long_delay ⇐ session_probe:smart_launcher_long_delay   [std::chrono::milliseconds]
    The delay between two simulated keystrokes during the Session Probe launch sequence execution.
    This parameter is effective only if [session_probe]use_smart_launcher is enabled.
    This parameter may help if the Session Probe launch failure is caused by network slowness or device under-performance.
    This parameter is usually used together with the [session_probe]smart_launcher_short_delay.
cfg::session_probe::smart_launcher_short_delay ⇐ session_probe:smart_launcher_short_delay   [std::chrono::milliseconds]
    The delay between two steps of the same simulated keystrokes during the Session Probe launch sequence execution.
    This parameter is effective only if [session_probe]use_smart_launcher is enabled.
    This parameter may help if the Session Probe launch failure is caused by network slowness or device under-performance.
    This parameter is usually used together with the [session_probe]smart_launcher_long_delay.
cfg::session_probe::smart_launcher_enable_wabam_affinity ⇐ session_probe:smart_launcher_enable_wabam_affinity   [bool]
    Allow sufficient time for the RDP client (Access Manager) to respond to the Clipboard virtual channel initialization message. Otherwise, the time granted to the RDP client (Access Manager or another) for Clipboard virtual channel initialization will be defined by the [session_probe]smart_launcher_clipboard_initialization_delay.
    This parameter is effective only if [session_probe]use_smart_launcher is enabled and the RDP client is Access Manager.
cfg::session_probe::launcher_abort_delay ⇐ session_probe:launcher_abort_delay   [std::chrono::milliseconds]
    The time interval between the detection of an error (example: a refusal by the target of the redirected drive) and the actual abandonment of the Session Probe launch.
    The purpose of this parameter is to give the target time to gracefully stop some ongoing processing.
    It is strongly recommended to keep the default value of this parameter.
    in milliseconds
cfg::session_probe::enable_crash_dump ⇐ session_probe:enable_crash_dump   [bool]
    This parameter enables or disables the crash dump generation when the Session Probe encounters a fatal error.
    The crash dump file is useful for post-modem debugging. It is not designed for normal use.
    The generated files are located in the Windows user's temporary directory. These files can only be analyzed by the WALLIX team.
    There is no rotation mechanism to limit the number of dump files produced. Extended activation of this parameter can quickly exhaust disk space.
cfg::session_probe::handle_usage_limit ⇐ session_probe:handle_usage_limit   [uint32_t]
    Use only if you see unusually high consumption of system object handles by the Session Probe.
    The Session Probe will sabotage and then restart it-self if it consumes more handles than what is defined by this parameter.
    A value of 0 disables this feature.
    This feature can cause the session to be disconnected if the value of the [session_probe]on_keepalive_timeout is set to 1 (Disconnect user).
    If [session_probe]allow_multiple_handshake is disabled, restarting the Session Probe will cause the session to disconnect.
cfg::session_probe::memory_usage_limit ⇐ session_probe:memory_usage_limit   [uint32_t]
    Use only if you see unusually high consumption of memory by the Session Probe.
    The Session Probe will sabotage and then restart it-self if it consumes more memory than what is defined by this parameter.
    A value of 0 disables this feature.
    This feature can cause the session to be disconnected if the value of the [session_probe]on_keepalive_timeout is set to 1 (Disconnect user).
    If [session_probe]allow_multiple_handshake is disabled, restarting the Session Probe will cause the session to disconnect.
cfg::session_probe::cpu_usage_alarm_threshold ⇐ session_probe:cpu_usage_alarm_threshold   [uint32_t]
    This debugging feature was created to determine the cause of high CPU consumption by Session Probe in certain environments.
    As a percentage, the effective alarm threshold is calculated in relation to the reference consumption determined at the start of the program execution. The alarm is deactivated if this value of parameter is less than 200 (200% of reference consumption).
    When CPU consumption exceeds the allowed limit, debugging information can be collected (if the Windows-side logging is enabled), then Session Probe will sabotage. Additional behavior is defined by [session_probe]cpu_usage_alarm_action.
cfg::session_probe::cpu_usage_alarm_action ⇐ session_probe:cpu_usage_alarm_action   [SessionProbeCPUUsageAlarmAction]
    Additional behavior when CPU consumption exceeds what is allowed. Refer to the [session_probe]cpu_usage_alarm_threshold.
      0: Restart the Session Probe. May result in session disconnection due to loss of KeepAlive messages! Refer to 'On keepalive timeout' parameter of current section and 'Allow multiple handshakes' parameter of 'Configuration options'.
      1: Stop the Session Probe. May result in session disconnection due to loss of KeepAlive messages! Refer to 'On keepalive timeout' parameter of current section.
cfg::session_probe::end_of_session_check_delay_time ⇐ session_probe:end_of_session_check_delay_time   [std::chrono::milliseconds]
    For application session only.
    The delay between the launch of the application and the start of End of session check.
    Sometimes an application takes a long time to create its window. If the End of session check is start too early, the Session Probe may mistakenly conclude that there is no longer any active process in the session. And without active processes, the application session will be logged off by the Session Probe.
    'End of session check delay time' allow you to delay the start of End of session check in order to give the application the time to create its window.
    in milliseconds
cfg::session_probe::ignore_ui_less_processes_during_end_of_session_check ⇐ session_probe:ignore_ui_less_processes_during_end_of_session_check   [bool]
    For application session only.
    If enabled, during the End of session check, the processes that do not have a visible window will not be counted as active processes of the session. Without active processes, the application session will be logged off by the Session Probe.
cfg::session_probe::extra_system_processes ⇐ session_probe:extra_system_processes   [std::string]
    This parameter is used to provide the list of (comma-separated) system processes that can be run in the session.
    Ex.: dllhos.exe,TSTheme.exe
    Unlike user processes, system processes do not keep the session open. A session with no user process will be automatically closed by Session Probe after starting the End of session check.
cfg::session_probe::childless_window_as_unidentified_input_field ⇐ session_probe:childless_window_as_unidentified_input_field   [bool]
    This parameter concerns the functionality of the Password field detection performed by the Session Probe. This detection is necessary to avoid logging the text entered in the password fields as metadata of session (also known as Session log).
    Unfortunately, the detection does not work with applications developed in Java, Flash, etc. In order to work around the problem, we will treat the windows of these applications as input fields of unknown type. Therefore, the text entered in these will not be included in the session’s metadata.
    One of the specifics of these applications is that their main windows do not have any child window from point of view of WIN32 API. Activating this parameter allows this property to be used to detect applications developed in Java or Flash.
    Refer to the [session_log]keyboard_input_masking_level.
cfg::session_probe::windows_of_these_applications_as_unidentified_input_field ⇐ session_probe:windows_of_these_applications_as_unidentified_input_field   [std::string]
    Comma-separated process names. (Ex.: chrome.exe,ngf.exe)
    This parameter concerns the functionality of the Password field detection performed by the Session Probe. This detection is necessary to avoid logging the text entered in the password fields as metadata of session (also known as Session log).
    Unfortunately, the detection is not infallible. In order to work around the problem, we will treat the windows of these applications as input fields of unknown type. Therefore, the text entered in these will not be included in the session’s metadata.
    This parameter is used to provide the list of processes whose windows are considered as input fields of unknown type.
    Refer to the [session_log]keyboard_input_masking_level.
cfg::session_probe::update_disabled_features ⇐ session_probe:update_disabled_features   [bool]
    This parameter is used when resuming a session hosting a existing Session Probe.
    If enabled, the Session Probe will activate or deactivate features according to the value of [session_probe]disabled_features received when resuming its host session. Otherwise, the Session Probe will keep the same set of features that were used during the previous connection.
    It is recommended to keep the default value of this parameter.
cfg::session_probe::disabled_features ⇐ session_probe:disabled_features   [SessionProbeDisabledFeature]
    This parameter was created to work around some compatibility issues and to limit the CPU load that the Session Probe process causes.
    If 'Java Acccess Bridge' feature is disabled, data entered in the password field of Java applications may be visible in the metadata.
    For more information, refer to [session_log]keyboard_input_masking_level.
    For more information, also refer to [session_probe]childless_window_as_unidentified_input_field and [session_probe]windows_of_these_applications_as_unidentified_input_field.It is not recommended to deactivate 'MS Active Accessibility' and 'MS UI Automation' at the same time. This configuration will lead to the loss of detection of password input fields. Entries in these fields will be visible as plain text in the session metadata.
      0x000: none
      0x001: disable Java Access Bridge. General user activity monitoring in the Java applications (including detection of password fields).
      0x002: disable MS Active Accessbility. General user activity monitoring (including detection of password fields). (legacy API)
      0x004: disable MS UI Automation. General user activity monitoring (including detection of password fields). (new API)
      0x010: disable Inspect Edge location URL. Basic web navigation monitoring.
      0x020: disable Inspect Chrome Address/Search bar. Basic web navigation monitoring.
      0x040: disable Inspect Firefox Address/Search bar. Basic web navigation monitoring.
      0x080: disable Monitor Internet Explorer event. Advanced web navigation monitoring.
      0x100: disable Inspect group membership of user. User identity monitoring.
    
    Note: values can be added (disable all: 0x1 + 0x2 + 0x4 + 0x10 + 0x20 + 0x40 + 0x80 + 0x100 = 0x1f7)
cfg::session_probe::enable_bestsafe_interaction ⇐ session_probe:enable_bestsafe_interaction   [bool]
    This parameter has no effect on the device without BestSafe.
    Is enabled, Session Probe relies on BestSafe to perform the detection of application launches and the detection of outgoing connections.
    BestSafe has more efficient mechanisms in these tasks than Session Probe.
    For more information, refer to [session_probe]outbound_connection_monitoring_rules and [session_probe]process_monitoring_rules.
cfg::session_probe::on_account_manipulation ⇐ session_probe:on_account_manipulation   [SessionProbeOnAccountManipulation]
    This parameter has no effect on the device without BestSafe.
    BestSafe interaction must be enabled. Refer to [session_probe]enable_bestsafe_interaction.
    This parameter allows you to choose the behavior of the RDP Proxy in case of detection of Windows account manipulation.
    Detectable account manipulations are the creation, deletion of a Windows account, and the addition and deletion of an account from a Windows user group.
      0: allow: User action will be accepted.
      1: notify: (Same thing as 'allow'.)
      2: deny: User action will be rejected.
cfg::session_probe::alternate_directory_environment_variable ⇐ session_probe:alternate_directory_environment_variable   [std::string(maxlen=3)]
    This parameter is used to indicate the name of an environment variable, to be set on the Windows device, and pointed to a directory (on the device) that can be used to store and start the Session Probe. The environment variable must be available in the Windows user session.
    The environment variable name is limited to 3 characters or less.
    By default, the Session Probe will be stored and started from the temporary directory of Windows user.
    This parameter is useful if a GPO prevents Session Probe from starting from the Windows user's temporary directory.
cfg::session_probe::public_session ⇐ session_probe:public_session   [bool]
    If enabled, the session, once disconnected, can be resumed by another Bastion user.
    Except in special cases, this is usually a security problem.
    By default, a session can only be resumed by the Bastion user who created it.
cfg::session_probe::outbound_connection_monitoring_rules ⇐ session_probe:outbound_connection_monitoring_rules   [std::string]
    This parameter is used to provide the list of (comma-separated) rules used to monitor outgoing connections created in the session.
    (Ex. IPv4 addresses: $deny:192.168.0.0/24:5900,$allow:192.168.0.110:21)
    (Ex. IPv6 addresses: $deny:2001:0db8:85a3:0000:0000:8a2e:0370:7334:3389,$allow:[20D1:0:3238:DFE1:63::FEFB]:21)
    (Ex. hostname can be used to resolve to both IPv4 and IPv6 addresses: $allow:host.domain.net:3389)
    (Ex. for backwards compatibility only: 10.1.0.0/16:22)
    A global rule that matches all IP addresses/Ports such as "0.0.0.0/0:*" is highly unrecommended.
    Session Probe must be enabled to use this feature.
    BestSafe can be used to perform detection of outgoing connections created in the session. Refer to [session_probe]enable_bestsafe_interaction.
cfg::session_probe::process_monitoring_rules ⇐ session_probe:process_monitoring_rules   [std::string]
    This parameter is used to provide the list of (comma-separated) rules used to monitor the execution of processes in the session.
    (Ex.: $deny:taskmgr.exe)
    @ = All child processes of (Bastion) application (Ex.: $deny:@)
    BestSafe can be used to perform detection of process launched in the session. Refer to [session_probe]enable_bestsafe_interaction.
cfg::session_probe::process_command_line_retrieve_method ⇐ session_probe:process_command_line_retrieve_method   [SessionProbeProcessCommandLineRetrieveMethod]
      0: windows management instrumentation: Get command-line of processes via Windows Management Instrumentation. (Legacy method)
      1: windows internals: Calling internal system APIs to get the process command line. (More efficient but less stable)
      2: both: First use internal system APIs call, if that fails, use Windows Management Instrumentation method.
cfg::session_probe::periodic_task_run_interval ⇐ session_probe:periodic_task_run_interval   [std::chrono::milliseconds]
    Time between two polling performed by Session Probe.
    The parameter is created to adapt the CPU consumption to the performance of the Windows device.
    The longer this interval, the less detailed the session metadata collection and the lower the CPU consumption.
    in milliseconds
cfg::session_probe::pause_if_session_is_disconnected ⇐ session_probe:pause_if_session_is_disconnected   [bool]
    If enabled, Session Probe activity will be minimized when the user is disconnected from the session. No metadata will be collected during this time.
    The purpose of this behavior is to optimize CPU consumption.
cfg::session_probe::monitor_own_resources_consumption ⇐ session_probe:monitor_own_resources_consumption   [bool]
    If enabled, Session Probe will monitor its own system resource consumption.
    This feature increases CPU consumption.

cfg::server_cert::server_cert_store ⇐ server_cert:server_cert_store   [bool]
    Keep known target server certificates on Bastion
cfg::server_cert::server_cert_check ⇐ server_cert:server_cert_check   [ServerCertCheck]
    Behavior of certificates check.
      0: fails if certificates do not match or are missing.
      1: fails if certificate does not match, succeeds if no known certificate.
      2: succeeds if certificates exist (not checked), fails if missing.
      3: always succeed.
    System errors like FS access rights issues or certificate decode are always check errors leading to connection rejection.
cfg::server_cert::server_access_allowed_message ⇐ server_cert:server_access_allowed_message   [ServerCertNotification]
    Warn if check allow connexion to target server.
      0x0: nobody
      0x1: SIEM: message sent to SIEM
    
    Note: values can be added (enable all: 0x1 = 0x1)
cfg::server_cert::server_cert_create_message ⇐ server_cert:server_cert_create_message   [ServerCertNotification]
    Warn that new target server certificate file was created.
      0x0: nobody
      0x1: SIEM: message sent to SIEM
    
    Note: values can be added (enable all: 0x1 = 0x1)
cfg::server_cert::server_cert_success_message ⇐ server_cert:server_cert_success_message   [ServerCertNotification]
    Warn that target server certificate file was successfully checked.
      0x0: nobody
      0x1: SIEM: message sent to SIEM
    
    Note: values can be added (enable all: 0x1 = 0x1)
cfg::server_cert::server_cert_failure_message ⇐ server_cert:server_cert_failure_message   [ServerCertNotification]
    Warn that target server certificate file checking failed.
      0x0: nobody
      0x1: SIEM: message sent to SIEM
    
    Note: values can be added (enable all: 0x1 = 0x1)
cfg::server_cert::enable_external_validation ⇐ enable_external_validation   [bool]
cfg::server_cert::external_cert ⇒ external_cert   [std::string]
cfg::server_cert::external_response ⇐ external_response   [std::string]
    empty string for wait, 'Ok' or error message.

cfg::mod_vnc::clipboard_up ⇐ clipboard_up   [bool]
    Check this option to enable the clipboard upload (from client to target server).
    This only supports text data clipboard (not files).
cfg::mod_vnc::clipboard_down ⇐ clipboard_down   [bool]
    Check this option to enable the clipboard download (from target server to client).
    This only supports text data clipboard (not files).
cfg::mod_vnc::support_cursor_pseudo_encoding ⇐ mod_vnc:support_cursor_pseudo_encoding   [bool]
cfg::mod_vnc::server_clipboard_encoding_type ⇐ vnc_server_clipboard_encoding_type   [ClipboardEncodingType ⇐ std::string]
    VNC target server clipboard text data encoding type.
cfg::mod_vnc::bogus_clipboard_infinite_loop ⇐ vnc_bogus_clipboard_infinite_loop   [VncBogusClipboardInfiniteLoop]
    The RDP clipboard is based on a token that indicates who owns data between target server and client. However, some RDP clients, such as FreeRDP, always appropriate this token. This conflicts with VNC, which also appropriates this token, causing clipboard data to be sent in loops.
    This option indicates the strategy to adopt in such situations.
      0: delayed: Clipboard processing is deferred and, if necessary, the token is left with the client.
      1: duplicated: When 2 identical requests are received, the second is ignored. This can block clipboard data reception until a clipboard event is triggered on the target server when the client clipboard is blocked, and vice versa.
      2: continued: No special processing is done, the proxy always responds immediately.
cfg::mod_vnc::server_is_macos ⇐ mod_vnc:server_is_macos   [bool]
cfg::mod_vnc::server_unix_alt ⇐ mod_vnc:server_unix_alt   [bool]
    When disabled, Ctrl + Alt becomes AltGr (Windows behavior).
cfg::mod_vnc::enable_ipv6 ⇐ mod_vnc:enable_ipv6   [bool]
    Enable target connection on IPv6.
cfg::mod_vnc::tls_min_level ⇐ mod_vnc:tls_min_level   [uint32_t]
    Minimal incoming TLS level 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_vnc::tls_max_level ⇐ mod_vnc:tls_max_level   [uint32_t]
    Maximal incoming TLS level 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3
cfg::mod_vnc::cipher_string ⇐ mod_vnc:cipher_string   [std::string]
    TLSv1.2 and below additional ciphers supported.
    Empty to apply system-wide configuration (SSL security level 2), ALL for support of all ciphers to ensure highest compatibility with target servers.
    The format used is described on this page: https://www.openssl.org/docs/man3.1/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT
cfg::mod_vnc::tls_enable_legacy_server ⇐ mod_vnc:tls_enable_legacy_server   [bool]
    Allow TLS legacy insecure renegotiation to unpatched target servers.
cfg::mod_vnc::tls_1_3_ciphersuites ⇐ mod_vnc:tls_1_3_ciphersuites   [std::string]
    Configure the available TLSv1.3 ciphersuites.
    Empty to apply system-wide configuration.
    The format used is described in the third paragraph of this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_ciphersuites.html#DESCRIPTION
cfg::mod_vnc::tls_key_exchange_groups ⇐ mod_vnc:tls_key_exchange_groups   [std::string]
    Configure the supported key exchange groups.
    Empty to apply system-wide configuration.
    The format used is described in this page: https://www.openssl.org/docs/man3.2/man3/SSL_CONF_cmd.html#groups-groups
cfg::mod_vnc::show_common_cipher_list ⇐ mod_vnc:show_common_cipher_list   [bool]
    Show in the logs the common cipher list supported by client and target server.
    ⚠ Only for debugging purposes.
cfg::mod_vnc::force_authentication_method ⇐ mod_vnc:force_authentication_method   [std::string]
    When specified, force the proxy to use a specific authentication method. If this method is not supported by the target server, the connection will not be made.
      - noauth
      - vncauth
      - mslogon
      - mslogoniiauth
      - ultravnc_dsm_old
      - ultravnc_dsm_new
      - tlsnone
      - tlsvnc
      - tlsplain
      - x509none
      - x509vnc
      - x509plain

cfg::session_log::enable_session_log_file ⇐ session_log:enable_session_log_file   [bool]
    Saves session logs to a .log file.
    The format is a date followed by one or more key="value" separated by a space on the same line.
cfg::session_log::keyboard_input_masking_level ⇐ session_log:keyboard_input_masking_level   [KeyboardInputMaskingLevel]
    Classification of input data is performed using Session Probe.
    Without Session Probe, all the texts entered are considered unidentified.
      0: Keyboard inputs are not masked.
      1: Only passwords are masked.
      2: Passwords and unidentified texts are masked.
      3: Keyboard inputs are not logged.


cfg::capture::record_filebase ⇐ record_filebase   [std::string]
    Basename without extension.
cfg::capture::record_subdirectory ⇐ record_subdirectory   [std::string]
    Subdirectory of record_path (video section).
cfg::capture::fdx_path ⇒ fdx_path   [std::string]
cfg::capture::hash_path ⇐ hash_path   [::configs::spec_types::directory_path]
cfg::capture::record_tmp_path ⇐ record_tmp_path   [::configs::spec_types::directory_path]
cfg::capture::record_path ⇐ record_path   [::configs::spec_types::directory_path]
cfg::capture::disable_keyboard_log ⇐ capture:disable_keyboard_log   [KeyboardLogFlags]
    Disable keyboard log:
    (See also [session_log]keyboard_input_masking_level)
      0x0: none
      0x1: disable keyboard log in session log
      0x2: disable keyboard log in recorded sessions
    
    Note: values can be added (disable all: 0x1 + 0x2 = 0x3)

cfg::audit::rt_display ⇐ rt_display   [bool]
cfg::audit::redis_address ⇐ redis_address   [std::string]
cfg::audit::redis_port ⇐ redis_port   [unsigned]
cfg::audit::redis_password ⇐ redis_password   [std::string]
cfg::audit::redis_db ⇐ redis_db   [unsigned]
cfg::audit::redis_use_tls ⇐ redis_use_tls   [bool]
cfg::audit::redis_tls_cacert ⇐ redis_tls_cacert   [std::string]
cfg::audit::redis_tls_cert ⇐ redis_tls_cert   [std::string]
cfg::audit::redis_tls_key ⇐ redis_tls_key   [std::string]

cfg::file_verification::enable_up ⇐ file_verification:enable_up   [bool]
    Enable use of ICAP service for file verification on upload.
cfg::file_verification::enable_down ⇐ file_verification:enable_down   [bool]
    Enable use of ICAP service for file verification on download.
cfg::file_verification::clipboard_text_up ⇐ file_verification:clipboard_text_up   [bool]
    Verify text data via clipboard from the client to the target server.
    File verification on upload must be enabled via the Enable up option.
cfg::file_verification::clipboard_text_down ⇐ file_verification:clipboard_text_down   [bool]
    Verify text data via clipboard from the target server to the client
    File verification on download must be enabled via the Enable down option.
cfg::file_verification::block_invalid_file_up ⇐ file_verification:block_invalid_file_up   [bool]
    Block file transfer from the client to the target server on invalid file verification.
    File verification on upload must be enabled via the Enable up option.
cfg::file_verification::block_invalid_file_down ⇐ file_verification:block_invalid_file_down   [bool]
    Block file transfer from the target server to the client on invalid file verification.
    File verification on download must be enabled via the Enable down option.
cfg::file_verification::log_if_accepted ⇐ file_verification:log_if_accepted   [bool]
    Log the files and clipboard texts that are verified and accepted. By default, only those rejected are logged.
cfg::file_verification::max_file_size_rejected ⇐ file_verification:max_file_size_rejected   [uint32_t]
    ⚠ This value affects the RAM used by the session.
    
    If option Block invalid file (up or down) is enabled, automatically reject file with greater filesize.
    in megabytes

cfg::file_storage::store_file ⇐ file_storage:store_file   [RdpStoreFile ⇐ std::string]
    Enable storage of transferred files (via RDP Clipboard).
    ⚠ Saving files can take up a lot of disk space.
      never: Never store transferred files.
      always: Always store transferred files.
      on_invalid_verification: Transferred files are stored only if file verification is invalid. File verification by ICAP service must be enabled (in section file_verification).



cfg::crypto::encryption_key ⇐ encryption_key   [std::array<unsigned char, 32>]
    in hexadecimal format
cfg::crypto::sign_key ⇐ sign_key   [std::array<unsigned char, 32>]
    in hexadecimal format



cfg::context::psid ⇒ psid   [std::string]
    Proxy session log id
cfg::context::opt_bpp ⇒ bpp   [ColorDepth]
    Specifies the maximum color depth for the client connection session:
      8: 8-bit
      15: 15-bit 555 RGB mask
      16: 16-bit 565 RGB mask
      24: 24-bit RGB mask
      32: 32-bit RGB mask + alpha
cfg::context::opt_height ⇒ height   [uint16_t]
cfg::context::opt_width ⇒ width   [uint16_t]
cfg::context::selector ⇐ selector   [bool]
cfg::context::selector_current_page ⇔ selector_current_page   [unsigned]
cfg::context::selector_device_filter ⇒ selector_device_filter   [std::string]
cfg::context::selector_group_filter ⇒ selector_group_filter   [std::string]
cfg::context::selector_proto_filter ⇒ selector_proto_filter   [std::string]
cfg::context::selector_lines_per_page ⇒ selector_lines_per_page   [unsigned]
cfg::context::selector_number_of_pages ⇐ selector_number_of_pages   [unsigned]
cfg::context::target_password ⇔ target_password   [std::string]
cfg::context::target_host ⇔ target_host   [std::string]
cfg::context::tunneling_target_host ⇐ tunneling_target_host   [std::string]
cfg::context::target_str ⇐ target_str   [std::string]
cfg::context::target_service ⇐ target_service   [std::string]
cfg::context::target_port ⇐ target_port   [unsigned]
cfg::context::target_protocol ⇐ proto_dest   [std::string]
cfg::context::password ⇔ password   [std::string]
cfg::context::reporting ⇒ reporting   [std::string]
cfg::context::auth_channel_answer ⇐ auth_channel_answer   [std::string]
cfg::context::auth_channel_target ⇒ auth_channel_target   [std::string]
cfg::context::message ⇐ message   [std::string]
cfg::context::display_link ⇐ display_link   [std::string]
cfg::context::mod_timeout ⇐ mod_timeout   [std::chrono::seconds]
cfg::context::accept_message ⇒ accept_message   [bool]
cfg::context::display_message ⇒ display_message   [bool]
cfg::context::rejected ⇐ rejected   [std::string]
cfg::context::keepalive ⇐ keepalive   [bool]
cfg::context::session_id ⇐ session_id   [std::string]
cfg::context::end_date_cnx ⇐ timeclose   [std::chrono::seconds]
cfg::context::real_target_device ⇒ real_target_device   [std::string]
cfg::context::authentication_challenge ⇐ authentication_challenge   [bool]
cfg::context::ticket ⇒ ticket   [std::string]
cfg::context::comment ⇒ comment   [std::string]
cfg::context::duration ⇒ duration   [std::string]
cfg::context::duration_max ⇐ duration_max   [std::chrono::minutes]
cfg::context::waitinforeturn ⇒ waitinforeturn   [std::string]
cfg::context::formflag ⇐ formflag   [unsigned]
cfg::context::module ⇔ module   [ModuleName ⇔ std::string]
cfg::context::try_alternate_target ⇐ try_alternate_target   [bool]
cfg::context::has_more_target ⇐ has_more_target   [bool]
cfg::context::proxy_opt ⇐ proxy_opt   [std::string]
cfg::context::pattern_kill ⇐ pattern_kill   [std::string]
cfg::context::pattern_notify ⇐ pattern_notify   [std::string]
cfg::context::opt_message ⇐ opt_message   [std::string]
cfg::context::login_message ⇐ login_message   [std::string]
cfg::context::disconnect_reason ⇐ disconnect_reason   [std::string]
cfg::context::disconnect_reason_ack ⇒ disconnect_reason_ack   [bool]
cfg::context::recording_started ⇒ recording_started   [bool]
cfg::context::rt_ready ⇔ rt_ready   [bool]
cfg::context::sharing_ready ⇒ sharing_ready   [bool]
cfg::context::auth_command ⇐ auth_command   [std::string]
cfg::context::auth_notify ⇒ auth_notify   [std::string]
cfg::context::auth_notify_rail_exec_flags ⇒ auth_notify_rail_exec_flags   [unsigned]
cfg::context::auth_notify_rail_exec_exe_or_file ⇒ auth_notify_rail_exec_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_exec_result ⇐ auth_command_rail_exec_exec_result   [uint16_t]
cfg::context::auth_command_rail_exec_flags ⇐ auth_command_rail_exec_flags   [uint16_t]
cfg::context::auth_command_rail_exec_original_exe_or_file ⇐ auth_command_rail_exec_original_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_exe_or_file ⇐ auth_command_rail_exec_exe_or_file   [std::string]
cfg::context::auth_command_rail_exec_working_dir ⇐ auth_command_rail_exec_working_dir   [std::string]
cfg::context::auth_command_rail_exec_arguments ⇐ auth_command_rail_exec_arguments   [std::string]
cfg::context::auth_command_rail_exec_account ⇐ auth_command_rail_exec_account   [std::string]
cfg::context::auth_command_rail_exec_password ⇐ auth_command_rail_exec_password   [std::string]
cfg::context::is_wabam ⇐ is_wabam   [bool]
cfg::context::pm_response ⇐ pm_response   [std::string]
cfg::context::pm_request ⇒ pm_request   [std::string]
cfg::context::native_session_id ⇒ native_session_id   [uint32_t]
cfg::context::rd_shadow_available ⇒ rd_shadow_available   [bool]
cfg::context::rd_shadow_userdata ⇔ rd_shadow_userdata   [std::string]
cfg::context::rd_shadow_type ⇐ rd_shadow_type   [std::string]
cfg::context::rd_shadow_invitation_error_code ⇒ rd_shadow_invitation_error_code   [uint32_t]
cfg::context::rd_shadow_invitation_error_message ⇒ rd_shadow_invitation_error_message   [std::string]
cfg::context::rd_shadow_invitation_id ⇒ rd_shadow_invitation_id   [std::string]
cfg::context::rd_shadow_invitation_addr ⇒ rd_shadow_invitation_addr   [std::string]
cfg::context::rd_shadow_invitation_port ⇒ rd_shadow_invitation_port   [uint16_t]
cfg::context::session_sharing_userdata ⇔ session_sharing_userdata   [std::string]
cfg::context::session_sharing_enable_control ⇐ session_sharing_enable_control   [bool]
cfg::context::session_sharing_ttl ⇐ session_sharing_ttl   [std::chrono::seconds]
cfg::context::session_sharing_invitation_error_code ⇒ session_sharing_invitation_error_code   [uint32_t]
cfg::context::session_sharing_invitation_error_message ⇒ session_sharing_invitation_error_message   [std::string]
cfg::context::session_sharing_invitation_id ⇒ session_sharing_invitation_id   [std::string]
cfg::context::session_sharing_invitation_addr ⇒ session_sharing_invitation_addr   [std::string]
cfg::context::session_sharing_target_ip ⇒ session_sharing_target_ip   [std::string]
cfg::context::session_sharing_target_login ⇒ session_sharing_target_login   [std::string]
cfg::context::smartcard_login ⇒ smartcard_login   [std::string]
cfg::context::banner_message ⇐ banner_message   [std::string]
cfg::context::banner_type ⇐ banner_type   [BannerType]
      0: info
      1: warn
      2: alert


cfg::mod_replay::replay_path ⇐ replay_path   [::configs::spec_types::directory_path]
cfg::mod_replay::replay_on_loop ⇐ replay_on_loop   [bool]
    0 - replay once, 1 - loop replay

cfg::translation::language ⇔ language   [Language ⇔ std::string]



