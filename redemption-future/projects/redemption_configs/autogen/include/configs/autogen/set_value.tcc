// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

void Inifile::ConfigurationHolder::set_section(zstring_view section) {
    if (0) {}
    else if (section == "globals"_zv) {
        this->section_id = 1;
    }
    else if (section == "client"_zv) {
        this->section_id = 2;
    }
    else if (section == "all_target_mod"_zv) {
        this->section_id = 3;
    }
    else if (section == "remote_program"_zv) {
        this->section_id = 4;
    }
    else if (section == "mod_rdp"_zv) {
        this->section_id = 5;
    }
    else if (section == "protocol"_zv) {
        this->section_id = 6;
    }
    else if (section == "session_probe"_zv) {
        this->section_id = 7;
    }
    else if (section == "server_cert"_zv) {
        this->section_id = 8;
    }
    else if (section == "mod_vnc"_zv) {
        this->section_id = 9;
    }
    else if (section == "session_log"_zv) {
        this->section_id = 10;
    }
    else if (section == "ocr"_zv) {
        this->section_id = 11;
    }
    else if (section == "capture"_zv) {
        this->section_id = 12;
    }
    else if (section == "audit"_zv) {
        this->section_id = 13;
    }
    else if (section == "file_verification"_zv) {
        this->section_id = 14;
    }
    else if (section == "file_storage"_zv) {
        this->section_id = 15;
    }
    else if (section == "icap_server_down"_zv) {
        this->section_id = 16;
    }
    else if (section == "icap_server_up"_zv) {
        this->section_id = 17;
    }
    else if (section == "websocket"_zv) {
        this->section_id = 18;
    }
    else if (section == "internal_mod"_zv) {
        this->section_id = 19;
    }
    else if (section == "mod_replay"_zv) {
        this->section_id = 20;
    }
    else if (section == "translation"_zv) {
        this->section_id = 21;
    }
    else if (section == "theme"_zv) {
        this->section_id = 22;
    }
    else if (section == "debug"_zv) {
        this->section_id = 23;
    }
    else if (static_cast<cfg::debug::config>(this->variables).value) {
        LOG(LOG_WARNING, "unknown section [%s]", section);
        this->section_id = 0;
    }

    this->section_name = section.c_str();
}

void Inifile::ConfigurationHolder::set_value(zstring_view key, zstring_view value) {
    if (0) {}
    else if (this->section_id == 1) {
        if (0) {}
        else if (key == "port"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::port&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "authfile"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::authfile&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "handshake_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::handshake_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "base_inactivity_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::base_inactivity_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "inactivity_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::inactivity_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "keepalive_grace_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::keepalive_grace_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "authentication_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::authentication_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "listen_address"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::listen_address&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::ip>{},
                value
            );
        }
        else if (key == "enable_transparent_mode"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_transparent_mode&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "certificate_password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::certificate_password&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "enable_bitmap_update"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_bitmap_update&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_end_time_warning_osd"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_end_time_warning_osd&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_osd_display_remote_target"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_osd_display_remote_target&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "show_target_user_in_f12_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::show_target_user_in_f12_message&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_wab_integration"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_wab_integration&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "large_pointer_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::large_pointer_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "mod_recv_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::mod_recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                value
            );
        }
        else if (key == "experimental_enable_serializer_data_block_size_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::experimental_enable_serializer_data_block_size_limit&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rdp_keepalive_connection_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::rdp_keepalive_connection_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "minimal_memory_available_before_connection_silently_closed"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::globals::minimal_memory_available_before_connection_silently_closed&>(this->variables).value,
                ::configs::spec_type<uint64_t>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 2) {
        if (0) {}
        else if (key == "ignore_logon_password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::ignore_logon_password&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_using_multiple_monitors"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::allow_using_multiple_monitors&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_scale_factor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::allow_scale_factor&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "unicode_keyboard_event_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::unicode_keyboard_event_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "encryption_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::encryption_level&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_fallback_legacy"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_fallback_legacy&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_min_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_min_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "tls_max_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_max_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "ssl_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::ssl_cipher_list&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_1_3_ciphersuites"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_1_3_ciphersuites&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_key_exchange_groups"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_key_exchange_groups&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_signature_algorithms"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::tls_signature_algorithms&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "show_common_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::show_common_cipher_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_nla"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_nla&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rdp_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                value
            );
        }
        else if (key == "max_color_depth"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::max_color_depth&>(this->variables).value,
                ::configs::spec_type<ColorDepth>{},
                value
            );
        }
        else if (key == "persistent_disk_bitmap_cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "cache_waiting_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persist_bitmap_cache_on_disk"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bitmap_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bitmap_compression&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "fast_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_suppress_output"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_suppress_output&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_ios_glyph_support_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::bogus_ios_glyph_support_level&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "transform_glyph_to_bitmap"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::transform_glyph_to_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "recv_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::recv_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>>{},
                value
            );
        }
        else if (key == "enable_osd_4_eyes"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_osd_4_eyes&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_remotefx"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::enable_remotefx&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "disabled_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::disabled_orders&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<unsigned>>{},
                value
            );
        }
        else if (key == "workaround_incomplete_images"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::client::workaround_incomplete_images&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 3) {
        if (0) {}
        else if (key == "connection_establishment_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::all_target_mod::connection_establishment_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 1000, 10000>>{},
                value
            );
        }
        else if (key == "tcp_user_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::all_target_mod::tcp_user_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 3600000>>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 4) {
        if (0) {}
        else if (key == "allow_resize_hosted_desktop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::remote_program::allow_resize_hosted_desktop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 5) {
        if (0) {}
        else if (key == "force_performance_flags"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::force_performance_flags&>(this->variables).value,
                ::configs::spec_type<RdpPerformanceFlags>{},
                value
            );
        }
        else if (key == "auto_adjust_performance_flags"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::auto_adjust_performance_flags&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rdp_compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::rdp_compression&>(this->variables).value,
                ::configs::spec_type<RdpCompression>{},
                value
            );
        }
        else if (key == "disconnect_on_logon_user_change"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::disconnect_on_logon_user_change&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "open_session_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::open_session_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "disabled_orders"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::disabled_orders&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<unsigned>>{},
                value
            );
        }
        else if (key == "enable_nla"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_nla&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_kerberos"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_kerberos&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_nla_ntlm_fallback"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allow_nla_ntlm_fallback&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_tls_only_fallback"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allow_tls_only_fallback&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_rdp_legacy_fallback"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allow_rdp_legacy_fallback&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_min_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::tls_min_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "tls_max_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::tls_max_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "cipher_string"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::cipher_string&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_enable_legacy_server"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::tls_enable_legacy_server&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_1_3_ciphersuites"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::tls_1_3_ciphersuites&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_key_exchange_groups"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::tls_key_exchange_groups&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "show_common_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::show_common_cipher_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persistent_disk_bitmap_cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::persistent_disk_bitmap_cache&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "cache_waiting_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::cache_waiting_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "persist_bitmap_cache_on_disk"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::persist_bitmap_cache_on_disk&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allowed_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allowed_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "denied_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::denied_channels&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "allowed_dynamic_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allowed_dynamic_channels&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "denied_dynamic_channels"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::denied_dynamic_channels&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "disable_coreinput_dynamic_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::disable_coreinput_dynamic_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "force_screen_resolution"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::force_screen_resolution&>(this->variables).value,
                ::configs::spec_type<ScreenResolution>{},
                value
            );
        }
        else if (key == "fast_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::fast_path&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_redirection_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::server_redirection_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "load_balance_info"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::load_balance_info&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "client_address_sent"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::client_address_sent&>(this->variables).value,
                ::configs::spec_type<ClientAddressSent>{},
                value
            );
        }
        else if (key == "proxy_managed_drives"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::proxy_managed_drives&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "ignore_auth_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::ignore_auth_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "auth_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::auth_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "checkout_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::checkout_channel&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "alternate_shell"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::alternate_shell&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "shell_arguments"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::shell_arguments&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "shell_working_directory"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::shell_working_directory&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "use_client_provided_alternate_shell"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_client_provided_alternate_shell&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_client_provided_remoteapp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_client_provided_remoteapp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_native_remoteapp_capability"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_native_remoteapp_capability&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "application_driver_exe_or_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_exe_or_file&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_script_argument"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_script_argument&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_chrome_dt_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_chrome_dt_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_chrome_uia_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_chrome_uia_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_firefox_uia_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_firefox_uia_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "application_driver_ie_script"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::application_driver_ie_script&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "hide_client_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::hide_client_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_license_store"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_license_store&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_freerdp_clipboard"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_freerdp_clipboard&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_ios_rdpdr_virtual_channel"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_ios_rdpdr_virtual_channel&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_refresh_rect"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_refresh_rect&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_rdpdr_data_analysis"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_rdpdr_data_analysis&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "remoteapp_bypass_legal_notice_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "remoteapp_bypass_legal_notice_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::remoteapp_bypass_legal_notice_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "log_only_relevant_clipboard_activities"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::log_only_relevant_clipboard_activities&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "split_domain"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::split_domain&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "wabam_uses_translated_remoteapp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::wabam_uses_translated_remoteapp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_shadowing_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_shadowing_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_remotefx"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_remotefx&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_restricted_admin_mode"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_restricted_admin_mode&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "force_smartcard_authentication"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::force_smartcard_authentication&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "mode_console"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::mode_console&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "auto_reconnection_on_losing_target_link"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::auto_reconnection_on_losing_target_link&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_session_reconnection_by_shortcut"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::allow_session_reconnection_by_shortcut&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "session_reconnection_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::session_reconnection_delay&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 15000>>{},
                value
            );
        }
        else if (key == "forward_client_build_number"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::forward_client_build_number&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "bogus_monitor_layout_treatment"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::bogus_monitor_layout_treatment&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "remote_programs_disconnect_message_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::remote_programs_disconnect_message_delay&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 3000, 120000>>{},
                value
            );
        }
        else if (key == "use_session_probe_to_launch_remote_program"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::use_session_probe_to_launch_remote_program&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "replace_null_pointer_by_default_pointer"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::replace_null_pointer_by_default_pointer&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "windows_xp_clipboard_support"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::windows_xp_clipboard_support&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_user_input_until_appdriver_completes"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_rdp::block_user_input_until_appdriver_completes&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 6) {
        if (0) {}
        else if (key == "save_session_info_pdu"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::protocol::save_session_info_pdu&>(this->variables).value,
                ::configs::spec_type<RdpSaveSessionInfoPDU>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 7) {
        if (0) {}
        else if (key == "enable_session_probe"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_session_probe&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "exe_or_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::exe_or_file&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "arguments"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::arguments&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "use_smart_launcher"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::use_smart_launcher&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_launch_mask"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_launch_mask&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "on_launch_failure"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::on_launch_failure&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnLaunchFailure>{},
                value
            );
        }
        else if (key == "launch_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::launch_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "launch_fallback_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::launch_fallback_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "start_launch_timeout_timer_only_after_logon"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::start_launch_timeout_timer_only_after_logon&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "keepalive_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>>{},
                value
            );
        }
        else if (key == "on_keepalive_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::on_keepalive_timeout&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnKeepaliveTimeout>{},
                value
            );
        }
        else if (key == "end_disconnected_session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::end_disconnected_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_autodeployed_appdriver_affinity"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_autodeployed_appdriver_affinity&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_log_rotation"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_log_rotation&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "log_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::log_level&>(this->variables).value,
                ::configs::spec_type<SessionProbeLogLevel>{},
                value
            );
        }
        else if (key == "disconnected_application_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::disconnected_application_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "disconnected_session_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::disconnected_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "idle_session_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::idle_session_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>>{},
                value
            );
        }
        else if (key == "smart_launcher_clipboard_initialization_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::smart_launcher_clipboard_initialization_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "smart_launcher_start_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::smart_launcher_start_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "smart_launcher_long_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::smart_launcher_long_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "smart_launcher_short_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::smart_launcher_short_delay&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "smart_launcher_enable_wabam_affinity"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::smart_launcher_enable_wabam_affinity&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "launcher_abort_delay"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::launcher_abort_delay&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>>{},
                value
            );
        }
        else if (key == "enable_crash_dump"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_crash_dump&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "handle_usage_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::handle_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 1000>>{},
                value
            );
        }
        else if (key == "memory_usage_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::memory_usage_limit&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 200000000>>{},
                value
            );
        }
        else if (key == "cpu_usage_alarm_threshold"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::cpu_usage_alarm_threshold&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<uint32_t, 0, 10000>>{},
                value
            );
        }
        else if (key == "cpu_usage_alarm_action"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::cpu_usage_alarm_action&>(this->variables).value,
                ::configs::spec_type<SessionProbeCPUUsageAlarmAction>{},
                value
            );
        }
        else if (key == "end_of_session_check_delay_time"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::end_of_session_check_delay_time&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>>{},
                value
            );
        }
        else if (key == "ignore_ui_less_processes_during_end_of_session_check"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::ignore_ui_less_processes_during_end_of_session_check&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "extra_system_processes"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::extra_system_processes&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "childless_window_as_unidentified_input_field"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::childless_window_as_unidentified_input_field&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "windows_of_these_applications_as_unidentified_input_field"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::windows_of_these_applications_as_unidentified_input_field&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "update_disabled_features"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::update_disabled_features&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "disabled_features"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::disabled_features&>(this->variables).value,
                ::configs::spec_type<SessionProbeDisabledFeature>{},
                value
            );
        }
        else if (key == "enable_bestsafe_interaction"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_bestsafe_interaction&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "on_account_manipulation"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::on_account_manipulation&>(this->variables).value,
                ::configs::spec_type<SessionProbeOnAccountManipulation>{},
                value
            );
        }
        else if (key == "alternate_directory_environment_variable"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::alternate_directory_environment_variable&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::fixed_string>{},
                value
            );
        }
        else if (key == "public_session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::public_session&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "outbound_connection_monitoring_rules"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::outbound_connection_monitoring_rules&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "process_monitoring_rules"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::process_monitoring_rules&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "customize_executable_name"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::customize_executable_name&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "allow_multiple_handshake"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::allow_multiple_handshake&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "at_end_of_session_freeze_connection_and_wait"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::at_end_of_session_freeze_connection_and_wait&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_cleaner"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::enable_cleaner&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_based_launcher_reset_keyboard_status"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::clipboard_based_launcher_reset_keyboard_status&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "process_command_line_retrieve_method"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::process_command_line_retrieve_method&>(this->variables).value,
                ::configs::spec_type<SessionProbeProcessCommandLineRetrieveMethod>{},
                value
            );
        }
        else if (key == "periodic_task_run_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::periodic_task_run_interval&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<std::chrono::milliseconds, 300, 2000>>{},
                value
            );
        }
        else if (key == "pause_if_session_is_disconnected"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::pause_if_session_is_disconnected&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "monitor_own_resources_consumption"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_probe::monitor_own_resources_consumption&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 8) {
        if (0) {}
        else if (key == "server_cert_store"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_cert_store&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_cert_check"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_cert_check&>(this->variables).value,
                ::configs::spec_type<ServerCertCheck>{},
                value
            );
        }
        else if (key == "server_access_allowed_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_access_allowed_message&>(this->variables).value,
                ::configs::spec_type<ServerCertNotification>{},
                value
            );
        }
        else if (key == "server_cert_create_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_cert_create_message&>(this->variables).value,
                ::configs::spec_type<ServerCertNotification>{},
                value
            );
        }
        else if (key == "server_cert_success_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_cert_success_message&>(this->variables).value,
                ::configs::spec_type<ServerCertNotification>{},
                value
            );
        }
        else if (key == "server_cert_failure_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::server_cert_failure_message&>(this->variables).value,
                ::configs::spec_type<ServerCertNotification>{},
                value
            );
        }
        else if (key == "error_message"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::server_cert::error_message&>(this->variables).value,
                ::configs::spec_type<ServerCertNotification>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 9) {
        if (0) {}
        else if (key == "clipboard_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::clipboard_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::clipboard_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "encodings"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::encodings&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<int>>{},
                value
            );
        }
        else if (key == "support_cursor_pseudo_encoding"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::support_cursor_pseudo_encoding&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_clipboard_encoding_type"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_clipboard_encoding_type&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "bogus_clipboard_infinite_loop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::bogus_clipboard_infinite_loop&>(this->variables).value,
                ::configs::spec_type<VncBogusClipboardInfiniteLoop>{},
                value
            );
        }
        else if (key == "server_is_macos"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_is_macos&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "server_unix_alt"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::server_unix_alt&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_ipv6"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::enable_ipv6&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_min_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::tls_min_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "tls_max_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::tls_max_level&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "cipher_string"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::cipher_string&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_enable_legacy_server"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::tls_enable_legacy_server&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "tls_1_3_ciphersuites"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::tls_1_3_ciphersuites&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "tls_key_exchange_groups"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::tls_key_exchange_groups&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "show_common_cipher_list"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::show_common_cipher_list&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "force_authentication_method"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_vnc::force_authentication_method&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 10) {
        if (0) {}
        else if (key == "enable_session_log_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::enable_session_log_file&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_syslog_format"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::enable_syslog_format&>(this->variables).value,
                ::configs::spec_type<SessionLogFormat>{},
                value
            );
        }
        else if (key == "keyboard_input_masking_level"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::session_log::keyboard_input_masking_level&>(this->variables).value,
                ::configs::spec_type<KeyboardInputMaskingLevel>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 11) {
        if (0) {}
        else if (key == "version"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::version&>(this->variables).value,
                ::configs::spec_type<OcrVersion>{},
                value
            );
        }
        else if (key == "locale"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::locale&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::duration<unsigned, std::ratio<1, 100>>>{},
                value
            );
        }
        else if (key == "on_title_bar_only"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::on_title_bar_only&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "max_unrecog_char_rate"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::ocr::max_unrecog_char_rate&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<unsigned, 0, 100>>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 12) {
        if (0) {}
        else if (key == "hash_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::hash_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "record_tmp_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::record_tmp_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "record_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::record_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "capture_flags"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::capture_flags&>(this->variables).value,
                ::configs::spec_type<CaptureFlags>{},
                value
            );
        }
        else if (key == "disable_keyboard_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::disable_keyboard_log&>(this->variables).value,
                ::configs::spec_type<KeyboardLogFlags>{},
                value
            );
        }
        else if (key == "disable_clipboard_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::disable_clipboard_log&>(this->variables).value,
                ::configs::spec_type<ClipboardLogFlags>{},
                value
            );
        }
        else if (key == "disable_file_system_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::disable_file_system_log&>(this->variables).value,
                ::configs::spec_type<FileSystemLogFlags>{},
                value
            );
        }
        else if (key == "wrm_break_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::wrm_break_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "wrm_color_depth_selection_strategy"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::wrm_color_depth_selection_strategy&>(this->variables).value,
                ::configs::spec_type<ColorDepthSelectionStrategy>{},
                value
            );
        }
        else if (key == "wrm_compression_algorithm"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::wrm_compression_algorithm&>(this->variables).value,
                ::configs::spec_type<WrmCompressionAlgorithm>{},
                value
            );
        }
        else if (key == "file_permissions"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::capture::file_permissions&>(this->variables).value,
                ::configs::spec_type<FilePermissions>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 13) {
        if (0) {}
        else if (key == "enable_keyboard_log"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::enable_keyboard_log&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "video_break_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::video_break_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }
        else if (key == "video_frame_rate"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::video_frame_rate&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::range<unsigned, 1, 120>>{},
                value
            );
        }
        else if (key == "video_notimestamp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::video_notimestamp&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "video_codec"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::video_codec&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "ffmpeg_options"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::ffmpeg_options&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "smart_video_cropping"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::smart_video_cropping&>(this->variables).value,
                ::configs::spec_type<SmartVideoCropping>{},
                value
            );
        }
        else if (key == "play_video_with_corrupted_bitmap"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::play_video_with_corrupted_bitmap&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "file_permissions"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::file_permissions&>(this->variables).value,
                ::configs::spec_type<FilePermissions>{},
                value
            );
        }
        else if (key == "allow_rt_without_recording"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::allow_rt_without_recording&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "rt_png_interval"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::rt_png_interval&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }
        else if (key == "rt_png_limit"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::rt_png_limit&>(this->variables).value,
                ::configs::spec_type<unsigned>{},
                value
            );
        }
        else if (key == "use_redis"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::use_redis&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "redis_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::audit::redis_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::milliseconds>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 14) {
        if (0) {}
        else if (key == "socket_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::socket_path&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "enable_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::enable_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "enable_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::enable_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_text_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::clipboard_text_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "clipboard_text_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::clipboard_text_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_file_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_file_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_file_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_file_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_clipboard_text_up"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_clipboard_text_up&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "block_invalid_clipboard_text_down"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::block_invalid_clipboard_text_down&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "log_if_accepted"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::log_if_accepted&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "max_file_size_rejected"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::max_file_size_rejected&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "tmpdir"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_verification::tmpdir&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 15) {
        if (0) {}
        else if (key == "store_file"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::file_storage::store_file&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 16) {
        // all members are external
    }
    else if (this->section_id == 17) {
        // all members are external
    }
    else if (this->section_id == 18) {
        if (0) {}
        else if (key == "enable_websocket"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::enable_websocket&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "use_tls"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::use_tls&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "listen_address"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::websocket::listen_address&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 19) {
        if (0) {}
        else if (key == "enable_target_field"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::internal_mod::enable_target_field&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "keyboard_layout_proposals"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::internal_mod::keyboard_layout_proposals&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }
        else if (key == "enable_close_box"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::internal_mod::enable_close_box&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "close_box_timeout"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::internal_mod::close_box_timeout&>(this->variables).value,
                ::configs::spec_type<std::chrono::seconds>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 20) {
        if (0) {}
        else if (key == "replay_path"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_replay::replay_path&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::directory_path>{},
                value
            );
        }
        else if (key == "on_end_of_data"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_replay::on_end_of_data&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "replay_on_loop"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::mod_replay::replay_on_loop&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 21) {
        if (0) {}
        else if (key == "login_language"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::translation::login_language&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 22) {
        if (0) {}
        else if (key == "enable_theme"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::enable_theme&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "logo"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::logo_path&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "separator_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::separator_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "focus_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::focus_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "error_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::error_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_border_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_border_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_focus_border_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_focus_border_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_cursor_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_cursor_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "edit_placeholder_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::edit_placeholder_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "password_toggle_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::password_toggle_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "tooltip_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "tooltip_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "tooltip_border_color"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::tooltip_border_color&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_line1_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line1_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_line1_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line1_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_line2_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line2_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_line2_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_line2_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_focus_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_focus_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_focus_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_focus_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_selected_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_selected_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_selected_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_selected_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_label_bgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_label_bgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }
        else if (key == "selector_label_fgcolor"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::theme::selector_label_fgcolor&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::rgb>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (this->section_id == 23) {
        if (0) {}
        else if (key == "primary_user"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::primary_user&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "fake_target_ip"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::fake_target_ip&>(this->variables).value,
                ::configs::spec_type<std::string>{},
                value
            );
        }
        else if (key == "capture"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::capture&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "auth"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::auth&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "session"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::session&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "front"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::front&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_rdp"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_rdp&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_vnc"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_vnc&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "mod_internal"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_internal&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "sck_mod"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::sck_mod&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "sck_front"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::sck_front&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "password"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::password&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "compression"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::compression&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "cache"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::cache&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "ocr"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::ocr&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "ffmpeg"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::ffmpeg&>(this->variables).value,
                ::configs::spec_type<uint32_t>{},
                value
            );
        }
        else if (key == "config"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::config&>(this->variables).value,
                ::configs::spec_type<bool>{},
                value
            );
        }
        else if (key == "mod_rdp_use_failure_simulation_socket_transport"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::mod_rdp_use_failure_simulation_socket_transport&>(this->variables).value,
                ::configs::spec_type<ModRdpUseFailureSimulationSocketTransport>{},
                value
            );
        }
        else if (key == "probe_client_addresses"_zv) {
            ::config_parse_and_log(
                this->section_name, key.c_str(),
                static_cast<cfg::debug::probe_client_addresses&>(this->variables).value,
                ::configs::spec_type<::configs::spec_types::list<std::string>>{},
                value
            );
        }

        else if (static_cast<cfg::debug::config>(this->variables).value) {
            LOG(LOG_WARNING, "unknown parameter %s in section [%s]",
                key, this->section_name);
        }
    }
    else if (static_cast<cfg::debug::config>(this->variables).value) {
        LOG(LOG_WARNING, "unknown section [%s]", this->section_name);
    }
}
