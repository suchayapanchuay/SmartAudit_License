// DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN

#pragma once

#include "configs/autogen/authid.hpp"
#include "configs/loggable.hpp"
#include <cstdint>

namespace configs
{
    template<class... Ts>
    struct Pack
    { static const std::size_t size = sizeof...(Ts); };

    namespace cfg_indexes
    {
        // inline constexpr int section0 = 0; /* general */
        inline constexpr int section1 = 0; /* globals */
        inline constexpr int section2 = 16; /* client */
        inline constexpr int section3 = 17; /* all_target_mod */
        // inline constexpr int section4 = 18; /* remote_program */
        inline constexpr int section5 = 18; /* mod_rdp */
        inline constexpr int section6 = 66; /* protocol */
        inline constexpr int section7 = 67; /* session_probe */
        inline constexpr int section8 = 112; /* server_cert */
        inline constexpr int section9 = 121; /* mod_vnc */
        inline constexpr int section10 = 137; /* session_log */
        // inline constexpr int section11 = 139; /* ocr */
        inline constexpr int section12 = 139; /* capture */
        inline constexpr int section13 = 146; /* audit */
        inline constexpr int section14 = 155; /* file_verification */
        inline constexpr int section15 = 163; /* file_storage */
        // inline constexpr int section16 = 164; /* icap_server_down */
        // inline constexpr int section17 = 164; /* icap_server_up */
        inline constexpr int section18 = 164; /* crypto */
        // inline constexpr int section19 = 166; /* websocket */
        // inline constexpr int section20 = 166; /* vnc_over_ssh */
        inline constexpr int section21 = 166; /* context */
        // inline constexpr int section22 = 254; /* internal_mod */
        inline constexpr int section23 = 254; /* mod_replay */
        inline constexpr int section24 = 256; /* translation */
        // inline constexpr int section25 = 257; /* theme */
        // inline constexpr int section26 = 257; /* debug */
    } // namespace cfg_indexes
} // namespace configs

namespace cfg
{

    /// From incoming connection to "up_and_running" state. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct globals::front_connection_time {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 0};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value {  };
    };
    /// From Module rdp creation to "up_and_running" state. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct globals::target_connection_time {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 1};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// acl::name: login <br/>
    /// default: "" <br/>
    struct globals::auth_user {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 2};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// acl::name: ip_client <br/>
    /// default: "" <br/>
    struct globals::host {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 3};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// acl::name: ip_target <br/>
    /// default: "" <br/>
    struct globals::target {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 4};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::target_device {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 5};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::device_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 6};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::primary_user_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 7};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// acl::name: target_login <br/>
    /// default: "" <br/>
    struct globals::target_user {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 8};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::target_application {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 9};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::target_application_account {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 10};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct globals::target_application_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 11};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Port of RDP Proxy service. <br/>
    ///  <br/>
    /// Changing the port number will restart the service and disconnect active sessions. It will also block WALLIX Access Manager connections unless its RDP port is configured. <br/>
    /// Choose a port that is not already in use. Otherwise, the service will not run. <br/>
    /// type: unsigned <br/>
    /// default: 3389 <br/>
    struct globals::port {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 3389 };
    };
    /// Socket path or socket address of passthrough / ACL. <br/>
    /// type: std::string <br/>
    /// default: REDEMPTION_CONFIG_AUTHFILE <br/>
    struct globals::authfile {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { REDEMPTION_CONFIG_AUTHFILE };
    };
    /// Timeout during RDP connection initialization. <br/>
    /// Increase this value if the connection between workstations and Bastion is slow. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 10 <br/>
    struct globals::handshake_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 10 };
    };
    /// No automatic disconnection due to inactivity, timer is set on primary authentication. <br/>
    /// If the value is between 1 and 30, then 30 is used. <br/>
    /// If the value is set to 0, then inactivity timeout value is unlimited. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 900 <br/>
    struct globals::base_inactivity_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 900 };
    };
    /// No automatic disconnection due to inactivity, timer is set on target session. <br/>
    /// If the value is between 1 and 30, then 30 is used. <br/>
    /// If the value is set to 0, then the value set in [globals]base_inactivity_timeout is used. <br/>
    /// type: std::chrono::seconds <br/>
    /// connpolicy -> proxy    [name: session::inactivity_timeout] <br/>
    /// aclName: globals:inactivity_timeout <br/>
    /// default: 0 <br/>
    struct globals::inactivity_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 12};
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value {  };
    };
    /// Internal keepalive between ACL and RDP proxy. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 30 <br/>
    struct globals::keepalive_grace_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 30 };
    };
    /// Specifies how long the RDP proxy login screen should be displayed before the client window closes (use 0 to deactivate). <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 120 <br/>
    struct globals::authentication_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 120 };
    };
    /// Session record options. <br/>
    /// type: TraceType <br/>
    /// acl ⇒ proxy <br/>
    /// default: TraceType::localfile_hashed <br/>
    struct globals::trace_type {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 13};
        using type = TraceType;
        using mapped_type = TraceType;
        type value { TraceType::localfile_hashed };
    };
    /// Specify bind address. <br/>
    /// type: std::string <br/>
    /// default: "0.0.0.0" <br/>
    struct globals::listen_address {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = ::configs::spec_types::ip;
        type value { "0.0.0.0" };
    };
    /// Transparent mode allows network traffic interception for a target, even when users directly specify a target's address instead of a proxy address. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct globals::enable_transparent_mode {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Proxy certificate password. <br/>
    /// type: char[254+1] <br/>
    /// default: "inquisition" <br/>
    struct globals::certificate_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[254+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { "inquisition" };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct globals::is_rec {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 14};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Support of Bitmap Update. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct globals::enable_bitmap_update {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Displays a reminder box at the top of the session when a session has a time limit (timeframe or approval). <br/>
    /// Reminders appear at 30 minutes, 10 minutes, 5 minutes, and 1 minute before the session ends. <br/>
    /// type: bool <br/>
    /// displayName: Enable end time warning OSD <br/>
    /// default: true <br/>
    struct globals::enable_end_time_warning_osd {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Allows showing the target device name with F12 during the session. <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// displayName: Enable OSD display remote target <br/>
    /// default: true <br/>
    struct globals::enable_osd_display_remote_target {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section1 + 15};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Displays the target username in the session when F12 is pressed. <br/>
    /// This option needs [globals]enable_osd_display_remote_target. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct globals::show_target_user_in_f12_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: bool <br/>
    /// default: REDEMPTION_CONFIG_ENABLE_WAB_INTEGRATION <br/>
    struct globals::enable_wab_integration {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { REDEMPTION_CONFIG_ENABLE_WAB_INTEGRATION };
    };
    /// Enable support for 96x96 size pointers. <br/>
    /// ⚠ If this option is disabled and the application does not support smaller pointers, the pointer may remain stuck on the last active pointer. For example, the resize window pointer would remain visible rather than change to a 'normal' pointer. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct globals::large_pointer_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: std::chrono::milliseconds <br/>
    /// default: 1000 <br/>
    struct globals::mod_recv_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>;
        type value { 1000 };
    };
    /// type: bool <br/>
    /// default: false <br/>
    struct globals::experimental_enable_serializer_data_block_size_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Prevent Remote Desktop session timeouts due to idle TCP sessions by periodically sending keepalive packets to the client. <br/>
    /// Set to 0 to disable this feature. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// displayName: RDP keepalive connection interval <br/>
    /// default: 0 <br/>
    struct globals::rdp_keepalive_connection_interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value {  };
    };
    /// ⚠ Manually restart service redemption to take changes into account. <br/>
    ///  <br/>
    /// Enable primary connection on IPv6. <br/>
    /// type: bool <br/>
    /// displayName: Enable IPv6 <br/>
    /// default: true <br/>
    struct globals::enable_ipv6 {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// 0 for disabled. <br/>
    /// (in megabytes) <br/>
    /// type: uint64_t <br/>
    /// default: 100 <br/>
    struct globals::minimal_memory_available_before_connection_silently_closed {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint64_t;
        using mapped_type = uint64_t;
        type value { 100 };
    };

    /// If true, ignore the password provided by the RDP client. The user needs to manually log in. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::ignore_logon_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Sends the client screen count to the target server. Not supported for VNC targets. <br/>
    /// Uncheck to disable multiple monitors. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::allow_using_multiple_monitors {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Sends Scale & Layout configuration to the target server. <br/>
    /// On Windows 11, this corresponds to the options "Scale", "Display Resolution" and "Display Orientation" of Settings > System > Display. <br/>
    /// ⚠ Title bar detection via OCR will no longer work. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::allow_scale_factor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Allows the client to use unicode characters. <br/>
    /// This is useful for displaying characters that are not available on the keyboard layout used, such as some special characters or emojis. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::unicode_keyboard_event_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Legacy encryption when External Security Protocol (TLS, CredSSP, etc) is disabled. <br/>
    /// type: RdpSecurityEncryptionLevel <br/>
    /// default: RdpSecurityEncryptionLevel::high <br/>
    struct client::encryption_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = RdpSecurityEncryptionLevel;
        using mapped_type = std::string;
        type value { RdpSecurityEncryptionLevel::high };
    };
    /// Fallback to RDP Legacy Encryption if the client does not support TLS. <br/>
    /// ⚠ Enabling this option is a security risk. <br/>
    /// type: bool <br/>
    /// displayName: TLS fallback legacy <br/>
    /// default: false <br/>
    struct client::tls_fallback_legacy {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable TLS between client and proxy. <br/>
    /// type: bool <br/>
    /// displayName: TLS support <br/>
    /// default: true <br/>
    struct client::tls_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Minimal incoming TLS level: 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// ⚠ Lower this value only for compatibility reasons. <br/>
    /// type: uint32_t <br/>
    /// displayName: TLS min level <br/>
    /// default: 2 <br/>
    struct client::tls_min_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 2 };
    };
    /// Maximal incoming TLS level: 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// ⚠ Change this value only for compatibility reasons. <br/>
    /// type: uint32_t <br/>
    /// displayName: TLS max level <br/>
    /// default: 0 <br/>
    struct client::tls_max_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// [Not configured]: Compatible with more RDP clients (less secure) <br/>
    /// HIGH:!ADH:!3DES: Compatible only with MS Windows 7 client or more recent (moderately secure) <br/>
    /// HIGH:!ADH:!3DES:!SHA: Compatible only with MS Server Windows 2008 R2 client or more recent (more secure) <br/>
    /// The format used is described on this page: https://www.openssl.org/docs/man3.1/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT <br/>
    /// type: std::string <br/>
    /// displayName: SSL cipher list <br/>
    /// default: "HIGH:!ADH:!3DES:!SHA" <br/>
    struct client::ssl_cipher_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { "HIGH:!ADH:!3DES:!SHA" };
    };
    /// Configure the available TLSv1.3 ciphersuites. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in the third paragraph of this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_ciphersuites.html#DESCRIPTION <br/>
    /// type: std::string <br/>
    /// displayName: TLS 1.3 cipher suites <br/>
    /// default: "" <br/>
    struct client::tls_1_3_ciphersuites {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Configure the supported key exchange groups. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in this page: https://www.openssl.org/docs/man3.2/man3/SSL_CONF_cmd.html#groups-groups <br/>
    /// type: std::string <br/>
    /// displayName: TLS key exchange groups <br/>
    /// default: "" <br/>
    struct client::tls_key_exchange_groups {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Configure the supported server signature algorithms. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format should be a colon separated list of signature algorithms in order of decreasing preference of the form algorithm+hash or signature_scheme. <br/>
    /// algorithm is one of RSA, RSA-PSS or ECDSA. <br/>
    /// hash is one of SHA224, SHA256, SHA384 or SHA512. <br/>
    /// signature_scheme is one of the signature schemes defined in TLSv1.3 (rfc8446#section-4.2.3), specified using the IETF name, e.g., ecdsa_secp384r1_sha384 or rsa_pss_rsae_sha256. <br/>
    /// This list needs at least one signature algorithm compatible with the RDP Proxy certificate. <br/>
    /// type: std::string <br/>
    /// displayName: TLS signature algorithms <br/>
    /// default: "RSA+SHA256:RSA+SHA384:RSA+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512" <br/>
    struct client::tls_signature_algorithms {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { "RSA+SHA256:RSA+SHA384:RSA+SHA512:RSA-PSS+SHA256:RSA-PSS+SHA384:RSA-PSS+SHA512:ECDSA+SHA256:ECDSA+SHA384:ECDSA+SHA512" };
    };
    /// Show the common cipher list supported by client and target server in the logs. <br/>
    /// ⚠ Only for debugging purposes. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::show_common_cipher_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Needed for primary NTLM or Kerberos connections over NLA. <br/>
    /// type: bool <br/>
    /// displayName: Enable NLA <br/>
    /// default: false <br/>
    struct client::enable_nla {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If enabled, ignore Ctrl+Alt+Del, Ctrl+Shift+Esc and Windows+Tab keyboard sequences. <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct client::disable_tsk_switch_shortcuts {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section2 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Specifies the highest RDP compression support available on the client connection session. <br/>
    /// type: RdpCompression <br/>
    /// displayName: RDP compression <br/>
    /// default: RdpCompression::rdp6_1 <br/>
    struct client::rdp_compression {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = RdpCompression;
        using mapped_type = RdpCompression;
        type value { RdpCompression::rdp6_1 };
    };
    /// Specifies the maximum color depth for the client connection session: <br/>
    /// type: ColorDepth <br/>
    /// default: ColorDepth::depth24 <br/>
    struct client::max_color_depth {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ColorDepth;
        using mapped_type = ColorDepth;
        type value { ColorDepth::depth24 };
    };
    /// Persistent Disk Bitmap Cache on the primary connection side. If the RDP client supports it, this setting increases the size of image caches. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::persistent_disk_bitmap_cache {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Support of Cache Waiting List: Experimental cache strategy (this value is ignored if [client]persistent_disk_bitmap_cache is disabled). <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::cache_waiting_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If enabled, the content of Persistent Bitmap Caches are stored on the disk to reuse later (this value is ignored if [client]persistent_disk_bitmap_cache is disabled). <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::persist_bitmap_cache_on_disk {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable Bitmap Compression when supported by the RDP client. <br/>
    /// Disabling this option increases the network bandwith usage. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::bitmap_compression {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Enables support of Client Fast-Path Input Event PDUs. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::fast_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Allows the client to request the target server to stop graphical updates. For example, when the RDP client window is minimized to reduce bandwidth. <br/>
    /// ⚠ If changes occur on the target, they will not be visible in the recordings either. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct client::enable_suppress_output {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Same effect as [client]transform_glyph_to_bitmap, but only for RDP clients on an iOS platform. <br/>
    /// type: bool <br/>
    /// displayName: Bogus iOS glyph support level <br/>
    /// default: true <br/>
    struct client::bogus_ios_glyph_support_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This option converts glyphs to bitmaps to resolve issues with certain RDP clients. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::transform_glyph_to_bitmap {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::chrono::milliseconds <br/>
    /// default: 1000 <br/>
    struct client::recv_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 100, 10000>;
        type value { 1000 };
    };
    /// Informs users with a message when their session is audited. <br/>
    /// type: bool <br/>
    /// displayName: Enable OSD 4 eyes <br/>
    /// default: true <br/>
    struct client::enable_osd_4_eyes {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Enable RemoteFX on the client connection. <br/>
    /// Needs - [client]max_color_depth set to 32 (32-bit RGB mask + alpha) <br/>
    ///       - [mod_rdp]enable_remotefx set to on <br/>
    /// type: bool <br/>
    /// displayName: Enable RemoteFX <br/>
    /// default: true <br/>
    struct client::enable_remotefx {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This option should only be used if the target server or client is showing graphical issues. <br/>
    /// In general, disabling RDP orders has a negative impact on performance. <br/>
    ///  <br/>
    /// Drawing orders that can be disabled: <br/>
    ///    0: DstBlt <br/>
    ///    1: PatBlt <br/>
    ///    2: ScrBlt <br/>
    ///    3: MemBlt <br/>
    ///    4: Mem3Blt <br/>
    ///    9: LineTo <br/>
    ///   15: MultiDstBlt <br/>
    ///   16: MultiPatBlt <br/>
    ///   17: MultiScrBlt <br/>
    ///   18: MultiOpaqueRect <br/>
    ///   22: Polyline <br/>
    ///   25: EllipseSC <br/>
    ///   27: GlyphIndex <br/>
    /// type: std::string <br/>
    /// default: "25" <br/>
    struct client::disabled_orders {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<unsigned>;
        type value { "25" };
    };
    /// This option fixes a bug in the Remote Desktop client on Windows 11/Windows Server 2025 starting with version 24H2. <br/>
    /// Occasionally, some screen areas may not refresh due to a bug where only the first image in a BitmapUpdate message with multiple images is displayed correctly. <br/>
    /// Enabling this option prevents this issue, but will slightly increase the data sent to the client. <br/>
    /// The option is automatically disabled if the connection is from an Access Manager. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct client::workaround_incomplete_images {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };

    /// The maximum wait time for the proxy to connect to a target. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// default: 3000 <br/>
    struct all_target_mod::connection_establishment_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 1000, 10000>;
        type value { 3000 };
    };
    /// This parameter allows you to specify max timeout before a TCP connection is aborted. If the option value is specified as 0, TCP will use the system default. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: all_target_mod:tcp_user_timeout <br/>
    /// displayName: TCP user timeout <br/>
    /// default: 0 <br/>
    struct all_target_mod::tcp_user_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section3 + 0};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 3600000>;
        type value {  };
    };

    /// Allows resizing of a desktop session opened in a RemoteApp window. <br/>
    /// This happens when an RDP client opened in RemoteApp accesses a desktop target. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct remote_program::allow_resize_hosted_desktop {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };

    /// It specifies a list of (comma-separated) RDP server desktop features to enable or disable in the session (with the goal of optimizing bandwidth usage). <br/>
    ///  <br/>
    /// If a feature is preceded by a "-" sign, it is disabled; if it is preceded by a "+" sign or no sign, it is enabled. Unconfigured features can be controlled by the RDP client. <br/>
    ///  <br/>
    /// Available features: <br/>
    ///   - wallpaper <br/>
    ///   - full_window_drag <br/>
    ///   - menu_animations <br/>
    ///   - theme <br/>
    ///   - mouse_cursor_shadows <br/>
    ///   - cursor_blinking <br/>
    ///   - font_smoothing <br/>
    ///   - desktop_composition <br/>
    /// type: RdpPerformanceFlags <br/>
    /// default: 0x2c, 0x0 <br/>
    struct mod_rdp::force_performance_flags {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = RdpPerformanceFlags;
        using mapped_type = RdpPerformanceFlags;
        type value { 0x2c, 0x0 };
    };
    /// If enabled, the font smoothing desktop feature is automatically disabled in recorded session. <br/>
    /// This allows OCR (when session probe is disabled) to better detect window titles. <br/>
    /// If disabled, it allows font smoothing in recorded sessions. However, OCR will not work when session recording is disabled. In this case, window titles are not detected. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::auto_adjust_performance_flags {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Specifies the highest RDP compression support available on the target server connection. <br/>
    /// type: RdpCompression <br/>
    /// displayName: RDP compression <br/>
    /// default: RdpCompression::rdp6_1 <br/>
    struct mod_rdp::rdp_compression {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = RdpCompression;
        using mapped_type = RdpCompression;
        type value { RdpCompression::rdp6_1 };
    };
    /// type: bool <br/>
    /// default: false <br/>
    struct mod_rdp::disconnect_on_logon_user_change {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// The maximum wait time for the proxy to log on to an RDP session. <br/>
    /// Value 0 is equivalent to 15 seconds. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 0 <br/>
    struct mod_rdp::open_session_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value {  };
    };
    /// This option should only be used if the target server or client is showing graphical issues. <br/>
    /// In general, disabling RDP orders has a negative impact on performance. <br/>
    ///  <br/>
    /// Drawing orders that can be disabled: <br/>
    ///    0: DstBlt <br/>
    ///    1: PatBlt <br/>
    ///    2: ScrBlt <br/>
    ///    3: MemBlt <br/>
    ///    4: Mem3Blt <br/>
    ///    9: LineTo <br/>
    ///   15: MultiDstBlt <br/>
    ///   16: MultiPatBlt <br/>
    ///   17: MultiScrBlt <br/>
    ///   18: MultiOpaqueRect <br/>
    ///   22: Polyline <br/>
    ///   25: EllipseSC <br/>
    ///   27: GlyphIndex <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:disabled_orders <br/>
    /// default: "27" <br/>
    struct mod_rdp::disabled_orders {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 0};
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<unsigned>;
        type value { "27" };
    };
    /// Enable NLA authentication in secondary targets. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_nla <br/>
    /// displayName: Enable NLA <br/>
    /// default: true <br/>
    struct mod_rdp::enable_nla {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 1};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// When [mod_rdp]enable_nla is selected: <br/>
    /// Enabling this option instructs the Bastion to use Kerberos as its initial method. <br/>
    /// Disabling this option instructs the Bastion to only use NTLM. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_kerberos <br/>
    /// displayName: Enable Kerberos <br/>
    /// default: true <br/>
    struct mod_rdp::enable_kerberos {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 2};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// When both [mod_rdp]enable_nla and [mod_rdp]enable_kerberos are selected: <br/>
    /// Enabling this option instructs the Bastion to use Kerberos first and, if necessary, NTLM as a backup. <br/>
    /// Disabling this option instructs the Bastion to only use Kerberos. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:allow_nla_ntlm_fallback <br/>
    /// displayName: Allow NLA NTLM fallback <br/>
    /// default: false <br/>
    struct mod_rdp::allow_nla_ntlm_fallback {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 3};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Allow TLS only. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:allow_tls_only_fallback <br/>
    /// displayName: Allow TLS only fallback <br/>
    /// default: false <br/>
    struct mod_rdp::allow_tls_only_fallback {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 4};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Allow Standard RDP Security (Legacy). <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:allow_rdp_legacy_fallback <br/>
    /// displayName: Allow RDP legacy fallback <br/>
    /// default: false <br/>
    struct mod_rdp::allow_rdp_legacy_fallback {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 5};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Minimal incoming TLS level 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:tls_min_level <br/>
    /// displayName: TLS min level <br/>
    /// default: 2 <br/>
    struct mod_rdp::tls_min_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 6};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 2 };
    };
    /// Maximal incoming TLS level 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:tls_max_level <br/>
    /// displayName: TLS max level <br/>
    /// default: 0 <br/>
    struct mod_rdp::tls_max_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 7};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// TLSv1.2 and below additional ciphers supported. <br/>
    /// Empty to apply system-wide configuration (SSL security level 2), ALL for support of all ciphers to ensure highest compatibility with target servers. <br/>
    /// The format used is described on this page: https://www.openssl.org/docs/man3.1/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:cipher_string <br/>
    /// default: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256" <br/>
    struct mod_rdp::cipher_string {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 8};
        using type = std::string;
        using mapped_type = std::string;
        type value { "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256" };
    };
    /// Allow TLS legacy insecure renegotiation to unpatched target servers. <br/>
    /// For Windows Server 2008, requires also to set ALL@SECLEVEL=0 in [mod_rdp]cipher_string. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:tls_enable_legacy_server <br/>
    /// displayName: TLS enable legacy server <br/>
    /// default: false <br/>
    struct mod_rdp::tls_enable_legacy_server {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 9};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Configure the available TLSv1.3 ciphersuites. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in the third paragraph of this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_ciphersuites.html#DESCRIPTION <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:tls_1_3_ciphersuites <br/>
    /// displayName: TLS 1.3 cipher suites <br/>
    /// default: "" <br/>
    struct mod_rdp::tls_1_3_ciphersuites {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 10};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Configure the supported key exchange groups. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in this page: https://www.openssl.org/docs/man3.2/man3/SSL_CONF_cmd.html#groups-groups <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:tls_key_exchange_groups <br/>
    /// displayName: TLS key exchange groups <br/>
    /// default: "P-256:P-384:P-521:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192" <br/>
    struct mod_rdp::tls_key_exchange_groups {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 11};
        using type = std::string;
        using mapped_type = std::string;
        type value { "P-256:P-384:P-521:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192" };
    };
    /// Show in the logs the common cipher list supported by client and target server <br/>
    /// ⚠ Only for debugging purposes. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:show_common_cipher_list <br/>
    /// default: false <br/>
    struct mod_rdp::show_common_cipher_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 12};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Persistent Disk Bitmap Cache on the secondary connection side. If supported by the RDP target server, the size of image caches will be increased. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::persistent_disk_bitmap_cache {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Support of Cache Waiting List (this value is ignored if the [mod_rdp]persistent_disk_bitmap_cache is disabled). <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::cache_waiting_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// If enabled, the contents of Persistent Bitmap Caches are stored on disk for reusing them later (this value is ignored if [mod_rdp]persistent_disk_bitmap_cache is disabled). <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct mod_rdp::persist_bitmap_cache_on_disk {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// List of (comma-separated) enabled (static) virtual channel. If character '*' is used as a name then enables everything. <br/>
    /// Explicit names have higher priority than '*' in [mod_rdp]denied_channels. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "*" <br/>
    struct mod_rdp::allowed_channels {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 13};
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<std::string>;
        type value { "*" };
    };
    /// List of (comma-separated) disabled (static) virtual channel. If character '*' is used as a name then disables everything. <br/>
    /// Explicit names have higher priority than '*' in [mod_rdp]allowed_channels. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct mod_rdp::denied_channels {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 14};
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<std::string>;
        type value {  };
    };
    /// List of (comma-separated) enabled dynamic virtual channel. If character '*' is used as a name then enables everything. <br/>
    /// Explicit names have higher priority than '*' in [mod_rdp]denied_dynamic_channels. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:allowed_dynamic_channels <br/>
    /// default: "*" <br/>
    struct mod_rdp::allowed_dynamic_channels {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 15};
        using type = std::string;
        using mapped_type = std::string;
        type value { "*" };
    };
    /// List of (comma-separated) disabled dynamic virtual channel. If character '*' is used as a name then disables everything. <br/>
    /// Explicit names have higher priority than '*' in [mod_rdp]allowed_dynamic_channels. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:denied_dynamic_channels <br/>
    /// default: "" <br/>
    struct mod_rdp::denied_dynamic_channels {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 16};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// If this option is unchecked, keyboard/mouse inputs are transmitted over the dynamic virtual channel. <br/>
    /// This will cause the session inactivity detection and keyboard input log to malfunction in Windows 11 and Windows Server 2025. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:disable_coreinput_dynamic_channel <br/>
    /// default: true <br/>
    struct mod_rdp::disable_coreinput_dynamic_channel {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 17};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Force the screen resolution of a RDP target. <br/>
    /// This option is ignored when the value is 0x0 or empty. <br/>
    /// type: ScreenResolution <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:force_screen_resolution <br/>
    /// default:  <br/>
    struct mod_rdp::force_screen_resolution {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 18};
        using type = ScreenResolution;
        using mapped_type = ScreenResolution;
        type value {  };
    };
    /// Enables support of Client/Server Fast-Path Input/Update PDUs. <br/>
    /// Fast-Path is required for Windows Server 2012 (or more recent). <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::fast_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// The secondary target connection can be redirected to a specific session on another RDP server. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy    [name: mod_rdp::server_redirection] <br/>
    /// aclName: mod_rdp:server_redirection_support <br/>
    /// displayName: Enable Server Redirection Support <br/>
    /// default: false <br/>
    struct mod_rdp::server_redirection_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 19};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Load balancing information. <br/>
    /// For example 'tsv://MS Terminal Services Plugin.1.Sessions' where 'Sessions' is the name of the targeted RD Collection which works fine. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:load_balance_info <br/>
    /// default: "" <br/>
    struct mod_rdp::load_balance_info {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 20};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Client Address to send to target (in InfoPacket). <br/>
    /// type: ClientAddressSent <br/>
    /// default: ClientAddressSent::no_address <br/>
    struct mod_rdp::client_address_sent {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ClientAddressSent;
        using mapped_type = ClientAddressSent;
        type value { ClientAddressSent::no_address };
    };
    /// Shared directory between proxy and secondary target. <br/>
    /// Requires RDPDR support. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct mod_rdp::proxy_managed_drives {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 21};
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<std::string>;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct mod_rdp::ignore_auth_channel {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 22};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Authentication channel used by Auto IT scripts. May be '*' to use default name. Keep empty to disable virtual channel. <br/>
    /// type: char[7+1] <br/>
    /// default: "*" <br/>
    struct mod_rdp::auth_channel {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[7+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { "*" };
    };
    /// Authentication channel used by other scripts. No default name. Keep empty to disable virtual channel. <br/>
    /// type: char[7+1] <br/>
    /// default: "" <br/>
    struct mod_rdp::checkout_channel {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[7+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: alternate_shell <br/>
    /// default: "" <br/>
    struct mod_rdp::alternate_shell {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 23};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: shell_arguments <br/>
    /// default: "" <br/>
    struct mod_rdp::shell_arguments {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 24};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: shell_working_directory <br/>
    /// default: "" <br/>
    struct mod_rdp::shell_working_directory {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 25};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// As far as possible, use client-provided initial program (Alternate Shell). <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:use_client_provided_alternate_shell <br/>
    /// default: false <br/>
    struct mod_rdp::use_client_provided_alternate_shell {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 26};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// As far as possible, use client-provided remote program (RemoteApp). <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:use_client_provided_remoteapp <br/>
    /// displayName: Use client provided RemoteApp <br/>
    /// default: false <br/>
    struct mod_rdp::use_client_provided_remoteapp {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 27};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// As far as possible, use native RemoteApp capability. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:use_native_remoteapp_capability <br/>
    /// displayName: Use native RemoteApp capability <br/>
    /// default: true <br/>
    struct mod_rdp::use_native_remoteapp_capability {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 28};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_EXE_OR_FILE <br/>
    struct mod_rdp::application_driver_exe_or_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_EXE_OR_FILE };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_SCRIPT_ARGUMENT <br/>
    struct mod_rdp::application_driver_script_argument {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_SCRIPT_ARGUMENT };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_CHROME_DT_SCRIPT <br/>
    struct mod_rdp::application_driver_chrome_dt_script {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_CHROME_DT_SCRIPT };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_CHROME_UIA_SCRIPT <br/>
    struct mod_rdp::application_driver_chrome_uia_script {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_CHROME_UIA_SCRIPT };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_FIREFOX_UIA_SCRIPT <br/>
    struct mod_rdp::application_driver_firefox_uia_script {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_FIREFOX_UIA_SCRIPT };
    };
    /// type: char[256+1] <br/>
    /// default: REDEMPTION_CONFIG_APPLICATION_DRIVER_IE_SCRIPT <br/>
    struct mod_rdp::application_driver_ie_script {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[256+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_APPLICATION_DRIVER_IE_SCRIPT };
    };
    /// Do not transmit the client machine name to the RDP server. <br/>
    /// If Per-Device licensing mode is configured on the RD host, this Bastion will consume a CAL for all of these connections to the RD host. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct mod_rdp::hide_client_name {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Stores CALs issued by the terminal servers. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::use_license_store {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Workaround option to support partial clipboard initialization performed by some versions of FreeRDP. <br/>
    /// type: bool <br/>
    /// displayName: Bogus FreeRDP clipboard <br/>
    /// default: false <br/>
    struct mod_rdp::bogus_freerdp_clipboard {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Workaround option to disable shared disk for RDP client on iOS platform only. <br/>
    /// type: bool <br/>
    /// displayName: Bogus iOS RDPDR virtual channel <br/>
    /// default: true <br/>
    struct mod_rdp::bogus_ios_rdpdr_virtual_channel {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Workaround option to fix some drawing issues with Windows Server 2012. <br/>
    /// Can be disabled when none of the targets are Windows Server 2012. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::bogus_refresh_rect {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Adds RDPDR channel metadata to session logs. Disabling this option makes shared disks more responsive, but metadata will no longer be collected.if at least one authorization of RDPDR is missing (Printer, ComPort, SmartCard, Drive), then this option is considered enabled. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_rdpdr_data_analysis <br/>
    /// displayName: Enable RDPDR data analysis <br/>
    /// default: true <br/>
    struct mod_rdp::enable_rdpdr_data_analysis {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 29};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Delay before automatically bypassing Windows's Legal Notice screen in RemoteApp mode. <br/>
    /// Set to 0 to disable this feature. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// displayName: RemoteApp bypass legal notice delay <br/>
    /// default: 0 <br/>
    struct mod_rdp::remoteapp_bypass_legal_notice_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value {  };
    };
    /// Time limit to automatically bypass Windows's Legal Notice screen in RemoteApp mode. <br/>
    /// Set to 0 to disable this feature. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// displayName: RemoteApp bypass legal notice timeout <br/>
    /// default: 20000 <br/>
    struct mod_rdp::remoteapp_bypass_legal_notice_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 20000 };
    };
    /// Some events such as 'Preferred DropEffect' have no particular meaning. This option allows you to exclude these types of events from the logs. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::log_only_relevant_clipboard_activities {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Force splitting target domain and username with '@' separator. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct mod_rdp::split_domain {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Actives conversion of RemoteApp target session to desktop session. <br/>
    /// Otherwise, Alternate Shell will be used. <br/>
    /// Some Windows Shell features may be unavailable in one or both cases, and applications using them may behave differently. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:wabam_uses_translated_remoteapp <br/>
    /// displayName: Enable translated RemoteApp with AM <br/>
    /// default: false <br/>
    struct mod_rdp::wabam_uses_translated_remoteapp {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 30};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enables Session Shadowing Support. <br/>
    /// Session probe must be enabled on target connection policy. <br/>
    /// Target server must support "Remote Desktop Shadowing" feature. <br/>
    /// When enabled, users can share their RDP sessions with auditors who request it. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct mod_rdp::session_shadowing_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Enables support of the RemoteFX codec on target connection. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_remotefx <br/>
    /// displayName: Enable RemoteFX <br/>
    /// default: false <br/>
    struct mod_rdp::enable_remotefx {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 31};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Connect to the target server in Restricted Admin mode. <br/>
    /// This mode must be supported by the target server (available from Windows Server 2012 R2), otherwise, connection will fail. <br/>
    /// NLA must be enabled. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_restricted_admin_mode <br/>
    /// default: false <br/>
    struct mod_rdp::enable_restricted_admin_mode {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 32};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// NLA will be disabled. <br/>
    /// Target must be set for interactive login, otherwise the  connection may not be guaranteed. <br/>
    /// Smartcard device must be available on client desktop. <br/>
    /// Smartcard redirection (Proxy option RDP_SMARTCARD) must be enabled on service. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:force_smartcard_authentication <br/>
    /// default: false <br/>
    struct mod_rdp::force_smartcard_authentication {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 33};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable target connection on IPv6 <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:enable_ipv6 <br/>
    /// displayName: Enable IPv6 <br/>
    /// default: true <br/>
    struct mod_rdp::enable_ipv6 {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 34};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Console mode management for targets on Windows Server 2003 (requested with /console or /admin mstsc option). <br/>
    /// type: RdpModeConsole <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:mode_console <br/>
    /// displayName: Console mode <br/>
    /// default: RdpModeConsole::allow <br/>
    struct mod_rdp::mode_console {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 35};
        using type = RdpModeConsole;
        using mapped_type = std::string;
        type value { RdpModeConsole::allow };
    };
    /// Allows the proxy to automatically reconnect to secondary target when a network error occurs. <br/>
    /// The target server must support reconnection cookie. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:auto_reconnection_on_losing_target_link <br/>
    /// default: false <br/>
    struct mod_rdp::auto_reconnection_on_losing_target_link {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 36};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If the feature is enabled, the end user can trigger a session disconnection/reconnection with the shortcut Ctrl+F12. <br/>
    /// This feature should not be used together with the [session_probe]end_disconnected_session. <br/>
    /// The keyboard shortcut is fixed and cannot be changed. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:allow_session_reconnection_by_shortcut <br/>
    /// default: false <br/>
    struct mod_rdp::allow_session_reconnection_by_shortcut {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 37};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// The delay between a session disconnection and the automatic reconnection that follows. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:session_reconnection_delay <br/>
    /// default: 0 <br/>
    struct mod_rdp::session_reconnection_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 38};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 15000>;
        type value { 0 };
    };
    /// Forward the build number advertised by the client to the target server. If forwarding is disabled a default (static) build number will be sent to the target server. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:forward_client_build_number <br/>
    /// default: true <br/>
    struct mod_rdp::forward_client_build_number {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 39};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// To resolve the session freeze issue with Windows 7/Windows Server 2008 target. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:bogus_monitor_layout_treatment <br/>
    /// default: false <br/>
    struct mod_rdp::bogus_monitor_layout_treatment {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 40};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Effective username to be used for armoring Kerberos tickets. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct mod_rdp::effective_krb_armoring_user {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 41};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Effective password to be used for armoring Kerberos tickets. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct mod_rdp::effective_krb_armoring_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 42};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Delay before showing disconnect message after the last RemoteApp window is closed. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:remote_programs_disconnect_message_delay <br/>
    /// default: 3000 <br/>
    struct mod_rdp::remote_programs_disconnect_message_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 43};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 3000, 120000>;
        type value { 3000 };
    };
    /// This option only has an effect in RemoteApp sessions (RDS meaning). <br/>
    /// If enabled, the RDP Proxy relies on the Session Probe to launch the remote programs. <br/>
    /// Otherwise, remote programs will be launched according to Remote Programs Virtual Channel Extension of Remote Desktop Protocol. This latter is the native method. <br/>
    /// The difference is that Session Probe does not start a new application when its host session is resumed. Conversely, launching applications according to Remote Programs Virtual Channel Extension of Remote Desktop Protocol is not affected by this behavior. However, launching applications via the native method requires them to be published in Remote Desktop Services, which is unnecessary if launched by the Session Probe. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:use_session_probe_to_launch_remote_program <br/>
    /// displayName: Use Session Probe to launch remote program <br/>
    /// default: true <br/>
    struct mod_rdp::use_session_probe_to_launch_remote_program {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 44};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Replace an empty mouse pointer with normal pointer. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:replace_null_pointer_by_default_pointer <br/>
    /// default: false <br/>
    struct mod_rdp::replace_null_pointer_by_default_pointer {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 45};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable Windows XP clipboard support. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:windows_xp_clipboard_support <br/>
    /// default: false <br/>
    struct mod_rdp::windows_xp_clipboard_support {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 46};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Block user input in the session during the execution of Application Driver. Do not activate this option if the application session does not use Application Driver. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_rdp:block_user_input_until_appdriver_completes <br/>
    /// displayName: Block user input until Application Driver completes <br/>
    /// default: false <br/>
    struct mod_rdp::block_user_input_until_appdriver_completes {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section5 + 47};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };

    /// type: RdpSaveSessionInfoPDU <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: protocol:save_session_info_pdu <br/>
    /// default: RdpSaveSessionInfoPDU::UnsupportedOrUnknown <br/>
    struct protocol::save_session_info_pdu {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section6 + 0};
        using type = RdpSaveSessionInfoPDU;
        using mapped_type = RdpSaveSessionInfoPDU;
        type value { RdpSaveSessionInfoPDU::UnsupportedOrUnknown };
    };

    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_session_probe <br/>
    /// displayName: Enable Session Probe <br/>
    /// default: false <br/>
    struct session_probe::enable_session_probe {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: char[511+1] <br/>
    /// default: "||CMD" <br/>
    struct session_probe::exe_or_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[511+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { "||CMD" };
    };
    /// type: char[511+1] <br/>
    /// default: REDEMPTION_CONFIG_SESSION_PROBE_ARGUMENTS <br/>
    struct session_probe::arguments {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = char[511+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value { REDEMPTION_CONFIG_SESSION_PROBE_ARGUMENTS };
    };
    /// This parameter only has an effect in Desktop sessions. <br/>
    /// It allows you to choose between Smart launcher and Legacy launcher to launch the Session Probe. <br/>
    /// The Smart launcher and the Legacy launcher do not have the same technical prerequisites. Detailed information can be found in the Administration guide. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:use_smart_launcher <br/>
    /// default: true <br/>
    struct session_probe::use_smart_launcher {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 1};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This parameter enables or disables the Session Probe’s launch mask. <br/>
    /// The Launch mask hides the Session Probe launch steps from the end-users. <br/>
    /// Disabling the mask makes it easier to diagnose Session Probe launch issues. It is recommended to enable the mask for normal operation. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_launch_mask <br/>
    /// default: true <br/>
    struct session_probe::enable_launch_mask {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 2};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// It is recommended to use option 1 (disconnect user). <br/>
    /// type: SessionProbeOnLaunchFailure <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:on_launch_failure <br/>
    /// default: SessionProbeOnLaunchFailure::disconnect_user <br/>
    struct session_probe::on_launch_failure {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 3};
        using type = SessionProbeOnLaunchFailure;
        using mapped_type = SessionProbeOnLaunchFailure;
        type value { SessionProbeOnLaunchFailure::disconnect_user };
    };
    /// This parameter is used if [session_probe]on_launch_failure is 1 (disconnect user). <br/>
    /// 0 to disable timeout. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:launch_timeout <br/>
    /// default: 40000 <br/>
    struct session_probe::launch_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 4};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>;
        type value { 40000 };
    };
    /// This parameter is used if [session_probe]on_launch_failure is 0 (ignore failure and continue) or 2 (retry without Session Probe). <br/>
    /// 0 to disable timeout. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:launch_fallback_timeout <br/>
    /// default: 40000 <br/>
    struct session_probe::launch_fallback_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 5};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>;
        type value { 40000 };
    };
    /// If enabled, the [session_probe]launch_timeout countdown timer will be started only after user logged in Windows. Otherwise, the countdown timer will be started immediately after RDP protocol connexion. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:start_launch_timeout_timer_only_after_logon <br/>
    /// default: true <br/>
    struct session_probe::start_launch_timeout_timer_only_after_logon {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 6};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// The amount of time that RDP Proxy waits for a reply from the Session Probe to the KeepAlive message before adopting the behavior defined by [session_probe]on_keepalive_timeout. <br/>
    /// If our local network is subject to congestion, or if the Windows lacks responsiveness, it is possible to increase the value of the timeout to minimize disturbances related to the behavior defined by [session_probe]on_keepalive_timeout. <br/>
    /// The KeepAlive message is used to detect Session Probe unavailability. Without Session Probe, session monitoring will be minimal. No metadata will be collected. <br/>
    /// During the delay between sending a KeepAlive request and receiving the corresponding reply, Session Probe availability is indeterminate. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:keepalive_timeout <br/>
    /// default: 5000 <br/>
    struct session_probe::keepalive_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 7};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>;
        type value { 5000 };
    };
    /// This parameter allows us to choose the behavior of the RDP Proxy in case of losing the connection with Session Probe. <br/>
    /// type: SessionProbeOnKeepaliveTimeout <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:on_keepalive_timeout <br/>
    /// default: SessionProbeOnKeepaliveTimeout::freeze_connection_and_wait <br/>
    struct session_probe::on_keepalive_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 8};
        using type = SessionProbeOnKeepaliveTimeout;
        using mapped_type = SessionProbeOnKeepaliveTimeout;
        type value { SessionProbeOnKeepaliveTimeout::freeze_connection_and_wait };
    };
    /// The behavior of this parameter is different between the Desktop session and the RemoteApp session (RDS meaning). But in each case, the purpose of enabling this parameter is to not leave disconnected sessions in a state unusable by the RDP proxy. <br/>
    /// If enabled, Session Probe will automatically end the disconnected Desktop session. Otherwise, the RDP session and the applications it contains will remain active after user disconnection (unless a parameter defined at the RDS-level decides otherwise). <br/>
    /// The parameter in RemoteApp session (RDS meaning) does not cause the latter to be closed but a simple cleanup. However, this makes the session suitable for reuse. <br/>
    /// This parameter must be enabled for Web applications because an existing session with a running browser cannot be reused. <br/>
    /// It is also recommended to enable this parameter for connections in RemoteApp mode (RDS meaning) when [mod_rdp]use_session_probe_to_launch_remote_program is enabled. Because an existing Session Probe does not launch a startup program (a new Bastion application) when the RemoteApp session resumes. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:end_disconnected_session <br/>
    /// default: false <br/>
    struct session_probe::end_disconnected_session {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 9};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If enabled, disconnected auto-deployed Application Driver session will automatically terminate by Session Probe. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_autodeployed_appdriver_affinity <br/>
    /// displayName: Enable autodeployed Application Driver affinity <br/>
    /// default: true <br/>
    struct session_probe::enable_autodeployed_appdriver_affinity {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 10};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This parameter allows you to enable the Windows-side logging of Session Probe. <br/>
    /// The generated files are located in the Windows user's temporary directory. These files can only be analyzed by the WALLIX team. <br/>
    /// This log does not help diagnose a launch problem. For this, you should instead use the debugging settings in the Configuration options. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_log <br/>
    /// default: false <br/>
    struct session_probe::enable_log {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 11};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// This parameter enables or disables the Log files rotation for Windows-side logging of Session Probe. <br/>
    /// The Log files rotation helps reduce disk space consumption caused by logging. But the interesting information may be lost if the corresponding file is not retrieved in time. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_log_rotation <br/>
    /// default: false <br/>
    struct session_probe::enable_log_rotation {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 12};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Defines logging severity levels. <br/>
    /// type: SessionProbeLogLevel <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:log_level <br/>
    /// default: SessionProbeLogLevel::Debug <br/>
    struct session_probe::log_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 13};
        using type = SessionProbeLogLevel;
        using mapped_type = SessionProbeLogLevel;
        type value { SessionProbeLogLevel::Debug };
    };
    /// (Deprecated!) <br/>
    /// The period above which the disconnected Application session will be automatically closed by the Session Probe. <br/>
    /// 0 to disable timeout. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:disconnected_application_limit <br/>
    /// default: 0 <br/>
    struct session_probe::disconnected_application_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 14};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>;
        type value {  };
    };
    /// The period above which the disconnected Desktop session will be automatically closed by the Session Probe. <br/>
    /// 0 to disable timeout. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:disconnected_session_limit <br/>
    /// default: 0 <br/>
    struct session_probe::disconnected_session_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 15};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>;
        type value {  };
    };
    /// The period of user inactivity above which the session will be locked by the Session Probe. <br/>
    /// 0 to disable timeout. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:idle_session_limit <br/>
    /// default: 0 <br/>
    struct session_probe::idle_session_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 16};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 172800000>;
        type value {  };
    };
    /// The additional period given to the device to make Clipboard redirection available. <br/>
    /// This parameter is effective only if [session_probe]use_smart_launcher is enabled. <br/>
    /// If we see the message "Clipboard Virtual Channel is unavailable" in the Bastion’s syslog and we are sure that this virtual channel is allowed on the device (confirmed by a direct connection test for example), we probably need to use this parameter. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:smart_launcher_clipboard_initialization_delay <br/>
    /// default: 2000 <br/>
    struct session_probe::smart_launcher_clipboard_initialization_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 17};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 2000 };
    };
    /// For under-performing devices. <br/>
    /// The extra time given to the device before starting the Session Probe launch sequence. <br/>
    /// This parameter is effective only if [session_probe]use_smart_launcher is enabled. <br/>
    /// This parameter can be useful when (with Launch mask disabled) Windows Explorer is not immediately visible when the RDP session is opened. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:smart_launcher_start_delay <br/>
    /// default: 0 <br/>
    struct session_probe::smart_launcher_start_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 18};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value {  };
    };
    /// The delay between two simulated keystrokes during the Session Probe launch sequence execution. <br/>
    /// This parameter is effective only if [session_probe]use_smart_launcher is enabled. <br/>
    /// This parameter may help if the Session Probe launch failure is caused by network slowness or device under-performance. <br/>
    /// This parameter is usually used together with the [session_probe]smart_launcher_short_delay. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:smart_launcher_long_delay <br/>
    /// default: 500 <br/>
    struct session_probe::smart_launcher_long_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 19};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 500 };
    };
    /// The delay between two steps of the same simulated keystrokes during the Session Probe launch sequence execution. <br/>
    /// This parameter is effective only if [session_probe]use_smart_launcher is enabled. <br/>
    /// This parameter may help if the Session Probe launch failure is caused by network slowness or device under-performance. <br/>
    /// This parameter is usually used together with the [session_probe]smart_launcher_long_delay. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:smart_launcher_short_delay <br/>
    /// default: 50 <br/>
    struct session_probe::smart_launcher_short_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 20};
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 50 };
    };
    /// Allow sufficient time for the RDP client (Access Manager) to respond to the Clipboard virtual channel initialization message. Otherwise, the time granted to the RDP client (Access Manager or another) for Clipboard virtual channel initialization will be defined by the [session_probe]smart_launcher_clipboard_initialization_delay. <br/>
    /// This parameter is effective only if [session_probe]use_smart_launcher is enabled and the RDP client is Access Manager. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:smart_launcher_enable_wabam_affinity <br/>
    /// displayName: Enable Smart launcher with AM affinity <br/>
    /// default: true <br/>
    struct session_probe::smart_launcher_enable_wabam_affinity {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 21};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// The time interval between the detection of an error (example: a refusal by the target of the redirected drive) and the actual abandonment of the Session Probe launch. <br/>
    /// The purpose of this parameter is to give the target time to gracefully stop some ongoing processing. <br/>
    /// It is strongly recommended to keep the default value of this parameter. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:launcher_abort_delay <br/>
    /// default: 2000 <br/>
    struct session_probe::launcher_abort_delay {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 22};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 300000>;
        type value { 2000 };
    };
    /// This parameter enables or disables the crash dump generation when the Session Probe encounters a fatal error. <br/>
    /// The crash dump file is useful for post-modem debugging. It is not designed for normal use. <br/>
    /// The generated files are located in the Windows user's temporary directory. These files can only be analyzed by the WALLIX team. <br/>
    /// There is no rotation mechanism to limit the number of dump files produced. Extended activation of this parameter can quickly exhaust disk space. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_crash_dump <br/>
    /// default: false <br/>
    struct session_probe::enable_crash_dump {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 23};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Use only if you see unusually high consumption of system object handles by the Session Probe. <br/>
    /// The Session Probe will sabotage and then restart it-self if it consumes more handles than what is defined by this parameter. <br/>
    /// A value of 0 disables this feature. <br/>
    /// This feature can cause the session to be disconnected if the value of the [session_probe]on_keepalive_timeout is set to 1 (Disconnect user). <br/>
    /// If [session_probe]allow_multiple_handshake is disabled, restarting the Session Probe will cause the session to disconnect. <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:handle_usage_limit <br/>
    /// default: 0 <br/>
    struct session_probe::handle_usage_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 24};
        using type = uint32_t;
        using mapped_type = ::configs::spec_types::range<uint32_t, 0, 1000>;
        type value { 0 };
    };
    /// Use only if you see unusually high consumption of memory by the Session Probe. <br/>
    /// The Session Probe will sabotage and then restart it-self if it consumes more memory than what is defined by this parameter. <br/>
    /// A value of 0 disables this feature. <br/>
    /// This feature can cause the session to be disconnected if the value of the [session_probe]on_keepalive_timeout is set to 1 (Disconnect user). <br/>
    /// If [session_probe]allow_multiple_handshake is disabled, restarting the Session Probe will cause the session to disconnect. <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:memory_usage_limit <br/>
    /// default: 0 <br/>
    struct session_probe::memory_usage_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 25};
        using type = uint32_t;
        using mapped_type = ::configs::spec_types::range<uint32_t, 0, 200000000>;
        type value { 0 };
    };
    /// This debugging feature was created to determine the cause of high CPU consumption by Session Probe in certain environments. <br/>
    /// As a percentage, the effective alarm threshold is calculated in relation to the reference consumption determined at the start of the program execution. The alarm is deactivated if this value of parameter is less than 200 (200% of reference consumption). <br/>
    /// When CPU consumption exceeds the allowed limit, debugging information can be collected (if the Windows-side logging is enabled), then Session Probe will sabotage. Additional behavior is defined by [session_probe]cpu_usage_alarm_action. <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:cpu_usage_alarm_threshold <br/>
    /// displayName: CPU usage alarm threshold <br/>
    /// default: 0 <br/>
    struct session_probe::cpu_usage_alarm_threshold {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 26};
        using type = uint32_t;
        using mapped_type = ::configs::spec_types::range<uint32_t, 0, 10000>;
        type value { 0 };
    };
    /// Additional behavior when CPU consumption exceeds what is allowed. Refer to the [session_probe]cpu_usage_alarm_threshold. <br/>
    /// type: SessionProbeCPUUsageAlarmAction <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:cpu_usage_alarm_action <br/>
    /// displayName: CPU usage alarm action <br/>
    /// default: SessionProbeCPUUsageAlarmAction::Restart <br/>
    struct session_probe::cpu_usage_alarm_action {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 27};
        using type = SessionProbeCPUUsageAlarmAction;
        using mapped_type = SessionProbeCPUUsageAlarmAction;
        type value { SessionProbeCPUUsageAlarmAction::Restart };
    };
    /// For application session only. <br/>
    /// The delay between the launch of the application and the start of End of session check. <br/>
    /// Sometimes an application takes a long time to create its window. If the End of session check is start too early, the Session Probe may mistakenly conclude that there is no longer any active process in the session. And without active processes, the application session will be logged off by the Session Probe. <br/>
    /// 'End of session check delay time' allow you to delay the start of End of session check in order to give the application the time to create its window. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:end_of_session_check_delay_time <br/>
    /// default: 0 <br/>
    struct session_probe::end_of_session_check_delay_time {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 28};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 0, 60000>;
        type value {  };
    };
    /// For application session only. <br/>
    /// If enabled, during the End of session check, the processes that do not have a visible window will not be counted as active processes of the session. Without active processes, the application session will be logged off by the Session Probe. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:ignore_ui_less_processes_during_end_of_session_check <br/>
    /// displayName: Ignore UI less processes during end of session check <br/>
    /// default: true <br/>
    struct session_probe::ignore_ui_less_processes_during_end_of_session_check {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 29};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This parameter is used to provide the list of (comma-separated) system processes that can be run in the session. <br/>
    /// Ex.: dllhos.exe,TSTheme.exe <br/>
    /// Unlike user processes, system processes do not keep the session open. A session with no user process will be automatically closed by Session Probe after starting the End of session check. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:extra_system_processes <br/>
    /// default: "" <br/>
    struct session_probe::extra_system_processes {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 30};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// This parameter concerns the functionality of the Password field detection performed by the Session Probe. This detection is necessary to avoid logging the text entered in the password fields as metadata of session (also known as Session log). <br/>
    /// Unfortunately, the detection does not work with applications developed in Java, Flash, etc. In order to work around the problem, we will treat the windows of these applications as input fields of unknown type. Therefore, the text entered in these will not be included in the session’s metadata. <br/>
    /// One of the specifics of these applications is that their main windows do not have any child window from point of view of WIN32 API. Activating this parameter allows this property to be used to detect applications developed in Java or Flash. <br/>
    /// Refer to the [session_log]keyboard_input_masking_level. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:childless_window_as_unidentified_input_field <br/>
    /// default: true <br/>
    struct session_probe::childless_window_as_unidentified_input_field {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 31};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Comma-separated process names. (Ex.: chrome.exe,ngf.exe) <br/>
    /// This parameter concerns the functionality of the Password field detection performed by the Session Probe. This detection is necessary to avoid logging the text entered in the password fields as metadata of session (also known as Session log). <br/>
    /// Unfortunately, the detection is not infallible. In order to work around the problem, we will treat the windows of these applications as input fields of unknown type. Therefore, the text entered in these will not be included in the session’s metadata. <br/>
    /// This parameter is used to provide the list of processes whose windows are considered as input fields of unknown type. <br/>
    /// Refer to the [session_log]keyboard_input_masking_level. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:windows_of_these_applications_as_unidentified_input_field <br/>
    /// default: "" <br/>
    struct session_probe::windows_of_these_applications_as_unidentified_input_field {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 32};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// This parameter is used when resuming a session hosting a existing Session Probe. <br/>
    /// If enabled, the Session Probe will activate or deactivate features according to the value of [session_probe]disabled_features received when resuming its host session. Otherwise, the Session Probe will keep the same set of features that were used during the previous connection. <br/>
    /// It is recommended to keep the default value of this parameter. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:update_disabled_features <br/>
    /// default: true <br/>
    struct session_probe::update_disabled_features {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 33};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// This parameter was created to work around some compatibility issues and to limit the CPU load that the Session Probe process causes. <br/>
    /// If 'Java Acccess Bridge' feature is disabled, data entered in the password field of Java applications may be visible in the metadata. <br/>
    /// For more information, refer to [session_log]keyboard_input_masking_level. <br/>
    /// For more information, also refer to [session_probe]childless_window_as_unidentified_input_field and [session_probe]windows_of_these_applications_as_unidentified_input_field.It is not recommended to deactivate 'MS Active Accessibility' and 'MS UI Automation' at the same time. This configuration will lead to the loss of detection of password input fields. Entries in these fields will be visible as plain text in the session metadata. <br/>
    /// type: SessionProbeDisabledFeature <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:disabled_features <br/>
    /// default: SessionProbeDisabledFeature{352} <br/>
    struct session_probe::disabled_features {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 34};
        using type = SessionProbeDisabledFeature;
        using mapped_type = SessionProbeDisabledFeature;
        type value { SessionProbeDisabledFeature{352} };
    };
    /// This parameter has no effect on the device without BestSafe. <br/>
    /// Is enabled, Session Probe relies on BestSafe to perform the detection of application launches and the detection of outgoing connections. <br/>
    /// BestSafe has more efficient mechanisms in these tasks than Session Probe. <br/>
    /// For more information, refer to [session_probe]outbound_connection_monitoring_rules and [session_probe]process_monitoring_rules. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:enable_bestsafe_interaction <br/>
    /// displayName: Enable BestSafe interaction <br/>
    /// default: false <br/>
    struct session_probe::enable_bestsafe_interaction {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 35};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// This parameter has no effect on the device without BestSafe. <br/>
    /// BestSafe interaction must be enabled. Refer to [session_probe]enable_bestsafe_interaction. <br/>
    /// This parameter allows you to choose the behavior of the RDP Proxy in case of detection of Windows account manipulation. <br/>
    /// Detectable account manipulations are the creation, deletion of a Windows account, and the addition and deletion of an account from a Windows user group. <br/>
    /// type: SessionProbeOnAccountManipulation <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:on_account_manipulation <br/>
    /// default: SessionProbeOnAccountManipulation::allow <br/>
    struct session_probe::on_account_manipulation {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 36};
        using type = SessionProbeOnAccountManipulation;
        using mapped_type = SessionProbeOnAccountManipulation;
        type value { SessionProbeOnAccountManipulation::allow };
    };
    /// This parameter is used to indicate the name of an environment variable, to be set on the Windows device, and pointed to a directory (on the device) that can be used to store and start the Session Probe. The environment variable must be available in the Windows user session. <br/>
    /// The environment variable name is limited to 3 characters or less. <br/>
    /// By default, the Session Probe will be stored and started from the temporary directory of Windows user. <br/>
    /// This parameter is useful if a GPO prevents Session Probe from starting from the Windows user's temporary directory. <br/>
    /// type: char[3+1] <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:alternate_directory_environment_variable <br/>
    /// default: "" <br/>
    struct session_probe::alternate_directory_environment_variable {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 37};
        using type = char[3+1];
        using mapped_type = ::configs::spec_types::fixed_string;
        type value {  };
    };
    /// If enabled, the session, once disconnected, can be resumed by another Bastion user. <br/>
    /// Except in special cases, this is usually a security problem. <br/>
    /// By default, a session can only be resumed by the Bastion user who created it. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:public_session <br/>
    /// default: false <br/>
    struct session_probe::public_session {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 38};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// This parameter is used to provide the list of (comma-separated) rules used to monitor outgoing connections created in the session. <br/>
    /// (Ex. IPv4 addresses: $deny:192.168.0.0/24:5900,$allow:192.168.0.110:21) <br/>
    /// (Ex. IPv6 addresses: $deny:2001:0db8:85a3:0000:0000:8a2e:0370:7334:3389,$allow:[20D1:0:3238:DFE1:63::FEFB]:21) <br/>
    /// (Ex. hostname can be used to resolve to both IPv4 and IPv6 addresses: $allow:host.domain.net:3389) <br/>
    /// (Ex. for backwards compatibility only: 10.1.0.0/16:22) <br/>
    /// A global rule that matches all IP addresses/Ports such as "0.0.0.0/0:*" is highly unrecommended. <br/>
    /// Session Probe must be enabled to use this feature. <br/>
    /// BestSafe can be used to perform detection of outgoing connections created in the session. Refer to [session_probe]enable_bestsafe_interaction. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:outbound_connection_monitoring_rules <br/>
    /// default: "" <br/>
    struct session_probe::outbound_connection_monitoring_rules {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 39};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// This parameter is used to provide the list of (comma-separated) rules used to monitor the execution of processes in the session. <br/>
    /// (Ex.: $deny:taskmgr.exe) <br/>
    /// @ = All child processes of (Bastion) application (Ex.: $deny:@) <br/>
    /// BestSafe can be used to perform detection of process launched in the session. Refer to [session_probe]enable_bestsafe_interaction. <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:process_monitoring_rules <br/>
    /// default: "" <br/>
    struct session_probe::process_monitoring_rules {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 40};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// If enabled, a string of random characters will be added to the name of the Session Probe executable. <br/>
    /// The result could be: SesProbe-5420.exe <br/>
    /// Some other features automatically enable customization of the Session Probe executable name. Application Driver auto-deployment for example. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct session_probe::customize_executable_name {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If enabled, the RDP Proxy accepts to perform the handshake several times during the same RDP session. Otherwise, any new handshake attempt will interrupt the current session with the display of an alert message. <br/>
    /// type: bool <br/>
    /// displayName: Allow multiple handshakes <br/>
    /// default: false <br/>
    struct session_probe::allow_multiple_handshake {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If disabled, the RDP proxy disconnects from the session when the Session Probe reports that the session is about to close (old behavior). <br/>
    /// The new session end procedure (freeze and wait) prevents another connection from resuming a session that is close to end-of-life. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct session_probe::at_end_of_session_freeze_connection_and_wait {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: bool <br/>
    /// default: true <br/>
    struct session_probe::enable_cleaner {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: bool <br/>
    /// default: true <br/>
    struct session_probe::clipboard_based_launcher_reset_keyboard_status {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: SessionProbeProcessCommandLineRetrieveMethod <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:process_command_line_retrieve_method <br/>
    /// default: SessionProbeProcessCommandLineRetrieveMethod::both <br/>
    struct session_probe::process_command_line_retrieve_method {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 41};
        using type = SessionProbeProcessCommandLineRetrieveMethod;
        using mapped_type = SessionProbeProcessCommandLineRetrieveMethod;
        type value { SessionProbeProcessCommandLineRetrieveMethod::both };
    };
    /// Time between two polling performed by Session Probe. <br/>
    /// The parameter is created to adapt the CPU consumption to the performance of the Windows device. <br/>
    /// The longer this interval, the less detailed the session metadata collection and the lower the CPU consumption. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:periodic_task_run_interval <br/>
    /// default: 500 <br/>
    struct session_probe::periodic_task_run_interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 42};
        using type = std::chrono::milliseconds;
        using mapped_type = ::configs::spec_types::range<std::chrono::milliseconds, 300, 2000>;
        type value { 500 };
    };
    /// If enabled, Session Probe activity will be minimized when the user is disconnected from the session. No metadata will be collected during this time. <br/>
    /// The purpose of this behavior is to optimize CPU consumption. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:pause_if_session_is_disconnected <br/>
    /// default: false <br/>
    struct session_probe::pause_if_session_is_disconnected {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 43};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// If enabled, Session Probe will monitor its own system resource consumption. <br/>
    /// This feature increases CPU consumption. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_probe:monitor_own_resources_consumption <br/>
    /// default: false <br/>
    struct session_probe::monitor_own_resources_consumption {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section7 + 44};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };

    /// Keep known target server certificates on Bastion <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_cert_store <br/>
    /// default: true <br/>
    struct server_cert::server_cert_store {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Behavior of certificates check. <br/>
    /// type: ServerCertCheck <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_cert_check <br/>
    /// default: ServerCertCheck::fails_if_no_match_and_succeed_if_no_know <br/>
    struct server_cert::server_cert_check {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 1};
        using type = ServerCertCheck;
        using mapped_type = ServerCertCheck;
        type value { ServerCertCheck::fails_if_no_match_and_succeed_if_no_know };
    };
    /// Warn if check allow connexion to target server. <br/>
    /// type: ServerCertNotification <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_access_allowed_message <br/>
    /// default: ServerCertNotification::nobody <br/>
    struct server_cert::server_access_allowed_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 2};
        using type = ServerCertNotification;
        using mapped_type = ServerCertNotification;
        type value { ServerCertNotification::nobody };
    };
    /// Warn that new target server certificate file was created. <br/>
    /// type: ServerCertNotification <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_cert_create_message <br/>
    /// default: ServerCertNotification::SIEM <br/>
    struct server_cert::server_cert_create_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 3};
        using type = ServerCertNotification;
        using mapped_type = ServerCertNotification;
        type value { ServerCertNotification::SIEM };
    };
    /// Warn that target server certificate file was successfully checked. <br/>
    /// type: ServerCertNotification <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_cert_success_message <br/>
    /// default: ServerCertNotification::nobody <br/>
    struct server_cert::server_cert_success_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 4};
        using type = ServerCertNotification;
        using mapped_type = ServerCertNotification;
        type value { ServerCertNotification::nobody };
    };
    /// Warn that target server certificate file checking failed. <br/>
    /// type: ServerCertNotification <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: server_cert:server_cert_failure_message <br/>
    /// default: ServerCertNotification::SIEM <br/>
    struct server_cert::server_cert_failure_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 5};
        using type = ServerCertNotification;
        using mapped_type = ServerCertNotification;
        type value { ServerCertNotification::SIEM };
    };
    /// Warn that target server certificate check raised some internal error. <br/>
    /// type: ServerCertNotification <br/>
    /// default: ServerCertNotification::SIEM <br/>
    struct server_cert::error_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ServerCertNotification;
        using mapped_type = ServerCertNotification;
        type value { ServerCertNotification::SIEM };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct server_cert::enable_external_validation {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 6};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct server_cert::external_cert {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 7};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// empty string for wait, 'Ok' or error message. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct server_cert::external_response {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section8 + 8};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };

    /// Check this option to enable the clipboard upload (from client to target server). <br/>
    /// This only supports text data clipboard (not files). <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct mod_vnc::clipboard_up {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Check this option to enable the clipboard download (from target server to client). <br/>
    /// This only supports text data clipboard (not files). <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct mod_vnc::clipboard_down {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 1};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Sets additional graphics encoding types that will be negotiated with the VNC target server: <br/>
    ///   2: RRE <br/>
    ///   5: HEXTILE <br/>
    ///   16: ZRLE <br/>
    /// type: std::string <br/>
    /// default: "" <br/>
    struct mod_vnc::encodings {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<int>;
        type value {  };
    };
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:support_cursor_pseudo_encoding <br/>
    /// default: true <br/>
    struct mod_vnc::support_cursor_pseudo_encoding {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 2};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// VNC target server clipboard text data encoding type. <br/>
    /// type: ClipboardEncodingType <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: vnc_server_clipboard_encoding_type <br/>
    /// default: ClipboardEncodingType::latin1 <br/>
    struct mod_vnc::server_clipboard_encoding_type {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 3};
        using type = ClipboardEncodingType;
        using mapped_type = std::string;
        type value { ClipboardEncodingType::latin1 };
    };
    /// The RDP clipboard is based on a token that indicates who owns data between target server and client. However, some RDP clients, such as FreeRDP, always appropriate this token. This conflicts with VNC, which also appropriates this token, causing clipboard data to be sent in loops. <br/>
    /// This option indicates the strategy to adopt in such situations. <br/>
    /// type: VncBogusClipboardInfiniteLoop <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: vnc_bogus_clipboard_infinite_loop <br/>
    /// default: VncBogusClipboardInfiniteLoop::delayed <br/>
    struct mod_vnc::bogus_clipboard_infinite_loop {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 4};
        using type = VncBogusClipboardInfiniteLoop;
        using mapped_type = VncBogusClipboardInfiniteLoop;
        type value { VncBogusClipboardInfiniteLoop::delayed };
    };
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:server_is_macos <br/>
    /// displayName: Server is MacOS <br/>
    /// default: false <br/>
    struct mod_vnc::server_is_macos {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 5};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// When disabled, Ctrl + Alt becomes AltGr (Windows behavior). <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:server_unix_alt <br/>
    /// displayName: Server Unix alt <br/>
    /// default: false <br/>
    struct mod_vnc::server_unix_alt {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 6};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable target connection on IPv6. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:enable_ipv6 <br/>
    /// displayName: Enable IPv6 <br/>
    /// default: true <br/>
    struct mod_vnc::enable_ipv6 {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 7};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Minimal incoming TLS level 0=TLSv1, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:tls_min_level <br/>
    /// displayName: TLS min level <br/>
    /// default: 2 <br/>
    struct mod_vnc::tls_min_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 8};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 2 };
    };
    /// Maximal incoming TLS level 0=no restriction, 1=TLSv1.1, 2=TLSv1.2, 3=TLSv1.3 <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:tls_max_level <br/>
    /// displayName: TLS max level <br/>
    /// default: 0 <br/>
    struct mod_vnc::tls_max_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 9};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// TLSv1.2 and below additional ciphers supported. <br/>
    /// Empty to apply system-wide configuration (SSL security level 2), ALL for support of all ciphers to ensure highest compatibility with target servers. <br/>
    /// The format used is described on this page: https://www.openssl.org/docs/man3.1/man1/openssl-ciphers.html#CIPHER-LIST-FORMAT <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:cipher_string <br/>
    /// default: "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256" <br/>
    struct mod_vnc::cipher_string {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 10};
        using type = std::string;
        using mapped_type = std::string;
        type value { "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256" };
    };
    /// Allow TLS legacy insecure renegotiation to unpatched target servers. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:tls_enable_legacy_server <br/>
    /// displayName: TLS enable legacy server <br/>
    /// default: false <br/>
    struct mod_vnc::tls_enable_legacy_server {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 11};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Configure the available TLSv1.3 ciphersuites. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in the third paragraph of this page: https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_ciphersuites.html#DESCRIPTION <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:tls_1_3_ciphersuites <br/>
    /// displayName: TLS 1.3 cipher suites <br/>
    /// default: "" <br/>
    struct mod_vnc::tls_1_3_ciphersuites {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 12};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Configure the supported key exchange groups. <br/>
    /// Empty to apply system-wide configuration. <br/>
    /// The format used is described in this page: https://www.openssl.org/docs/man3.2/man3/SSL_CONF_cmd.html#groups-groups <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:tls_key_exchange_groups <br/>
    /// displayName: TLS key exchange groups <br/>
    /// default: "P-256:P-384:P-521:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192" <br/>
    struct mod_vnc::tls_key_exchange_groups {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 13};
        using type = std::string;
        using mapped_type = std::string;
        type value { "P-256:P-384:P-521:ffdhe3072:ffdhe4096:ffdhe6144:ffdhe8192" };
    };
    /// Show in the logs the common cipher list supported by client and target server. <br/>
    /// ⚠ Only for debugging purposes. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:show_common_cipher_list <br/>
    /// default: false <br/>
    struct mod_vnc::show_common_cipher_list {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 14};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// When specified, force the proxy to use a specific authentication method. If this method is not supported by the target server, the connection will not be made. <br/>
    ///   - noauth <br/>
    ///   - vncauth <br/>
    ///   - mslogon <br/>
    ///   - mslogoniiauth <br/>
    ///   - ultravnc_dsm_old <br/>
    ///   - ultravnc_dsm_new <br/>
    ///   - tlsnone <br/>
    ///   - tlsvnc <br/>
    ///   - tlsplain <br/>
    ///   - x509none <br/>
    ///   - x509vnc <br/>
    ///   - x509plain <br/>
    /// type: std::string <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: mod_vnc:force_authentication_method <br/>
    /// default: "" <br/>
    struct mod_vnc::force_authentication_method {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section9 + 15};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };

    /// Saves session logs to a .log file. <br/>
    /// The format is a date followed by one or more key="value" separated by a space on the same line. <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: true <br/>
    struct session_log::enable_session_log_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section10 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Writes session logs to syslog and define its format. <br/>
    /// type: SessionLogFormat <br/>
    /// default: SessionLogFormat::SIEM <br/>
    struct session_log::enable_syslog_format {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = SessionLogFormat;
        using mapped_type = SessionLogFormat;
        type value { SessionLogFormat::SIEM };
    };
    /// Classification of input data is performed using Session Probe. <br/>
    /// Without Session Probe, all the texts entered are considered unidentified. <br/>
    /// type: KeyboardInputMaskingLevel <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: session_log:keyboard_input_masking_level <br/>
    /// default: KeyboardInputMaskingLevel::password_and_unidentified <br/>
    struct session_log::keyboard_input_masking_level {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section10 + 1};
        using type = KeyboardInputMaskingLevel;
        using mapped_type = KeyboardInputMaskingLevel;
        type value { KeyboardInputMaskingLevel::password_and_unidentified };
    };

    /// Selects the OCR (Optical Character Recognition) version used to detect title bars when Session Probe is not running. <br/>
    /// Version 1 is a bit faster, but has a higher failure rate in character recognition. <br/>
    /// type: OcrVersion <br/>
    /// default: OcrVersion::v2 <br/>
    struct ocr::version {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = OcrVersion;
        using mapped_type = OcrVersion;
        type value { OcrVersion::v2 };
    };
    /// type: OcrLocale <br/>
    /// default: OcrLocale::latin <br/>
    struct ocr::locale {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = OcrLocale;
        using mapped_type = std::string;
        type value { OcrLocale::latin };
    };
    /// Time interval between two analyses. <br/>
    /// A value too low will affect session reactivity. <br/>
    /// type: std::chrono::duration&lt;unsigned, std::ratio&lt;1, 100>> <br/>
    /// default: 100 <br/>
    struct ocr::interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        using mapped_type = std::chrono::duration<unsigned, std::ratio<1, 100>>;
        type value { 100 };
    };
    /// Checks shape and color to determine if the text is on a title bar. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct ocr::on_title_bar_only {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Expressed in percentage, <br/>
    ///   0   - all of characters need be recognized <br/>
    ///   100 - accept all results <br/>
    /// type: unsigned <br/>
    /// default: 40 <br/>
    struct ocr::max_unrecog_char_rate {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = unsigned;
        using mapped_type = ::configs::spec_types::range<unsigned, 0, 100>;
        type value { 40 };
    };

    /// Basename without extension. <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct capture::record_filebase {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 0};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Subdirectory of record_path (video section). <br/>
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct capture::record_subdirectory {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 1};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct capture::fdx_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 2};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: hash_path <br/>
    /// default: app_path(AppPath::Hash) <br/>
    struct capture::hash_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 3};
        using type = ::configs::spec_types::directory_path;
        using mapped_type = ::configs::spec_types::directory_path;
        type value { app_path(AppPath::Hash) };
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: record_tmp_path <br/>
    /// default: app_path(AppPath::RecordTmp) <br/>
    struct capture::record_tmp_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 4};
        using type = ::configs::spec_types::directory_path;
        using mapped_type = ::configs::spec_types::directory_path;
        type value { app_path(AppPath::RecordTmp) };
    };
    /// type: ::configs::spec_types::directory_path <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: record_path <br/>
    /// default: app_path(AppPath::Record) <br/>
    struct capture::record_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 5};
        using type = ::configs::spec_types::directory_path;
        using mapped_type = ::configs::spec_types::directory_path;
        type value { app_path(AppPath::Record) };
    };
    /// Specifies the type of data to be captured: <br/>
    /// type: CaptureFlags <br/>
    /// default: CaptureFlags{11} <br/>
    struct capture::capture_flags {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = CaptureFlags;
        using mapped_type = CaptureFlags;
        type value { CaptureFlags{11} };
    };
    /// Disable keyboard log: <br/>
    /// (See also [session_log]keyboard_input_masking_level) <br/>
    /// type: KeyboardLogFlags <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: capture:disable_keyboard_log <br/>
    /// default: KeyboardLogFlags::none <br/>
    struct capture::disable_keyboard_log {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section12 + 6};
        using type = KeyboardLogFlags;
        using mapped_type = KeyboardLogFlags;
        type value { KeyboardLogFlags::none };
    };
    /// Disable clipboard log: <br/>
    /// type: ClipboardLogFlags <br/>
    /// default: ClipboardLogFlags::none <br/>
    struct capture::disable_clipboard_log {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ClipboardLogFlags;
        using mapped_type = ClipboardLogFlags;
        type value { ClipboardLogFlags::none };
    };
    /// Disable (redirected) file system log: <br/>
    /// type: FileSystemLogFlags <br/>
    /// default: FileSystemLogFlags::none <br/>
    struct capture::disable_file_system_log {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = FileSystemLogFlags;
        using mapped_type = FileSystemLogFlags;
        type value { FileSystemLogFlags::none };
    };
    /// Time between two .wrm recording files. <br/>
    /// ⚠ A value that is too small increases the disk space required for recordings. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 600 <br/>
    struct capture::wrm_break_interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 600 };
    };
    /// Color depth for the Session Recording file (.wrm): <br/>
    /// type: ColorDepthSelectionStrategy <br/>
    /// default: ColorDepthSelectionStrategy::depth16 <br/>
    struct capture::wrm_color_depth_selection_strategy {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ColorDepthSelectionStrategy;
        using mapped_type = ColorDepthSelectionStrategy;
        type value { ColorDepthSelectionStrategy::depth16 };
    };
    /// Compression method of the Session Recording file (.wrm): <br/>
    /// type: WrmCompressionAlgorithm <br/>
    /// default: WrmCompressionAlgorithm::gzip <br/>
    struct capture::wrm_compression_algorithm {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = WrmCompressionAlgorithm;
        using mapped_type = WrmCompressionAlgorithm;
        type value { WrmCompressionAlgorithm::gzip };
    };
    /// Allow to control permissions on recorded files. <br/>
    /// type: FilePermissions <br/>
    /// default: 0440 <br/>
    struct capture::file_permissions {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = FilePermissions;
        using mapped_type = FilePermissions;
        type value { 0440 };
    };

    /// Show keyboard input events in the meta file. <br/>
    /// (See also [session_log]keyboard_input_masking_level for RDP and [capture]disable_keyboard_log for VNC and RDP) <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct audit::enable_keyboard_log {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// The maximum time between two videos when no title bar is detected. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 604800 <br/>
    struct audit::video_break_interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 604800 };
    };
    /// Maximum number of images per second for video generation. <br/>
    /// A higher value will produce smoother videos, but the file weight is higher and the generation time longer. <br/>
    /// type: unsigned <br/>
    /// default: 5 <br/>
    struct audit::video_frame_rate {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = unsigned;
        using mapped_type = ::configs::spec_types::range<unsigned, 1, 120>;
        type value { 5 };
    };
    /// In the generated video of the session record traces, remove the top left banner with the timestamp. <br/>
    /// Can slightly speed up the video generation. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct audit::video_notimestamp {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Video codec used for video generation. <br/>
    /// type: std::string <br/>
    /// default: "mp4" <br/>
    struct audit::video_codec {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { "mp4" };
    };
    /// FFmpeg options for video codec. See https://trac.ffmpeg.org/wiki/Encode/H.264 <br/>
    /// ⚠ Some browsers and video decoders don't support crf=0 <br/>
    /// type: std::string <br/>
    /// displayName: FFmpeg options <br/>
    /// default: "crf=35 preset=superfast" <br/>
    struct audit::ffmpeg_options {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { "crf=35 preset=superfast" };
    };
    /// type: SmartVideoCropping <br/>
    /// default: SmartVideoCropping::v2 <br/>
    struct audit::smart_video_cropping {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = SmartVideoCropping;
        using mapped_type = SmartVideoCropping;
        type value { SmartVideoCropping::v2 };
    };
    /// Checking this option will allow to play a video with corrupted Bitmap Update. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct audit::play_video_with_corrupted_bitmap {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Allow to control permissions on video files. <br/>
    /// type: FilePermissions <br/>
    /// default: 0440 <br/>
    struct audit::file_permissions {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = FilePermissions;
        using mapped_type = FilePermissions;
        type value { 0440 };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct audit::rt_display {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Allow real-time view (4 eyes) without session recording enabled in the authorization. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct audit::allow_rt_without_recording {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Frame interval for 4eyes. A value lower than 6 will have no visible effect. <br/>
    /// type: std::chrono::milliseconds <br/>
    /// default: 1000 <br/>
    struct audit::rt_png_interval {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 1000 };
    };
    /// Number of png captures to keep. <br/>
    /// type: unsigned <br/>
    /// default: 5 <br/>
    struct audit::rt_png_limit {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 5 };
    };
    /// type: bool <br/>
    /// displayName: Use Redis <br/>
    /// default: true <br/>
    struct audit::use_redis {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: std::chrono::milliseconds <br/>
    /// displayName: Redis timeout <br/>
    /// default: 500 <br/>
    struct audit::redis_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::milliseconds;
        using mapped_type = std::chrono::milliseconds;
        type value { 500 };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct audit::redis_address {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 1};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct audit::redis_port {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 2};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct audit::redis_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 3};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct audit::redis_db {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 4};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 0 };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct audit::redis_use_tls {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 5};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct audit::redis_tls_cacert {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 6};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct audit::redis_tls_cert {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 7};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct audit::redis_tls_key {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section13 + 8};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };

    /// type: std::string <br/>
    /// default: REDEMPTION_CONFIG_VALIDATOR_PATH <br/>
    struct file_verification::socket_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { REDEMPTION_CONFIG_VALIDATOR_PATH };
    };
    /// Enable use of ICAP service for file verification on upload. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:enable_up <br/>
    /// default: false <br/>
    struct file_verification::enable_up {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 0};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Enable use of ICAP service for file verification on download. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:enable_down <br/>
    /// default: false <br/>
    struct file_verification::enable_down {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 1};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Verify text data via clipboard from the client to the target server. <br/>
    /// File verification on upload must be enabled via the Enable up option. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:clipboard_text_up <br/>
    /// default: false <br/>
    struct file_verification::clipboard_text_up {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 2};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Verify text data via clipboard from the target server to the client <br/>
    /// File verification on download must be enabled via the Enable down option. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:clipboard_text_down <br/>
    /// default: false <br/>
    struct file_verification::clipboard_text_down {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 3};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Block file transfer from the client to the target server on invalid file verification. <br/>
    /// File verification on upload must be enabled via the Enable up option. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:block_invalid_file_up <br/>
    /// default: false <br/>
    struct file_verification::block_invalid_file_up {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 4};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Block file transfer from the target server to the client on invalid file verification. <br/>
    /// File verification on download must be enabled via the Enable down option. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:block_invalid_file_down <br/>
    /// default: false <br/>
    struct file_verification::block_invalid_file_down {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 5};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Block text transfer from the client to the target server on invalid text verification. <br/>
    /// Text verification on upload must be enabled via the Clipboard text up option. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct file_verification::block_invalid_clipboard_text_up {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Block text transfer from the target server to the client on invalid text verification. <br/>
    /// Text verification on download must be enabled via the Clipboard text down option. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct file_verification::block_invalid_clipboard_text_down {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Log the files and clipboard texts that are verified and accepted. By default, only those rejected are logged. <br/>
    /// type: bool <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:log_if_accepted <br/>
    /// default: true <br/>
    struct file_verification::log_if_accepted {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 6};
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// ⚠ This value affects the RAM used by the session. <br/>
    ///  <br/>
    /// If option Block invalid file (up or down) is enabled, automatically reject file with greater filesize. <br/>
    /// (in megabytes) <br/>
    /// type: uint32_t <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_verification:max_file_size_rejected <br/>
    /// default: 256 <br/>
    struct file_verification::max_file_size_rejected {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section14 + 7};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 256 };
    };
    /// Temporary path used when files take up too much memory. <br/>
    /// type: ::configs::spec_types::directory_path <br/>
    /// default: "/tmp/" <br/>
    struct file_verification::tmpdir {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::directory_path;
        using mapped_type = ::configs::spec_types::directory_path;
        type value { "/tmp/" };
    };

    /// Enable storage of transferred files (via RDP Clipboard). <br/>
    /// ⚠ Saving files can take up a lot of disk space. <br/>
    /// type: RdpStoreFile <br/>
    /// connpolicy -> proxy <br/>
    /// aclName: file_storage:store_file <br/>
    /// default: RdpStoreFile::never <br/>
    struct file_storage::store_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section15 + 0};
        using type = RdpStoreFile;
        using mapped_type = std::string;
        type value { RdpStoreFile::never };
    };



    /// type: std::array&lt;unsigned char, 32> <br/>
    /// acl ⇒ proxy <br/>
    /// default: {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, } <br/>
    struct crypto::encryption_key {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section18 + 0};
        using type = std::array<unsigned char, 32>;
        using mapped_type = ::configs::spec_types::fixed_binary;
        type value { {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, } };
    };
    /// type: std::array&lt;unsigned char, 32> <br/>
    /// acl ⇒ proxy <br/>
    /// default: {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, } <br/>
    struct crypto::sign_key {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section18 + 1};
        using type = std::array<unsigned char, 32>;
        using mapped_type = ::configs::spec_types::fixed_binary;
        type value { {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, } };
    };

    /// Enable websocket protocol (ws or wss with use_tls=1). <br/>
    /// type: bool <br/>
    /// displayName: Enable WebSocket <br/>
    /// default: false <br/>
    struct websocket::enable_websocket {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Use TLS with websocket (wss). <br/>
    /// type: bool <br/>
    /// displayName: Use TLS <br/>
    /// default: true <br/>
    struct websocket::use_tls {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// ${addr}:${port} or ${port} or ${unix_socket_path} <br/>
    /// type: std::string <br/>
    /// default: ":3390" <br/>
    struct websocket::listen_address {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { ":3390" };
    };


    /// Proxy session log id <br/>
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::psid {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 0};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// Specifies the maximum color depth for the client connection session: <br/>
    /// type: ColorDepth <br/>
    /// acl ⇐ proxy <br/>
    /// acl::name: bpp <br/>
    /// default: ColorDepth::depth24 <br/>
    struct context::opt_bpp {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 1};
        using type = ColorDepth;
        using mapped_type = ColorDepth;
        type value { ColorDepth::depth24 };
    };
    /// type: uint16_t <br/>
    /// acl ⇐ proxy <br/>
    /// acl::name: height <br/>
    /// default: 600 <br/>
    struct context::opt_height {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 2};
        using type = uint16_t;
        using mapped_type = uint16_t;
        type value { 600 };
    };
    /// type: uint16_t <br/>
    /// acl ⇐ proxy <br/>
    /// acl::name: width <br/>
    /// default: 800 <br/>
    struct context::opt_width {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 3};
        using type = uint16_t;
        using mapped_type = uint16_t;
        type value { 800 };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::selector {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 4};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: unsigned <br/>
    /// acl ⇔ proxy <br/>
    /// default: 1 <br/>
    struct context::selector_current_page {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 5};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 1 };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::selector_device_filter {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 6};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::selector_group_filter {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 7};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::selector_proto_filter {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 8};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::selector_lines_per_page {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 9};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 0 };
    };
    /// type: unsigned <br/>
    /// acl ⇒ proxy <br/>
    /// default: 1 <br/>
    struct context::selector_number_of_pages {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 10};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 1 };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// default: "" <br/>
    struct context::target_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 11};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// default: "" <br/>
    struct context::target_host {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 12};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::tunneling_target_host {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 13};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::target_str {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 14};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::target_service {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 15};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇒ proxy <br/>
    /// default: 3389 <br/>
    struct context::target_port {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 16};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 3389 };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: proto_dest <br/>
    /// default: "RDP" <br/>
    struct context::target_protocol {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 17};
        using type = std::string;
        using mapped_type = std::string;
        type value { "RDP" };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// default: "" <br/>
    struct context::password {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 18};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::reporting {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 19};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_channel_answer {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 20};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::auth_channel_target {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 21};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 22};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::display_link {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 23};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::chrono::seconds <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct context::mod_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 24};
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 0 };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::accept_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 25};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::display_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 26};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::rejected {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 27};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::keepalive {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 28};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::session_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 29};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::chrono::seconds <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: timeclose <br/>
    /// default: 0 <br/>
    struct context::end_date_cnx {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 30};
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::real_target_device {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 31};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::authentication_challenge {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 32};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::ticket {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 33};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::comment {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 34};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::duration {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 35};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::chrono::minutes <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct context::duration_max {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 36};
        using type = std::chrono::minutes;
        using mapped_type = std::chrono::minutes;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::waitinforeturn {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 37};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct context::formflag {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 38};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 0 };
    };
    /// type: ModuleName <br/>
    /// acl ⇔ proxy <br/>
    /// default: ModuleName::login <br/>
    struct context::module {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 39};
        using type = ModuleName;
        using mapped_type = std::string;
        type value { ModuleName::login };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::try_alternate_target {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 40};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::has_more_target {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 41};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::proxy_opt {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 42};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::pattern_kill {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 43};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::pattern_notify {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 44};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::opt_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 45};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::login_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 46};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::disconnect_reason {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 47};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::disconnect_reason_ack {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 48};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// default: "" <br/>
    struct context::ip_target {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = type;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::recording_started {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 49};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: bool <br/>
    /// acl ⇔ proxy <br/>
    /// default: false <br/>
    struct context::rt_ready {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 50};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::sharing_ready {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 51};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 52};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::auth_notify {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 53};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: unsigned <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::auth_notify_rail_exec_flags {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 54};
        using type = unsigned;
        using mapped_type = unsigned;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::auth_notify_rail_exec_exe_or_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 55};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: uint16_t <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct context::auth_command_rail_exec_exec_result {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 56};
        using type = uint16_t;
        using mapped_type = uint16_t;
        type value { 0 };
    };
    /// type: uint16_t <br/>
    /// acl ⇒ proxy <br/>
    /// default: 0 <br/>
    struct context::auth_command_rail_exec_flags {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 57};
        using type = uint16_t;
        using mapped_type = uint16_t;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_original_exe_or_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 58};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_exe_or_file {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 59};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_working_dir {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 60};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_arguments {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 61};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_account {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 62};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::auth_command_rail_exec_password {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 63};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::is_wabam {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 64};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::pm_response {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 65};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::pm_request {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 66};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: uint32_t <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::native_session_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 67};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// type: bool <br/>
    /// acl ⇐ proxy <br/>
    /// default: false <br/>
    struct context::rd_shadow_available {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 68};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// default: "" <br/>
    struct context::rd_shadow_userdata {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 69};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::rd_shadow_type {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 70};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: uint32_t <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::rd_shadow_invitation_error_code {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 71};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::rd_shadow_invitation_error_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 72};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::rd_shadow_invitation_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 73};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::rd_shadow_invitation_addr {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 74};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: uint16_t <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::rd_shadow_invitation_port {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 75};
        using type = uint16_t;
        using mapped_type = uint16_t;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇔ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_userdata {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 76};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// default: false <br/>
    struct context::session_sharing_enable_control {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 77};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// type: std::chrono::seconds <br/>
    /// acl ⇒ proxy <br/>
    /// default: 600 <br/>
    struct context::session_sharing_ttl {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 78};
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 600 };
    };
    /// type: uint32_t <br/>
    /// acl ⇐ proxy <br/>
    /// default: 0 <br/>
    struct context::session_sharing_invitation_error_code {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 79};
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_invitation_error_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 80};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_invitation_id {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 81};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_invitation_addr {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 82};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_target_ip {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 83};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::session_sharing_target_login {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 84};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: bool <br/>
    /// default: false <br/>
    struct context::rail_module_host_mod_is_active {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = type;
        type value { false };
    };
    /// type: std::string <br/>
    /// acl ⇐ proxy <br/>
    /// default: "" <br/>
    struct context::smartcard_login {
        static constexpr unsigned acl_proxy_communication_flags = 0b01;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 85};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// acl ⇒ proxy <br/>
    /// default: "" <br/>
    struct context::banner_message {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 86};
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: BannerType <br/>
    /// acl ⇒ proxy <br/>
    /// default: BannerType::info <br/>
    struct context::banner_type {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section21 + 87};
        using type = BannerType;
        using mapped_type = BannerType;
        type value { BannerType::info };
    };
    /// type: std::vector&lt;uint8_t> <br/>
    /// default:  <br/>
    struct context::redirection_password_or_cookie {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::vector<uint8_t>;
        using mapped_type = type;
        type value {  };
    };

    /// Allow separate target and login entries by enabling the edit target field on the login page. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct internal_mod::enable_target_field {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// List of keyboard layouts available by the internal pages button located at bottom left of some internal pages (login, selector, etc). <br/>
    /// type: std::string <br/>
    /// default: "en-US, fr-FR, de-DE" <br/>
    struct internal_mod::keyboard_layout_proposals {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<std::string>;
        type value { "en-US, fr-FR, de-DE" };
    };
    /// Display the close screen. <br/>
    /// Displays secondary connection errors and closes automatically after the specified [internal_mod]close_box_timeout value or on user request. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct internal_mod::enable_close_box {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// Specifies the time to spend on the close box of the RDP proxy before closing client window. <br/>
    /// ⚠ Value 0 deactivates the timer and the connection remains open until the client disconnects. <br/>
    /// type: std::chrono::seconds <br/>
    /// default: 600 <br/>
    struct internal_mod::close_box_timeout {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::chrono::seconds;
        using mapped_type = std::chrono::seconds;
        type value { 600 };
    };

    /// type: ::configs::spec_types::directory_path <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: replay_path <br/>
    /// default: "/tmp/" <br/>
    struct mod_replay::replay_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section23 + 0};
        using type = ::configs::spec_types::directory_path;
        using mapped_type = ::configs::spec_types::directory_path;
        type value { "/tmp/" };
    };
    /// 0 - Wait for Escape, 1 - End session <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct mod_replay::on_end_of_data {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// 0 - replay once, 1 - loop replay <br/>
    /// type: bool <br/>
    /// acl ⇒ proxy <br/>
    /// acl::name: replay_on_loop <br/>
    /// default: false <br/>
    struct mod_replay::replay_on_loop {
        static constexpr unsigned acl_proxy_communication_flags = 0b10;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section23 + 1};
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };

    /// type: Language <br/>
    /// acl ⇔ proxy <br/>
    /// acl::name: language <br/>
    /// default: Language::en <br/>
    struct translation::language {
        static constexpr unsigned acl_proxy_communication_flags = 0b11;
        // for old cppcheck
        // cppcheck-suppress obsoleteFunctionsindex
        static constexpr ::configs::authid_t index { ::configs::cfg_indexes::section24 + 0};
        using type = Language;
        using mapped_type = std::string;
        type value { Language::en };
    };
    /// The login page shows this language to all users. Once logged in, users see their preferred language. <br/>
    /// type: LoginLanguage <br/>
    /// default: LoginLanguage::Auto <br/>
    struct translation::login_language {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = LoginLanguage;
        using mapped_type = std::string;
        type value { LoginLanguage::Auto };
    };

    /// Enable custom theme color configuration. <br/>
    /// type: bool <br/>
    /// default: false <br/>
    struct theme::enable_theme {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { false };
    };
    /// Logo displayed when theme is enabled. <br/>
    /// type: std::string <br/>
    /// default: REDEMPTION_CONFIG_THEME_LOGO <br/>
    struct theme::logo_path {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value { REDEMPTION_CONFIG_THEME_LOGO };
    };
    /// Background color for window, label and button. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x081F60 <br/>
    struct theme::bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x081F60 };
    };
    /// Foreground color for window, label and button. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFFFF <br/>
    struct theme::fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFFFF };
    };
    /// Separator line color used with some widgets. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xCFD5EB <br/>
    struct theme::separator_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xCFD5EB };
    };
    /// Background color used by buttons when they have focus. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x004D9C <br/>
    struct theme::focus_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x004D9C };
    };
    /// Text color for error messages. For example, an authentication error in the login. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFF00 <br/>
    struct theme::error_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFF00 };
    };
    /// Background color for editing field. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFFFF <br/>
    struct theme::edit_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFFFF };
    };
    /// Foreground color for editing field. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x000000 <br/>
    struct theme::edit_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x000000 };
    };
    /// Outline color for editing field. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x081F60 <br/>
    struct theme::edit_border_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x081F60 };
    };
    /// Outline color for editing field that has focus. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x004D9C <br/>
    struct theme::edit_focus_border_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x004D9C };
    };
    /// Cursor color for editing field. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x888888 <br/>
    struct theme::edit_cursor_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x888888 };
    };
    /// Placeholder text color for editing field with a little resolution. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xA0A0A0 <br/>
    struct theme::edit_placeholder_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xA0A0A0 };
    };
    /// Foreground color for toggle button of password field. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xA0A0A0 <br/>
    struct theme::password_toggle_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xA0A0A0 };
    };
    /// Background color for tooltip. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFF9F <br/>
    struct theme::tooltip_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFF9F };
    };
    /// Foreground color for tooltip. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x000000 <br/>
    struct theme::tooltip_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x000000 };
    };
    /// Border color for tooltip. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x000000 <br/>
    struct theme::tooltip_border_color {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x000000 };
    };
    /// Background color for even rows in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xE9ECF6 <br/>
    struct theme::selector_line1_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xE9ECF6 };
    };
    /// Foreground color for even rows in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x000000 <br/>
    struct theme::selector_line1_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x000000 };
    };
    /// Background color for odd rows in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xCFD5EB <br/>
    struct theme::selector_line2_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xCFD5EB };
    };
    /// Foreground color for odd rows in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x000000 <br/>
    struct theme::selector_line2_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x000000 };
    };
    /// Background color for the row that has focus in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x004D9C <br/>
    struct theme::selector_focus_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x004D9C };
    };
    /// Foreground color for the row that has focus in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFFFF <br/>
    struct theme::selector_focus_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFFFF };
    };
    /// Background color for the row that is selected in the selector widget but does not have focus. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x4472C4 <br/>
    struct theme::selector_selected_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x4472C4 };
    };
    /// Foreground color for the row that is selected in the selector widget but does not have focus. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFFFF <br/>
    struct theme::selector_selected_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFFFF };
    };
    /// Background color for name of filter fields in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0x4472C4 <br/>
    struct theme::selector_label_bgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0x4472C4 };
    };
    /// Foreground color for name of filter fields in the selector widget. <br/>
    /// type: ::configs::spec_types::rgb <br/>
    /// default: 0xFFFFFF <br/>
    struct theme::selector_label_fgcolor {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ::configs::spec_types::rgb;
        using mapped_type = ::configs::spec_types::rgb;
        type value { 0xFFFFFF };
    };

    /// Restrict target debugging to a specific primary user. <br/>
    /// type: std::string <br/>
    /// default: "" <br/>
    struct debug::primary_user {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// type: std::string <br/>
    /// displayName: Fake target IP <br/>
    /// default: "" <br/>
    struct debug::fake_target_ip {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = std::string;
        type value {  };
    };
    /// - kbd / ocr when != 0 <br/>
    ///  <br/>
    /// (Wrm) <br/>
    /// - pointer             = 0x0004 <br/>
    /// - primary_orders      = 0x0020 <br/>
    /// - secondary_orders    = 0x0040 <br/>
    /// - bitmap_update       = 0x0080 <br/>
    /// - surface_commands    = 0x0100 <br/>
    /// - bmp_cache           = 0x0200 <br/>
    /// - internal_buffer     = 0x0400 <br/>
    /// - sec_decrypted       = 0x1000 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::capture {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - variable = 0x0002 <br/>
    /// - buffer   = 0x0040 <br/>
    /// - dump     = 0x1000 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::auth {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - Log   = 0x01 <br/>
    /// - Event = 0x02 <br/>
    /// - Acl   = 0x04 <br/>
    /// - Trace = 0x08 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::session {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - basic_trace     = 0x00000001 <br/>
    /// - basic_trace2    = 0x00000002 <br/>
    /// - basic_trace3    = 0x00000004 <br/>
    /// - basic_trace4    = 0x00000008 <br/>
    /// - basic_trace5    = 0x00000020 <br/>
    /// - graphic         = 0x00000040 <br/>
    /// - channel         = 0x00000080 <br/>
    /// - cache_from_disk = 0x00000400 <br/>
    /// - bmp_info        = 0x00000800 <br/>
    /// - global_channel  = 0x00002000 <br/>
    /// - sec_decrypted   = 0x00004000 <br/>
    /// - keymap          = 0x00008000 <br/>
    /// - nla             = 0x00010000 <br/>
    /// - nla_dump        = 0x00020000 <br/>
    ///  <br/>
    /// (Serializer) <br/>
    /// - pointer             = 0x00040000 <br/>
    /// - primary_orders      = 0x00200000 <br/>
    /// - secondary_orders    = 0x00400000 <br/>
    /// - bitmap_update       = 0x00800000 <br/>
    /// - surface_commands    = 0x01000000 <br/>
    /// - bmp_cache           = 0x02000000 <br/>
    /// - internal_buffer     = 0x04000000 <br/>
    /// - sec_decrypted       = 0x10000000 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::front {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - basic_trace         = 0x00000001 <br/>
    /// - connection          = 0x00000002 <br/>
    /// - security            = 0x00000004 <br/>
    /// - capabilities        = 0x00000008 <br/>
    /// - license             = 0x00000010 <br/>
    /// - asynchronous_task   = 0x00000020 <br/>
    /// - graphics_pointer    = 0x00000040 <br/>
    /// - graphics            = 0x00000080 <br/>
    /// - input               = 0x00000100 <br/>
    /// - rail_order          = 0x00000200 <br/>
    /// - credssp             = 0x00000400 <br/>
    /// - negotiation         = 0x00000800 <br/>
    /// - cache_persister     = 0x00001000 <br/>
    /// - fsdrvmgr            = 0x00002000 <br/>
    /// - sesprobe_launcher   = 0x00004000 <br/>
    /// - sesprobe_repetitive = 0x00008000 <br/>
    /// - drdynvc             = 0x00010000 <br/>
    /// - surfaceCmd          = 0x00020000 <br/>
    /// - cache_from_disk     = 0x00040000 <br/>
    /// - bmp_info            = 0x00080000 <br/>
    /// - drdynvc_dump        = 0x00100000 <br/>
    /// - printer             = 0x00200000 <br/>
    /// - rdpsnd              = 0x00400000 <br/>
    /// - channels            = 0x00800000 <br/>
    /// - rail                = 0x01000000 <br/>
    /// - sesprobe            = 0x02000000 <br/>
    /// - cliprdr             = 0x04000000 <br/>
    /// - rdpdr               = 0x08000000 <br/>
    /// - rail_dump           = 0x10000000 <br/>
    /// - sesprobe_dump       = 0x20000000 <br/>
    /// - cliprdr_dump        = 0x40000000 <br/>
    /// - rdpdr_dump          = 0x80000000 <br/>
    /// type: uint32_t <br/>
    /// displayName: Mod RDP <br/>
    /// default: 0 <br/>
    struct debug::mod_rdp {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - basic_trace     = 0x00000001 <br/>
    /// - keymap_stack    = 0x00000002 <br/>
    /// - draw_event      = 0x00000004 <br/>
    /// - input           = 0x00000008 <br/>
    /// - connection      = 0x00000010 <br/>
    /// - hextile_encoder = 0x00000020 <br/>
    /// - cursor_encoder  = 0x00000040 <br/>
    /// - clipboard       = 0x00000080 <br/>
    /// - zrle_encoder    = 0x00000100 <br/>
    /// - zrle_trace      = 0x00000200 <br/>
    /// - hextile_trace   = 0x00000400 <br/>
    /// - cursor_trace    = 0x00001000 <br/>
    /// - rre_encoder     = 0x00002000 <br/>
    /// - rre_trace       = 0x00004000 <br/>
    /// - raw_encoder     = 0x00008000 <br/>
    /// - raw_trace       = 0x00010000 <br/>
    /// - copyrect_encoder= 0x00020000 <br/>
    /// - copyrect_trace  = 0x00040000 <br/>
    /// - keymap          = 0x00080000 <br/>
    /// type: uint32_t <br/>
    /// displayName: Mod VNC <br/>
    /// default: 0 <br/>
    struct debug::mod_vnc {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - copy_paste != 0 <br/>
    /// - client_execute = 0x01 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::mod_internal {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - basic    = 0x0001 <br/>
    /// - dump     = 0x0002 <br/>
    /// - watchdog = 0x0004 <br/>
    /// - meta     = 0x0008 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::sck_mod {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - basic    = 0x0001 <br/>
    /// - dump     = 0x0002 <br/>
    /// - watchdog = 0x0004 <br/>
    /// - meta     = 0x0008 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::sck_front {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::password {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - when != 0 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::compression {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - life       = 0x0001 <br/>
    /// - persistent = 0x0200 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::cache {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// - when != 0 <br/>
    /// type: uint32_t <br/>
    /// default: 0 <br/>
    struct debug::ocr {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// Value passed to function av_log_set_level() <br/>
    /// See https://www.ffmpeg.org/doxygen/2.3/group__lavu__log__constants.html <br/>
    /// type: uint32_t <br/>
    /// displayName: FFmpeg <br/>
    /// default: 0 <br/>
    struct debug::ffmpeg {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = uint32_t;
        using mapped_type = uint32_t;
        type value { 0 };
    };
    /// Log unknown members or sections. <br/>
    /// type: bool <br/>
    /// default: true <br/>
    struct debug::config {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = bool;
        using mapped_type = bool;
        type value { true };
    };
    /// type: ModRdpUseFailureSimulationSocketTransport <br/>
    /// displayName: Mod RDP use failure simulation socket transport <br/>
    /// default: ModRdpUseFailureSimulationSocketTransport::Off <br/>
    struct debug::mod_rdp_use_failure_simulation_socket_transport {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = ModRdpUseFailureSimulationSocketTransport;
        using mapped_type = ModRdpUseFailureSimulationSocketTransport;
        type value { ModRdpUseFailureSimulationSocketTransport::Off };
    };
    /// List of client probe IP addresses (e.g. ip1, ip2, etc.) to prevent some continuous logs. <br/>
    /// type: std::string <br/>
    /// default: "" <br/>
    struct debug::probe_client_addresses {
        static constexpr unsigned acl_proxy_communication_flags = 0b00;
        using type = std::string;
        using mapped_type = ::configs::spec_types::list<std::string>;
        type value {  };
    };

} // namespace cfg

namespace cfg_section {
struct globals
: cfg::globals::front_connection_time
, cfg::globals::target_connection_time
, cfg::globals::auth_user
, cfg::globals::host
, cfg::globals::target
, cfg::globals::target_device
, cfg::globals::device_id
, cfg::globals::primary_user_id
, cfg::globals::target_user
, cfg::globals::target_application
, cfg::globals::target_application_account
, cfg::globals::target_application_password
, cfg::globals::authfile
, cfg::globals::handshake_timeout
, cfg::globals::base_inactivity_timeout
, cfg::globals::inactivity_timeout
, cfg::globals::keepalive_grace_delay
, cfg::globals::authentication_timeout
, cfg::globals::rdp_keepalive_connection_interval
, cfg::globals::port
, cfg::globals::trace_type
, cfg::globals::listen_address
, cfg::globals::enable_transparent_mode
, cfg::globals::certificate_password
, cfg::globals::is_rec
, cfg::globals::enable_bitmap_update
, cfg::globals::enable_end_time_warning_osd
, cfg::globals::enable_osd_display_remote_target
, cfg::globals::show_target_user_in_f12_message
, cfg::globals::enable_wab_integration
, cfg::globals::large_pointer_support
, cfg::globals::mod_recv_timeout
, cfg::globals::experimental_enable_serializer_data_block_size_limit
, cfg::globals::enable_ipv6
, cfg::globals::minimal_memory_available_before_connection_silently_closed
{ static constexpr bool is_section = true; };

struct client
: cfg::client::ssl_cipher_list
, cfg::client::tls_1_3_ciphersuites
, cfg::client::tls_key_exchange_groups
, cfg::client::tls_signature_algorithms
, cfg::client::ignore_logon_password
, cfg::client::allow_using_multiple_monitors
, cfg::client::allow_scale_factor
, cfg::client::unicode_keyboard_event_support
, cfg::client::encryption_level
, cfg::client::tls_fallback_legacy
, cfg::client::tls_support
, cfg::client::tls_min_level
, cfg::client::tls_max_level
, cfg::client::show_common_cipher_list
, cfg::client::enable_nla
, cfg::client::disable_tsk_switch_shortcuts
, cfg::client::rdp_compression
, cfg::client::max_color_depth
, cfg::client::persistent_disk_bitmap_cache
, cfg::client::cache_waiting_list
, cfg::client::persist_bitmap_cache_on_disk
, cfg::client::bitmap_compression
, cfg::client::fast_path
, cfg::client::enable_suppress_output
, cfg::client::bogus_ios_glyph_support_level
, cfg::client::transform_glyph_to_bitmap
, cfg::client::recv_timeout
, cfg::client::enable_osd_4_eyes
, cfg::client::enable_remotefx
, cfg::client::disabled_orders
, cfg::client::workaround_incomplete_images
{ static constexpr bool is_section = true; };

struct all_target_mod
: cfg::all_target_mod::connection_establishment_timeout
, cfg::all_target_mod::tcp_user_timeout
{ static constexpr bool is_section = true; };

struct remote_program
: cfg::remote_program::allow_resize_hosted_desktop
{ static constexpr bool is_section = true; };

struct mod_rdp
: cfg::mod_rdp::open_session_timeout
, cfg::mod_rdp::cipher_string
, cfg::mod_rdp::tls_1_3_ciphersuites
, cfg::mod_rdp::tls_key_exchange_groups
, cfg::mod_rdp::allowed_dynamic_channels
, cfg::mod_rdp::denied_dynamic_channels
, cfg::mod_rdp::load_balance_info
, cfg::mod_rdp::alternate_shell
, cfg::mod_rdp::shell_arguments
, cfg::mod_rdp::shell_working_directory
, cfg::mod_rdp::remoteapp_bypass_legal_notice_delay
, cfg::mod_rdp::remoteapp_bypass_legal_notice_timeout
, cfg::mod_rdp::effective_krb_armoring_user
, cfg::mod_rdp::effective_krb_armoring_password
, cfg::mod_rdp::force_screen_resolution
, cfg::mod_rdp::force_performance_flags
, cfg::mod_rdp::auto_adjust_performance_flags
, cfg::mod_rdp::rdp_compression
, cfg::mod_rdp::disconnect_on_logon_user_change
, cfg::mod_rdp::disabled_orders
, cfg::mod_rdp::enable_nla
, cfg::mod_rdp::enable_kerberos
, cfg::mod_rdp::allow_nla_ntlm_fallback
, cfg::mod_rdp::allow_tls_only_fallback
, cfg::mod_rdp::allow_rdp_legacy_fallback
, cfg::mod_rdp::tls_min_level
, cfg::mod_rdp::tls_max_level
, cfg::mod_rdp::tls_enable_legacy_server
, cfg::mod_rdp::show_common_cipher_list
, cfg::mod_rdp::persistent_disk_bitmap_cache
, cfg::mod_rdp::cache_waiting_list
, cfg::mod_rdp::persist_bitmap_cache_on_disk
, cfg::mod_rdp::allowed_channels
, cfg::mod_rdp::denied_channels
, cfg::mod_rdp::disable_coreinput_dynamic_channel
, cfg::mod_rdp::fast_path
, cfg::mod_rdp::server_redirection_support
, cfg::mod_rdp::client_address_sent
, cfg::mod_rdp::proxy_managed_drives
, cfg::mod_rdp::ignore_auth_channel
, cfg::mod_rdp::auth_channel
, cfg::mod_rdp::checkout_channel
, cfg::mod_rdp::use_client_provided_alternate_shell
, cfg::mod_rdp::use_client_provided_remoteapp
, cfg::mod_rdp::use_native_remoteapp_capability
, cfg::mod_rdp::application_driver_exe_or_file
, cfg::mod_rdp::application_driver_script_argument
, cfg::mod_rdp::application_driver_chrome_dt_script
, cfg::mod_rdp::application_driver_chrome_uia_script
, cfg::mod_rdp::application_driver_firefox_uia_script
, cfg::mod_rdp::application_driver_ie_script
, cfg::mod_rdp::hide_client_name
, cfg::mod_rdp::use_license_store
, cfg::mod_rdp::bogus_freerdp_clipboard
, cfg::mod_rdp::bogus_ios_rdpdr_virtual_channel
, cfg::mod_rdp::bogus_refresh_rect
, cfg::mod_rdp::enable_rdpdr_data_analysis
, cfg::mod_rdp::log_only_relevant_clipboard_activities
, cfg::mod_rdp::split_domain
, cfg::mod_rdp::wabam_uses_translated_remoteapp
, cfg::mod_rdp::session_shadowing_support
, cfg::mod_rdp::enable_remotefx
, cfg::mod_rdp::enable_restricted_admin_mode
, cfg::mod_rdp::force_smartcard_authentication
, cfg::mod_rdp::enable_ipv6
, cfg::mod_rdp::mode_console
, cfg::mod_rdp::auto_reconnection_on_losing_target_link
, cfg::mod_rdp::allow_session_reconnection_by_shortcut
, cfg::mod_rdp::session_reconnection_delay
, cfg::mod_rdp::forward_client_build_number
, cfg::mod_rdp::bogus_monitor_layout_treatment
, cfg::mod_rdp::remote_programs_disconnect_message_delay
, cfg::mod_rdp::use_session_probe_to_launch_remote_program
, cfg::mod_rdp::replace_null_pointer_by_default_pointer
, cfg::mod_rdp::windows_xp_clipboard_support
, cfg::mod_rdp::block_user_input_until_appdriver_completes
{ static constexpr bool is_section = true; };

struct protocol
: cfg::protocol::save_session_info_pdu
{ static constexpr bool is_section = true; };

struct session_probe
: cfg::session_probe::smart_launcher_clipboard_initialization_delay
, cfg::session_probe::smart_launcher_start_delay
, cfg::session_probe::smart_launcher_long_delay
, cfg::session_probe::smart_launcher_short_delay
, cfg::session_probe::extra_system_processes
, cfg::session_probe::windows_of_these_applications_as_unidentified_input_field
, cfg::session_probe::outbound_connection_monitoring_rules
, cfg::session_probe::process_monitoring_rules
, cfg::session_probe::disabled_features
, cfg::session_probe::enable_session_probe
, cfg::session_probe::exe_or_file
, cfg::session_probe::arguments
, cfg::session_probe::use_smart_launcher
, cfg::session_probe::enable_launch_mask
, cfg::session_probe::on_launch_failure
, cfg::session_probe::launch_timeout
, cfg::session_probe::launch_fallback_timeout
, cfg::session_probe::start_launch_timeout_timer_only_after_logon
, cfg::session_probe::keepalive_timeout
, cfg::session_probe::on_keepalive_timeout
, cfg::session_probe::end_disconnected_session
, cfg::session_probe::enable_autodeployed_appdriver_affinity
, cfg::session_probe::enable_log
, cfg::session_probe::enable_log_rotation
, cfg::session_probe::log_level
, cfg::session_probe::disconnected_application_limit
, cfg::session_probe::disconnected_session_limit
, cfg::session_probe::idle_session_limit
, cfg::session_probe::smart_launcher_enable_wabam_affinity
, cfg::session_probe::launcher_abort_delay
, cfg::session_probe::enable_crash_dump
, cfg::session_probe::handle_usage_limit
, cfg::session_probe::memory_usage_limit
, cfg::session_probe::cpu_usage_alarm_threshold
, cfg::session_probe::cpu_usage_alarm_action
, cfg::session_probe::end_of_session_check_delay_time
, cfg::session_probe::ignore_ui_less_processes_during_end_of_session_check
, cfg::session_probe::childless_window_as_unidentified_input_field
, cfg::session_probe::update_disabled_features
, cfg::session_probe::enable_bestsafe_interaction
, cfg::session_probe::on_account_manipulation
, cfg::session_probe::alternate_directory_environment_variable
, cfg::session_probe::public_session
, cfg::session_probe::customize_executable_name
, cfg::session_probe::allow_multiple_handshake
, cfg::session_probe::at_end_of_session_freeze_connection_and_wait
, cfg::session_probe::enable_cleaner
, cfg::session_probe::clipboard_based_launcher_reset_keyboard_status
, cfg::session_probe::process_command_line_retrieve_method
, cfg::session_probe::periodic_task_run_interval
, cfg::session_probe::pause_if_session_is_disconnected
, cfg::session_probe::monitor_own_resources_consumption
{ static constexpr bool is_section = true; };

struct server_cert
: cfg::server_cert::external_cert
, cfg::server_cert::external_response
, cfg::server_cert::server_cert_store
, cfg::server_cert::server_cert_check
, cfg::server_cert::server_access_allowed_message
, cfg::server_cert::server_cert_create_message
, cfg::server_cert::server_cert_success_message
, cfg::server_cert::server_cert_failure_message
, cfg::server_cert::error_message
, cfg::server_cert::enable_external_validation
{ static constexpr bool is_section = true; };

struct mod_vnc
: cfg::mod_vnc::cipher_string
, cfg::mod_vnc::tls_1_3_ciphersuites
, cfg::mod_vnc::tls_key_exchange_groups
, cfg::mod_vnc::force_authentication_method
, cfg::mod_vnc::clipboard_up
, cfg::mod_vnc::clipboard_down
, cfg::mod_vnc::encodings
, cfg::mod_vnc::support_cursor_pseudo_encoding
, cfg::mod_vnc::server_clipboard_encoding_type
, cfg::mod_vnc::bogus_clipboard_infinite_loop
, cfg::mod_vnc::server_is_macos
, cfg::mod_vnc::server_unix_alt
, cfg::mod_vnc::enable_ipv6
, cfg::mod_vnc::tls_min_level
, cfg::mod_vnc::tls_max_level
, cfg::mod_vnc::tls_enable_legacy_server
, cfg::mod_vnc::show_common_cipher_list
{ static constexpr bool is_section = true; };

struct session_log
: cfg::session_log::enable_session_log_file
, cfg::session_log::enable_syslog_format
, cfg::session_log::keyboard_input_masking_level
{ static constexpr bool is_section = true; };

struct ocr
: cfg::ocr::interval
, cfg::ocr::version
, cfg::ocr::locale
, cfg::ocr::on_title_bar_only
, cfg::ocr::max_unrecog_char_rate
{ static constexpr bool is_section = true; };

struct capture
: cfg::capture::record_filebase
, cfg::capture::record_subdirectory
, cfg::capture::fdx_path
, cfg::capture::wrm_break_interval
, cfg::capture::file_permissions
, cfg::capture::hash_path
, cfg::capture::record_tmp_path
, cfg::capture::record_path
, cfg::capture::capture_flags
, cfg::capture::disable_keyboard_log
, cfg::capture::disable_clipboard_log
, cfg::capture::disable_file_system_log
, cfg::capture::wrm_color_depth_selection_strategy
, cfg::capture::wrm_compression_algorithm
{ static constexpr bool is_section = true; };

struct audit
: cfg::audit::video_break_interval
, cfg::audit::video_codec
, cfg::audit::ffmpeg_options
, cfg::audit::rt_png_interval
, cfg::audit::redis_timeout
, cfg::audit::redis_address
, cfg::audit::redis_password
, cfg::audit::redis_tls_cacert
, cfg::audit::redis_tls_cert
, cfg::audit::redis_tls_key
, cfg::audit::file_permissions
, cfg::audit::enable_keyboard_log
, cfg::audit::video_frame_rate
, cfg::audit::video_notimestamp
, cfg::audit::smart_video_cropping
, cfg::audit::play_video_with_corrupted_bitmap
, cfg::audit::rt_display
, cfg::audit::allow_rt_without_recording
, cfg::audit::rt_png_limit
, cfg::audit::use_redis
, cfg::audit::redis_port
, cfg::audit::redis_db
, cfg::audit::redis_use_tls
{ static constexpr bool is_section = true; };

struct file_verification
: cfg::file_verification::socket_path
, cfg::file_verification::enable_up
, cfg::file_verification::enable_down
, cfg::file_verification::clipboard_text_up
, cfg::file_verification::clipboard_text_down
, cfg::file_verification::block_invalid_file_up
, cfg::file_verification::block_invalid_file_down
, cfg::file_verification::block_invalid_clipboard_text_up
, cfg::file_verification::block_invalid_clipboard_text_down
, cfg::file_verification::log_if_accepted
, cfg::file_verification::max_file_size_rejected
, cfg::file_verification::tmpdir
{ static constexpr bool is_section = true; };

struct file_storage
: cfg::file_storage::store_file
{ static constexpr bool is_section = true; };

struct crypto
: cfg::crypto::encryption_key
, cfg::crypto::sign_key
{ static constexpr bool is_section = true; };

struct websocket
: cfg::websocket::listen_address
, cfg::websocket::enable_websocket
, cfg::websocket::use_tls
{ static constexpr bool is_section = true; };

struct context
: cfg::context::psid
, cfg::context::selector_device_filter
, cfg::context::selector_group_filter
, cfg::context::selector_proto_filter
, cfg::context::target_password
, cfg::context::target_host
, cfg::context::tunneling_target_host
, cfg::context::target_str
, cfg::context::target_service
, cfg::context::target_protocol
, cfg::context::password
, cfg::context::reporting
, cfg::context::auth_channel_answer
, cfg::context::auth_channel_target
, cfg::context::message
, cfg::context::display_link
, cfg::context::mod_timeout
, cfg::context::rejected
, cfg::context::session_id
, cfg::context::end_date_cnx
, cfg::context::real_target_device
, cfg::context::ticket
, cfg::context::comment
, cfg::context::duration
, cfg::context::duration_max
, cfg::context::waitinforeturn
, cfg::context::proxy_opt
, cfg::context::pattern_kill
, cfg::context::pattern_notify
, cfg::context::opt_message
, cfg::context::login_message
, cfg::context::disconnect_reason
, cfg::context::ip_target
, cfg::context::auth_command
, cfg::context::auth_notify
, cfg::context::auth_notify_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_original_exe_or_file
, cfg::context::auth_command_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_working_dir
, cfg::context::auth_command_rail_exec_arguments
, cfg::context::auth_command_rail_exec_account
, cfg::context::auth_command_rail_exec_password
, cfg::context::pm_response
, cfg::context::pm_request
, cfg::context::rd_shadow_userdata
, cfg::context::rd_shadow_type
, cfg::context::rd_shadow_invitation_error_message
, cfg::context::rd_shadow_invitation_id
, cfg::context::rd_shadow_invitation_addr
, cfg::context::session_sharing_userdata
, cfg::context::session_sharing_ttl
, cfg::context::session_sharing_invitation_error_message
, cfg::context::session_sharing_invitation_id
, cfg::context::session_sharing_invitation_addr
, cfg::context::session_sharing_target_ip
, cfg::context::session_sharing_target_login
, cfg::context::smartcard_login
, cfg::context::banner_message
, cfg::context::redirection_password_or_cookie
, cfg::context::opt_bpp
, cfg::context::opt_height
, cfg::context::opt_width
, cfg::context::selector
, cfg::context::selector_current_page
, cfg::context::selector_lines_per_page
, cfg::context::selector_number_of_pages
, cfg::context::target_port
, cfg::context::accept_message
, cfg::context::display_message
, cfg::context::keepalive
, cfg::context::authentication_challenge
, cfg::context::formflag
, cfg::context::module
, cfg::context::try_alternate_target
, cfg::context::has_more_target
, cfg::context::disconnect_reason_ack
, cfg::context::recording_started
, cfg::context::rt_ready
, cfg::context::sharing_ready
, cfg::context::auth_notify_rail_exec_flags
, cfg::context::auth_command_rail_exec_exec_result
, cfg::context::auth_command_rail_exec_flags
, cfg::context::is_wabam
, cfg::context::native_session_id
, cfg::context::rd_shadow_available
, cfg::context::rd_shadow_invitation_error_code
, cfg::context::rd_shadow_invitation_port
, cfg::context::session_sharing_enable_control
, cfg::context::session_sharing_invitation_error_code
, cfg::context::rail_module_host_mod_is_active
, cfg::context::banner_type
{ static constexpr bool is_section = true; };

struct internal_mod
: cfg::internal_mod::close_box_timeout
, cfg::internal_mod::enable_target_field
, cfg::internal_mod::keyboard_layout_proposals
, cfg::internal_mod::enable_close_box
{ static constexpr bool is_section = true; };

struct mod_replay
: cfg::mod_replay::replay_path
, cfg::mod_replay::on_end_of_data
, cfg::mod_replay::replay_on_loop
{ static constexpr bool is_section = true; };

struct translation
: cfg::translation::language
, cfg::translation::login_language
{ static constexpr bool is_section = true; };

struct theme
: cfg::theme::logo_path
, cfg::theme::enable_theme
, cfg::theme::bgcolor
, cfg::theme::fgcolor
, cfg::theme::separator_color
, cfg::theme::focus_color
, cfg::theme::error_color
, cfg::theme::edit_bgcolor
, cfg::theme::edit_fgcolor
, cfg::theme::edit_border_color
, cfg::theme::edit_focus_border_color
, cfg::theme::edit_cursor_color
, cfg::theme::edit_placeholder_color
, cfg::theme::password_toggle_color
, cfg::theme::tooltip_bgcolor
, cfg::theme::tooltip_fgcolor
, cfg::theme::tooltip_border_color
, cfg::theme::selector_line1_bgcolor
, cfg::theme::selector_line1_fgcolor
, cfg::theme::selector_line2_bgcolor
, cfg::theme::selector_line2_fgcolor
, cfg::theme::selector_focus_bgcolor
, cfg::theme::selector_focus_fgcolor
, cfg::theme::selector_selected_bgcolor
, cfg::theme::selector_selected_fgcolor
, cfg::theme::selector_label_bgcolor
, cfg::theme::selector_label_fgcolor
{ static constexpr bool is_section = true; };

struct debug
: cfg::debug::primary_user
, cfg::debug::fake_target_ip
, cfg::debug::capture
, cfg::debug::auth
, cfg::debug::session
, cfg::debug::front
, cfg::debug::mod_rdp
, cfg::debug::mod_vnc
, cfg::debug::mod_internal
, cfg::debug::sck_mod
, cfg::debug::sck_front
, cfg::debug::password
, cfg::debug::compression
, cfg::debug::cache
, cfg::debug::ocr
, cfg::debug::ffmpeg
, cfg::debug::config
, cfg::debug::mod_rdp_use_failure_simulation_socket_transport
, cfg::debug::probe_client_addresses
{ static constexpr bool is_section = true; };

} // namespace cfg_section

namespace configs {
struct VariablesConfiguration
: cfg_section::globals
, cfg_section::client
, cfg_section::all_target_mod
, cfg_section::remote_program
, cfg_section::mod_rdp
, cfg_section::protocol
, cfg_section::session_probe
, cfg_section::server_cert
, cfg_section::mod_vnc
, cfg_section::session_log
, cfg_section::ocr
, cfg_section::capture
, cfg_section::audit
, cfg_section::file_verification
, cfg_section::file_storage
, cfg_section::crypto
, cfg_section::websocket
, cfg_section::context
, cfg_section::internal_mod
, cfg_section::mod_replay
, cfg_section::translation
, cfg_section::theme
, cfg_section::debug
{};

using VariablesAclPack = Pack<
  cfg::globals::front_connection_time
, cfg::globals::target_connection_time
, cfg::globals::auth_user
, cfg::globals::host
, cfg::globals::target
, cfg::globals::target_device
, cfg::globals::device_id
, cfg::globals::primary_user_id
, cfg::globals::target_user
, cfg::globals::target_application
, cfg::globals::target_application_account
, cfg::globals::target_application_password
, cfg::globals::inactivity_timeout
, cfg::globals::trace_type
, cfg::globals::is_rec
, cfg::globals::enable_osd_display_remote_target
, cfg::client::disable_tsk_switch_shortcuts
, cfg::all_target_mod::tcp_user_timeout
, cfg::mod_rdp::disabled_orders
, cfg::mod_rdp::enable_nla
, cfg::mod_rdp::enable_kerberos
, cfg::mod_rdp::allow_nla_ntlm_fallback
, cfg::mod_rdp::allow_tls_only_fallback
, cfg::mod_rdp::allow_rdp_legacy_fallback
, cfg::mod_rdp::tls_min_level
, cfg::mod_rdp::tls_max_level
, cfg::mod_rdp::cipher_string
, cfg::mod_rdp::tls_enable_legacy_server
, cfg::mod_rdp::tls_1_3_ciphersuites
, cfg::mod_rdp::tls_key_exchange_groups
, cfg::mod_rdp::show_common_cipher_list
, cfg::mod_rdp::allowed_channels
, cfg::mod_rdp::denied_channels
, cfg::mod_rdp::allowed_dynamic_channels
, cfg::mod_rdp::denied_dynamic_channels
, cfg::mod_rdp::disable_coreinput_dynamic_channel
, cfg::mod_rdp::force_screen_resolution
, cfg::mod_rdp::server_redirection_support
, cfg::mod_rdp::load_balance_info
, cfg::mod_rdp::proxy_managed_drives
, cfg::mod_rdp::ignore_auth_channel
, cfg::mod_rdp::alternate_shell
, cfg::mod_rdp::shell_arguments
, cfg::mod_rdp::shell_working_directory
, cfg::mod_rdp::use_client_provided_alternate_shell
, cfg::mod_rdp::use_client_provided_remoteapp
, cfg::mod_rdp::use_native_remoteapp_capability
, cfg::mod_rdp::enable_rdpdr_data_analysis
, cfg::mod_rdp::wabam_uses_translated_remoteapp
, cfg::mod_rdp::enable_remotefx
, cfg::mod_rdp::enable_restricted_admin_mode
, cfg::mod_rdp::force_smartcard_authentication
, cfg::mod_rdp::enable_ipv6
, cfg::mod_rdp::mode_console
, cfg::mod_rdp::auto_reconnection_on_losing_target_link
, cfg::mod_rdp::allow_session_reconnection_by_shortcut
, cfg::mod_rdp::session_reconnection_delay
, cfg::mod_rdp::forward_client_build_number
, cfg::mod_rdp::bogus_monitor_layout_treatment
, cfg::mod_rdp::effective_krb_armoring_user
, cfg::mod_rdp::effective_krb_armoring_password
, cfg::mod_rdp::remote_programs_disconnect_message_delay
, cfg::mod_rdp::use_session_probe_to_launch_remote_program
, cfg::mod_rdp::replace_null_pointer_by_default_pointer
, cfg::mod_rdp::windows_xp_clipboard_support
, cfg::mod_rdp::block_user_input_until_appdriver_completes
, cfg::protocol::save_session_info_pdu
, cfg::session_probe::enable_session_probe
, cfg::session_probe::use_smart_launcher
, cfg::session_probe::enable_launch_mask
, cfg::session_probe::on_launch_failure
, cfg::session_probe::launch_timeout
, cfg::session_probe::launch_fallback_timeout
, cfg::session_probe::start_launch_timeout_timer_only_after_logon
, cfg::session_probe::keepalive_timeout
, cfg::session_probe::on_keepalive_timeout
, cfg::session_probe::end_disconnected_session
, cfg::session_probe::enable_autodeployed_appdriver_affinity
, cfg::session_probe::enable_log
, cfg::session_probe::enable_log_rotation
, cfg::session_probe::log_level
, cfg::session_probe::disconnected_application_limit
, cfg::session_probe::disconnected_session_limit
, cfg::session_probe::idle_session_limit
, cfg::session_probe::smart_launcher_clipboard_initialization_delay
, cfg::session_probe::smart_launcher_start_delay
, cfg::session_probe::smart_launcher_long_delay
, cfg::session_probe::smart_launcher_short_delay
, cfg::session_probe::smart_launcher_enable_wabam_affinity
, cfg::session_probe::launcher_abort_delay
, cfg::session_probe::enable_crash_dump
, cfg::session_probe::handle_usage_limit
, cfg::session_probe::memory_usage_limit
, cfg::session_probe::cpu_usage_alarm_threshold
, cfg::session_probe::cpu_usage_alarm_action
, cfg::session_probe::end_of_session_check_delay_time
, cfg::session_probe::ignore_ui_less_processes_during_end_of_session_check
, cfg::session_probe::extra_system_processes
, cfg::session_probe::childless_window_as_unidentified_input_field
, cfg::session_probe::windows_of_these_applications_as_unidentified_input_field
, cfg::session_probe::update_disabled_features
, cfg::session_probe::disabled_features
, cfg::session_probe::enable_bestsafe_interaction
, cfg::session_probe::on_account_manipulation
, cfg::session_probe::alternate_directory_environment_variable
, cfg::session_probe::public_session
, cfg::session_probe::outbound_connection_monitoring_rules
, cfg::session_probe::process_monitoring_rules
, cfg::session_probe::process_command_line_retrieve_method
, cfg::session_probe::periodic_task_run_interval
, cfg::session_probe::pause_if_session_is_disconnected
, cfg::session_probe::monitor_own_resources_consumption
, cfg::server_cert::server_cert_store
, cfg::server_cert::server_cert_check
, cfg::server_cert::server_access_allowed_message
, cfg::server_cert::server_cert_create_message
, cfg::server_cert::server_cert_success_message
, cfg::server_cert::server_cert_failure_message
, cfg::server_cert::enable_external_validation
, cfg::server_cert::external_cert
, cfg::server_cert::external_response
, cfg::mod_vnc::clipboard_up
, cfg::mod_vnc::clipboard_down
, cfg::mod_vnc::support_cursor_pseudo_encoding
, cfg::mod_vnc::server_clipboard_encoding_type
, cfg::mod_vnc::bogus_clipboard_infinite_loop
, cfg::mod_vnc::server_is_macos
, cfg::mod_vnc::server_unix_alt
, cfg::mod_vnc::enable_ipv6
, cfg::mod_vnc::tls_min_level
, cfg::mod_vnc::tls_max_level
, cfg::mod_vnc::cipher_string
, cfg::mod_vnc::tls_enable_legacy_server
, cfg::mod_vnc::tls_1_3_ciphersuites
, cfg::mod_vnc::tls_key_exchange_groups
, cfg::mod_vnc::show_common_cipher_list
, cfg::mod_vnc::force_authentication_method
, cfg::session_log::enable_session_log_file
, cfg::session_log::keyboard_input_masking_level
, cfg::capture::record_filebase
, cfg::capture::record_subdirectory
, cfg::capture::fdx_path
, cfg::capture::hash_path
, cfg::capture::record_tmp_path
, cfg::capture::record_path
, cfg::capture::disable_keyboard_log
, cfg::audit::rt_display
, cfg::audit::redis_address
, cfg::audit::redis_port
, cfg::audit::redis_password
, cfg::audit::redis_db
, cfg::audit::redis_use_tls
, cfg::audit::redis_tls_cacert
, cfg::audit::redis_tls_cert
, cfg::audit::redis_tls_key
, cfg::file_verification::enable_up
, cfg::file_verification::enable_down
, cfg::file_verification::clipboard_text_up
, cfg::file_verification::clipboard_text_down
, cfg::file_verification::block_invalid_file_up
, cfg::file_verification::block_invalid_file_down
, cfg::file_verification::log_if_accepted
, cfg::file_verification::max_file_size_rejected
, cfg::file_storage::store_file
, cfg::crypto::encryption_key
, cfg::crypto::sign_key
, cfg::context::psid
, cfg::context::opt_bpp
, cfg::context::opt_height
, cfg::context::opt_width
, cfg::context::selector
, cfg::context::selector_current_page
, cfg::context::selector_device_filter
, cfg::context::selector_group_filter
, cfg::context::selector_proto_filter
, cfg::context::selector_lines_per_page
, cfg::context::selector_number_of_pages
, cfg::context::target_password
, cfg::context::target_host
, cfg::context::tunneling_target_host
, cfg::context::target_str
, cfg::context::target_service
, cfg::context::target_port
, cfg::context::target_protocol
, cfg::context::password
, cfg::context::reporting
, cfg::context::auth_channel_answer
, cfg::context::auth_channel_target
, cfg::context::message
, cfg::context::display_link
, cfg::context::mod_timeout
, cfg::context::accept_message
, cfg::context::display_message
, cfg::context::rejected
, cfg::context::keepalive
, cfg::context::session_id
, cfg::context::end_date_cnx
, cfg::context::real_target_device
, cfg::context::authentication_challenge
, cfg::context::ticket
, cfg::context::comment
, cfg::context::duration
, cfg::context::duration_max
, cfg::context::waitinforeturn
, cfg::context::formflag
, cfg::context::module
, cfg::context::try_alternate_target
, cfg::context::has_more_target
, cfg::context::proxy_opt
, cfg::context::pattern_kill
, cfg::context::pattern_notify
, cfg::context::opt_message
, cfg::context::login_message
, cfg::context::disconnect_reason
, cfg::context::disconnect_reason_ack
, cfg::context::recording_started
, cfg::context::rt_ready
, cfg::context::sharing_ready
, cfg::context::auth_command
, cfg::context::auth_notify
, cfg::context::auth_notify_rail_exec_flags
, cfg::context::auth_notify_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_exec_result
, cfg::context::auth_command_rail_exec_flags
, cfg::context::auth_command_rail_exec_original_exe_or_file
, cfg::context::auth_command_rail_exec_exe_or_file
, cfg::context::auth_command_rail_exec_working_dir
, cfg::context::auth_command_rail_exec_arguments
, cfg::context::auth_command_rail_exec_account
, cfg::context::auth_command_rail_exec_password
, cfg::context::is_wabam
, cfg::context::pm_response
, cfg::context::pm_request
, cfg::context::native_session_id
, cfg::context::rd_shadow_available
, cfg::context::rd_shadow_userdata
, cfg::context::rd_shadow_type
, cfg::context::rd_shadow_invitation_error_code
, cfg::context::rd_shadow_invitation_error_message
, cfg::context::rd_shadow_invitation_id
, cfg::context::rd_shadow_invitation_addr
, cfg::context::rd_shadow_invitation_port
, cfg::context::session_sharing_userdata
, cfg::context::session_sharing_enable_control
, cfg::context::session_sharing_ttl
, cfg::context::session_sharing_invitation_error_code
, cfg::context::session_sharing_invitation_error_message
, cfg::context::session_sharing_invitation_id
, cfg::context::session_sharing_invitation_addr
, cfg::context::session_sharing_target_ip
, cfg::context::session_sharing_target_login
, cfg::context::smartcard_login
, cfg::context::banner_message
, cfg::context::banner_type
, cfg::mod_replay::replay_path
, cfg::mod_replay::replay_on_loop
, cfg::translation::language
>;


constexpr U64BitFlags<5> loggable_field{ {
  0b1110111111111111111111111111111111111111111111111111011111101100
, 0b1111111101111111111111111111111111111111111111111111111111111111
, 0b0111000011111101000011000000111111111111110111111101111111111111
, 0b1111000000011100000110001101111111000101001111111111010001011110
, 0b0000000000000000000000000000000000000000000000000000000000000001
},
{
  0b0000000000000000000000000000000000000000000000000000000000000000
, 0b0000000000000000000000000000000000000000000000000000000000000000
, 0b0000010000000000000000000000000000000000000000000000000000000000
, 0b0000000000000000000000000000000000000000000000000000000000000000
, 0b0000000000000000000000000000000000000000000000000000000000000000
} };
} // namespace configs
