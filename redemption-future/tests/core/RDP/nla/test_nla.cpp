/*
  This program is free software; you can redistribute it and/or modify it
  under the terms of the GNU General Public License as published by the
  Free Software Foundation; either version 2 of the License, or (at your
  option) any later version.

  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
  Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  675 Mass Ave, Cambridge, MA 02139, USA.

  Product name: redemption, a FLOSS RDP proxy
  Copyright (C) Wallix 2013
  Author(s): Christophe Grosjean, Raphael Zhou, Meng Tan
*/

#include "test_only/test_framework/redemption_unit_tests.hpp"

#include "core/RDP/nla/nla_client_ntlm.hpp"
#include "core/RDP/nla/nla_server_ntlm.hpp"
#include "core/RDP/tpdu_buffer.hpp"
#include "utils/literals/utf16.hpp"

#include "test_only/transport/test_transport.hpp"

#include "test_only/replay_random.hpp"
#include "utils/timebase.hpp"

RED_TEST_DELEGATE_PRINT_ENUM(credssp::State);

using namespace std::literals::chrono_literals;

RED_AUTO_TEST_CASE(TestNlaclient)
{
    RED_TEST_MESSAGE("==================== TestNlaClient ===================");
    const auto public_key = "1245789652325415"_av;
    const auto user = "Ulysse"_av;
    const auto domain = "Ithaque"_av;
    const auto pass = "Pénélope"_av;
    const auto host = "Télémaque"_av;

    ReplayRandom rand(std::vector<uint8_t>({
    // Client Random Challenge
    0xb8, 0x6c, 0xda, 0xa6, 0xf0, 0xf6, 0x30, 0x8d,
    // Exported Session Key
    0xa8, 0x16, 0xa6, 0x6e, 0xe0, 0xc3, 0xe5, 0xcc, 0x98, 0x76, 0xdd, 0xf5, 0xd0, 0x26, 0x74, 0x5f
    }));

//    std::array<uint8_t,8> tmp;
//    rand.random(tmp.data(), tmp.size());
//    RED_CHECK(bytes_view(tmp) == bytes_view(std::array<uint8_t,8>{0xb8, 0x6c, 0xda, 0xa6, 0xf0, 0xf6, 0x30, 0x8d}));

    TimeBase time_base{MonotonicTimePoint{3598079566s}, {}};
    std::string extra_message;
    rdpClientNTLM ntlm_client(user, domain, pass, host, public_key, false, rand, time_base, true, true);

    const uint8_t expected_negotiate[] {
/* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
/* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
/* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
/* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,
    };

    RED_TEST_MESSAGE("+++++++++++++ Client sending NTLM Negotiate");

    RED_CHECK(ntlm_client.authenticate_start() == make_array_view(expected_negotiate));

    const uint8_t server_answer_challenge[]{
    /* 0000 */ 0x30, 0x81, 0x88, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa1, 0x81, 0x80, 0x30, 0x7e, 0x30, 0x7c, 0xa0,  // 0..........0~0|.
    /* 0010 */ 0x7a, 0x04, 0x78, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  // z.xNTLMSSP......
    /* 0020 */ 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2, 0xb8, 0x6c, 0xda, 0xa6, 0xf0,  // ...8........l...
    /* 0030 */ 0xf6, 0x30, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x38,  // .0.........@.@.8
    /* 0040 */ 0x00, 0x00, 0x00, 0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x08, 0x00, 0x57,  // .....(.........W
    /* 0050 */ 0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00, 0x02, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e,  // .I.N.7.....W.I.N
    /* 0060 */ 0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x04,  // .7.....w.i.n.7..
    /* 0070 */ 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x07, 0x00, 0x08, 0x00, 0x67,  // ...w.i.n.7.....g
    /* 0080 */ 0x95, 0x0e, 0x5a, 0x4e, 0x56, 0x76, 0xd6, 0x00, 0x00, 0x00, 0x00,                                // ..ZNVv.....
    };

     const uint8_t expected_authenticate[]{
/* 0000 */ 0x30, 0x82, 0x01, 0x59, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x2c, 0x30, 0x82, 0x01,  // 0..Y........,0..
/* 0010 */ 0x28, 0x30, 0x82, 0x01, 0x24, 0xa0, 0x82, 0x01, 0x20, 0x04, 0x82, 0x01, 0x1c, 0x4e, 0x54, 0x4c,  // (0..$... ....NTL
/* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
/* 0030 */ 0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0xe0, 0x00, 0x00,  // .p.p.p..........
/* 0040 */ 0x00, 0x0c, 0x00, 0x0c, 0x00, 0xee, 0x00, 0x00, 0x00, 0x12, 0x00, 0x12, 0x00, 0xfa, 0x00, 0x00,  // ................
/* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .........5......
/* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xd5, 0x01, 0x55, 0x84, 0x83, 0x53, 0xc0, 0x98, 0x30, 0xa3,  // ........U..S..0.
/* 0070 */ 0xfa, 0x31, 0x73, 0xf4, 0x08, 0x34, 0xbe, 0xb5, 0x6e, 0xce, 0xec, 0x0a, 0x50, 0x2d, 0x29, 0x63,  // .1s..4..n...P-)c
/* 0080 */ 0x7f, 0xcc, 0x5e, 0xe7, 0x18, 0xb8, 0x6c, 0xda, 0xa6, 0xf0, 0xf6, 0x30, 0x8d, 0xfd, 0x9d, 0xcf,  // ..^...l....0....
/* 0090 */ 0xcd, 0x51, 0xdd, 0x58, 0x43, 0x89, 0x79, 0x03, 0xc1, 0x67, 0x89, 0x73, 0x10, 0x01, 0x01, 0x00,  // .Q.XC.y..g.s....
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x56, 0x76, 0xd6, 0xb8, 0x6c, 0xda,  // .........NVv..l.
/* 00b0 */ 0xa6, 0xf0, 0xf6, 0x30, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49,  // ...0.........W.I
/* 00c0 */ 0x00, 0x4e, 0x00, 0x37, 0x00, 0x02, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x37,  // .N.7.....W.I.N.7
/* 00d0 */ 0x00, 0x03, 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x04, 0x00, 0x08,  // .....w.i.n.7....
/* 00e0 */ 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x07, 0x00, 0x08, 0x00, 0x67, 0x95, 0x0e,  // .w.i.n.7.....g..
/* 00f0 */ 0x5a, 0x4e, 0x56, 0x76, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x74,  // ZNVv.........I.t
/* 0100 */ 0x00, 0x68, 0x00, 0x61, 0x00, 0x71, 0x00, 0x75, 0x00, 0x65, 0x00, 0x55, 0x00, 0x6c, 0x00, 0x79,  // .h.a.q.u.e.U.l.y
/* 0110 */ 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x54, 0x00, 0xe9, 0x00, 0x6c, 0x00, 0xe9, 0x00, 0x6d,  // .s.s.e.T...l...m
/* 0120 */ 0x00, 0x61, 0x00, 0x71, 0x00, 0x75, 0x00, 0x65, 0x00, 0xbc, 0x44, 0xde, 0x52, 0x14, 0xc3, 0x55,  // .a.q.u.e..D.R..U
/* 0130 */ 0x38, 0x87, 0xa6, 0x90, 0xa0, 0x7c, 0x55, 0xef, 0xcc, 0xa3, 0x22, 0x04, 0x20, 0x01, 0x00, 0x00,  // 8....|U...". ...
/* 0140 */ 0x00, 0x89, 0xe2, 0xda, 0x48, 0x17, 0x29, 0xb5, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x59, 0x27,  // ....H.)...... Y'
/* 0150 */ 0x3f, 0x08, 0xd0, 0xc2, 0xe4, 0x75, 0x66, 0x10, 0x49, 0x7b, 0xbd, 0x8d, 0xf7,                    // ?....uf.I{...
    };


    RED_TEST_MESSAGE("+++++++++++++ Client receive NTLM Challenge -> reply with NTLM Authenticate");

    RED_CHECK(ntlm_client.authenticate_next(make_array_view(server_answer_challenge)) == make_array_view(expected_authenticate));
    RED_CHECK(credssp::State::Cont == ntlm_client.state);

    const uint8_t server_answer_pubauthkey[]{
        /* 0000 */ 0x30, 0x29, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa3, 0x22, 0x04, 0x20, 0x01, 0x00, 0x00, 0x00, 0xa2,  // 0)......". .....
        /* 0010 */ 0xe0, 0x5b, 0x50, 0x97, 0x8e, 0x99, 0x27, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xa7, 0x0b, 0xfe, 0x37,  // .[P...'........7
        /* 0020 */ 0x45, 0x3d, 0x1b, 0x05, 0x15, 0xce, 0x56, 0x0a, 0x54, 0xa1, 0xf1,                                // E=....V.T..
    };

    const uint8_t expected_tscredentials[]{
        /* 0000 */ 0x30, 0x5c, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa2, 0x55, 0x04, 0x53, 0x01, 0x00, 0x00, 0x00, 0xaf,  // 0.......U.S.....
        /* 0010 */ 0xad, 0x46, 0x2a, 0x6a, 0x9d, 0xf7, 0x88, 0x01, 0x00, 0x00, 0x00, 0xd5, 0x4f, 0xc8, 0xd0, 0xbd,  // .F*j........O...
        /* 0020 */ 0x89, 0x60, 0xe0, 0x71, 0x60, 0x31, 0x7a, 0xcc, 0xec, 0xc5, 0xbf, 0x23, 0x4b, 0xe5, 0xf9, 0xa5,  // .`.q`1z....#K...
        /* 0030 */ 0x8c, 0x21, 0x66, 0xa6, 0x78, 0xda, 0xd1, 0xbd, 0xef, 0xa4, 0xfd, 0x47, 0xa6, 0xf1, 0x56, 0xa5,  // .!f.x......G..V.
        /* 0040 */ 0xd9, 0x52, 0x72, 0x92, 0xfa, 0x41, 0xa5, 0xb4, 0x9d, 0x94, 0xfb, 0x0e, 0xe2, 0x61, 0xba, 0xfc,  // .Rr..A.......a..
        /* 0050 */ 0xd5, 0xf3, 0xa7, 0xb5, 0x33, 0xd5, 0x62, 0x8d, 0x93, 0x18, 0x54, 0x39, 0x8a, 0xe7,              // ....3.b...T9..
    };

    RED_TEST_MESSAGE("+++++++++++++ Client receive NTLM pubauthkey -> reply with NTLM TS Credentials");
    RED_CHECK(ntlm_client.authenticate_next(make_array_view(server_answer_pubauthkey)) == make_array_view(expected_tscredentials));
    RED_CHECK(credssp::State::Finish == ntlm_client.state);
    RED_TEST_MESSAGE("\n");
}


RED_AUTO_TEST_CASE(TestNlaclientv6)
{
    RED_TEST_MESSAGE("==================== TestNlaClient ===================");
    const uint8_t public_key[]{
/* 0000 */ 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcb, 0xfc, 0xaa, 0xad, 0x1d, 0x2b, 0x92, 0xa1, 0x11,  // 0...........+...
/* 0010 */ 0x30, 0x99, 0x9c, 0xd6, 0xe6, 0x57, 0x80, 0x25, 0xfc, 0xe4, 0x65, 0x33, 0xe4, 0xf4, 0x21, 0xf9,  // 0....W.%..e3..!.
/* 0020 */ 0x6a, 0x11, 0x8d, 0x6a, 0x5a, 0x70, 0x35, 0x69, 0xd5, 0x58, 0xed, 0x3d, 0x61, 0x83, 0x0e, 0x96,  // j..jZp5i.X.=a...
/* 0030 */ 0x44, 0xbc, 0x01, 0x1e, 0x0e, 0x82, 0x88, 0x58, 0x87, 0xab, 0xdd, 0x04, 0x80, 0xac, 0x57, 0x34,  // D......X......W4
/* 0040 */ 0xe7, 0xfd, 0x69, 0xf4, 0x1e, 0x5c, 0x30, 0x16, 0x69, 0x6f, 0x3e, 0x93, 0xa4, 0x5f, 0x12, 0x2d,  // ..i...0.io>.._.-
/* 0050 */ 0x21, 0xfa, 0x1c, 0xc0, 0x40, 0xf5, 0xe6, 0x49, 0xf3, 0x85, 0x28, 0x80, 0x0d, 0xef, 0xb5, 0xf0,  // !...@..I..(.....
/* 0060 */ 0x77, 0x79, 0x96, 0xef, 0xc8, 0x0a, 0x3d, 0x15, 0x8e, 0x88, 0xeb, 0x39, 0xfa, 0xfd, 0x2d, 0xce,  // wy....=....9..-.
/* 0070 */ 0x34, 0x79, 0xea, 0xa8, 0xc6, 0xc0, 0x3a, 0x38, 0xa9, 0x44, 0xe1, 0xe3, 0x36, 0xfa, 0xd7, 0x4a,  // 4y....:8.D..6..J
/* 0080 */ 0x2b, 0x2f, 0x03, 0xb5, 0x74, 0x5e, 0x35, 0x02, 0x03, 0x01, 0x00, 0x01,                          // +/..t^5.....
    };
    const auto user = "Christophe"_av;
    const auto domain = ""_av;
    const auto pass = "SecureLinux$42"_av;
    const auto host = "WIN10CGR"_av;
    ReplayRandom rand(std::vector<uint8_t>({
        0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b,
        0x61, 0x52, 0x2f, 0xa9, 0xa9, 0x36, 0x75, 0xda, 0x62, 0x19, 0x9e, 0xcd, 0x22, 0xbe, 0xb4, 0xea,
        // Random Client Nonce
        0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f, 0xac,  // ....sz.. ..{u.O.
        0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90, 0xfb,  // ...r.k..:...C...
    }));

    TimeBase time_base{MonotonicTimePoint{0x5d91e371s}, {}};

    std::string extra_message;
    rdpClientNTLM ntlm_client(user, domain, pass, host, make_array_view(public_key), false, rand, time_base, true, true);

    const uint8_t expected_negotiate[]{
/* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
/* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
/* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
/* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
    };

    RED_TEST_MESSAGE("+++++++++++++ Client sending NTLM Negotiate");

    RED_CHECK(ntlm_client.authenticate_start() == make_array_view(expected_negotiate));

    const uint8_t server_answer_challenge[]{
/* 0000 */ 0x30, 0x82, 0x01, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x05, 0xa1, 0x81, 0xfa, 0x30, 0x81, 0xf7, 0x30,  // 0...........0..0
/* 0010 */ 0x81, 0xf4, 0xa0, 0x81, 0xf1, 0x04, 0x81, 0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,  // ........NTLMSSP.
/* 0020 */ 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x8a, 0xe2,  // ........8...5...
/* 0030 */ 0x27, 0xd4, 0x5b, 0x32, 0xdb, 0xb4, 0x4d, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // '.[2..M.........
/* 0040 */ 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,  // ....V...........
/* 0050 */ 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00,  // R.D.P.-.W.I.N.D.
/* 0060 */ 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x02, 0x00,  // O.W.S.-.D.E.V...
/* 0070 */ 0x1e, 0x00, 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,  // ..R.D.P.-.W.I.N.
/* 0080 */ 0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00,  // D.O.W.S.-.D.E.V.
/* 0090 */ 0x01, 0x00, 0x1e, 0x00, 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00,  // ....R.D.P.-.W.I.
/* 00a0 */ 0x4e, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00,  // N.D.O.W.S.-.D.E.
/* 00b0 */ 0x56, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00,  // V.....r.d.p.-.w.
/* 00c0 */ 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00,  // i.n.d.o.w.s.-.d.
/* 00d0 */ 0x65, 0x00, 0x76, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00,  // e.v.....r.d.p.-.
/* 00e0 */ 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00,  // w.i.n.d.o.w.s.-.
/* 00f0 */ 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x07, 0x00, 0x08, 0x00, 0xc2, 0x66, 0xca, 0x24, 0x80, 0x77,  // d.e.v......f.$.w
/* 0100 */ 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,                                                              // ......
    };

    const uint8_t expected_authenticate[]{
/* 0000 */ 0x30, 0x82, 0x01, 0xdd, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x7c, 0x30, 0x82, 0x01,  // 0...........|0..
/* 0010 */ 0x78, 0x30, 0x82, 0x01, 0x74, 0xa0, 0x82, 0x01, 0x70, 0x04, 0x82, 0x01, 0x6c, 0x4e, 0x54, 0x4c,  // x0..t...p...lNTL
/* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
/* 0030 */ 0x00, 0xc8, 0x00, 0xc8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00,  // .....p.......8..
/* 0040 */ 0x00, 0x14, 0x00, 0x14, 0x00, 0x38, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x4c, 0x01, 0x00,  // .....8.......L..
/* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .........5......
/* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0xed, 0x91, 0x7d, 0x53, 0xf0, 0x9d, 0x67, 0x2a, 0x68, 0x06, 0x13,  // .......}S..g*h..
/* 0070 */ 0xa0, 0xcc, 0x88, 0xec, 0x78, 0x93, 0xda, 0x97, 0x80, 0x57, 0xec, 0x8a, 0x53, 0xc4, 0x25, 0xc0,  // ....x....W..S.%.
/* 0080 */ 0x3d, 0x6b, 0x4c, 0x4a, 0x2a, 0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x40, 0xb3, 0x4b,  // =kLJ*r..b...[@.K
/* 0090 */ 0x4e, 0x55, 0xb0, 0x3f, 0xc2, 0xc8, 0x9a, 0xb1, 0x4c, 0x34, 0xdc, 0xf7, 0x1e, 0x01, 0x01, 0x00,  // NU.?....L4......
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xe3, 0x91, 0x5d, 0x72, 0x0f, 0xa1,  // .........q..]r..
/* 00b0 */ 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x52, 0x00, 0x44,  // b...[........R.D
/* 00c0 */ 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x57,  // .P.-.W.I.N.D.O.W
/* 00d0 */ 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x52,  // .S.-.D.E.V.....R
/* 00e0 */ 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x4f,  // .D.P.-.W.I.N.D.O
/* 00f0 */ 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x04, 0x00, 0x1e,  // .W.S.-.D.E.V....
/* 0100 */ 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64,  // .r.d.p.-.w.i.n.d
/* 0110 */ 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x03,  // .o.w.s.-.d.e.v..
/* 0120 */ 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e,  // ...r.d.p.-.w.i.n
/* 0130 */ 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76,  // .d.o.w.s.-.d.e.v
/* 0140 */ 0x00, 0x07, 0x00, 0x08, 0x00, 0xc2, 0x66, 0xca, 0x24, 0x80, 0x77, 0xd5, 0x01, 0x00, 0x00, 0x00,  // ......f.$.w.....
/* 0150 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74,  // .....C.h.r.i.s.t
/* 0160 */ 0x00, 0x6f, 0x00, 0x70, 0x00, 0x68, 0x00, 0x65, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31,  // .o.p.h.e.W.I.N.1
/* 0170 */ 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0x86, 0x7d, 0x99, 0x2f, 0xab, 0x9c, 0xfa,  // .0.C.G.R..}./...
/* 0180 */ 0x2a, 0xad, 0xbc, 0x0d, 0x5c, 0x44, 0xc2, 0xc3, 0x3f, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00,  // *....D..?.2.0...
/* 0190 */ 0x00, 0x6c, 0x55, 0xa4, 0x5a, 0x71, 0x5a, 0x97, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xdd,  // .lU.ZqZ.l.....:.
/* 01a0 */ 0x21, 0x36, 0x02, 0x1b, 0x93, 0x3b, 0x84, 0x95, 0x8d, 0x54, 0xfd, 0xb3, 0xa8, 0x53, 0x08, 0xc7,  // !6...;...T...S..
/* 01b0 */ 0xd5, 0x73, 0x4e, 0x5d, 0x9f, 0x88, 0x16, 0x36, 0x53, 0xed, 0x0c, 0xc6, 0x35, 0xa5, 0x22, 0x04,  // .sN]...6S...5.".
/* 01c0 */ 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f,  //  ....sz.. ..{u.O
/* 01d0 */ 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90,  // ....r.k..:...C..
/* 01e0 */ 0xfb,
    };

    RED_TEST_MESSAGE("+++++++++++++ Client receive NTLM Challenge -> reply with NTLM Authenticate");

    RED_CHECK(ntlm_client.authenticate_next(make_array_view(server_answer_challenge)) == make_array_view(expected_authenticate));
    RED_CHECK(credssp::State::Cont == ntlm_client.state);

    const uint8_t server_answer_pubauthkey[]{
/* 0000 */ 0x30, 0x39, 0xa0, 0x03, 0x02, 0x01, 0x05, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x95,  // 09......2.0.....
/* 0010 */ 0x22, 0x4f, 0x53, 0x52, 0x97, 0xb4, 0xba, 0x00, 0x00, 0x00, 0x00, 0xf5, 0x77, 0x3b, 0x1c, 0x29,  // "OSR........w;.)
/* 0020 */ 0x79, 0xa8, 0x0a, 0xbf, 0x99, 0x29, 0x16, 0xfd, 0xdb, 0x40, 0x10, 0xb6, 0x0a, 0x13, 0x2e, 0xc8,  // y....)...@......
/* 0030 */ 0x6e, 0x15, 0x82, 0x6d, 0xe3, 0x77, 0x22, 0xbe, 0x2d, 0x6a, 0xc4,                                // n..m.w".-j.
    };

    const uint8_t expected_tscredentials[]{
/* 0000 */ 0x30, 0x81, 0x86, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa2, 0x5b, 0x04, 0x59, 0x01, 0x00, 0x00, 0x00,  // 0........[.Y....
/* 0010 */ 0xef, 0x34, 0x7c, 0x32, 0xce, 0xbb, 0x55, 0xf7, 0x01, 0x00, 0x00, 0x00, 0x74, 0xab, 0x77, 0xcd,  // .4|2..U.....t.w.
/* 0020 */ 0x1f, 0x28, 0xbf, 0x3e, 0xc3, 0x1f, 0x07, 0x4f, 0x62, 0x9e, 0x2f, 0xd4, 0xef, 0x7f, 0xaf, 0x5e,  // .(.>...Ob./....^
/* 0030 */ 0x07, 0x4f, 0xee, 0x11, 0x4f, 0xbd, 0xe9, 0xc3, 0x5a, 0x67, 0x68, 0x4c, 0xf3, 0x36, 0xb3, 0xcd,  // .O..O...ZghL.6..
/* 0040 */ 0xd8, 0x1a, 0xab, 0xbc, 0x59, 0x51, 0xbb, 0x9a, 0x03, 0xdf, 0x4e, 0x2f, 0xed, 0xf7, 0xc8, 0x7c,  // ....YQ....N/...|
/* 0050 */ 0xd6, 0xf9, 0x75, 0x9d, 0x4d, 0x3b, 0x16, 0xe5, 0x6e, 0x1d, 0x9f, 0x89, 0xa3, 0x2c, 0x2e, 0x47,  // ..u.M;..n....,.G
/* 0060 */ 0x8d, 0x8c, 0xf3, 0xde, 0x42, 0xa5, 0x22, 0x04, 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14,  // ....B.". ....sz.
/* 0070 */ 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f, 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7,  // . ..{u.O....r.k.
/* 0080 */ 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90, 0xfb,                                            // .:...C...
    };

    RED_TEST_MESSAGE("+++++++++++++ Client receive NTLM pubauthkey -> reply with NTLM TS Credentials");
    RED_CHECK(ntlm_client.authenticate_next(make_array_view(server_answer_pubauthkey)) == make_array_view(expected_tscredentials));
    RED_CHECK(credssp::State::Finish == ntlm_client.state);
    RED_TEST_MESSAGE("\n");
}


// Tpdu class is used to extract one Credssp packet from stream in authentication sequence
// and afterward to commute to extraction of an RDP TPKT (PDU)
RED_AUTO_TEST_CASE(TestTpdu)
{
    RED_TEST_MESSAGE("==================== TestTpdu (extraction of full packets - Credssp or TPKT - from input stream) ===================");

    RED_TEST_PASSPOINT();
    auto client =
        // negotiate
    "\x30\x37\xa0\x03\x02\x01\x06\xa1\x30\x30\x2e\x30\x2c\xa0\x2a\x04" //07......00.0,.*. !
    "\x28\x4e\x54\x4c\x4d\x53\x53\x50\x00\x01\x00\x00\x00\xb7\x82\x08" //(NTLMSSP........ !
    "\xe2\x00\x00\x00\x00\x28\x00\x00\x00\x00\x00\x00\x00\x28\x00\x00" //.....(.......(.. !
    "\x00\x06\x01\xb1\x1d\x00\x00\x00\x0f" //......... !
        // authenticate + pubauthkey
    "\x30\x82\x01\x59\xa0\x03\x02\x01\x02\xa1\x82\x01\x2c\x30\x82\x01" //0..Y........,0.. !
    "\x28\x30\x82\x01\x24\xa0\x82\x01\x20\x04\x82\x01\x1c\x4e\x54\x4c" //(0..$... ....NTL !
    "\x4d\x53\x53\x50\x00\x03\x00\x00\x00\x18\x00\x18\x00\x58\x00\x00" //MSSP.........X.. !
    "\x00\x70\x00\x70\x00\x70\x00\x00\x00\x0e\x00\x0e\x00\xe0\x00\x00" //.p.p.p.......... !
    "\x00\x0c\x00\x0c\x00\xee\x00\x00\x00\x12\x00\x12\x00\xfa\x00\x00" //................ !
    "\x00\x10\x00\x10\x00\x0c\x01\x00\x00\x35\xa2\x88\xe2\x06\x01\xb1" //.........5...... !
    "\x1d\x00\x00\x00\x0f\x2e\x5b\xe2\x1f\x57\x20\x79\xa8\x5c\x70\x2d" //......[..W y..p- !
    "\x3d\xb6\x46\x81\x9a\x34\xbe\xb5\x6e\xce\xec\x0a\x50\x2d\x29\x63" //=.F..4..n...P-)c !
    "\x7f\xcc\x5e\xe7\x18\xb8\x6c\xda\xa6\xf0\xf6\x30\x8d\xa6\x41\xcc" //.^...l....0..A. !
    "\x7a\x52\x8e\x7a\xb3\x06\x7d\x0b\xe0\x00\xd5\xf6\x13\x01\x01\x00" //zR.z..}......... !
    "\x00\x00\x00\x00\x00\x67\x95\x0e\x5a\x4e\x56\x76\xd6\xb8\x6c\xda" //.....g..ZNVv..l. !
    "\xa6\xf0\xf6\x30\x8d\x00\x00\x00\x00\x01\x00\x08\x00\x57\x00\x49" //...0.........W.I !
    "\x00\x4e\x00\x37\x00\x02\x00\x08\x00\x57\x00\x49\x00\x4e\x00\x37" //.N.7.....W.I.N.7 !
    "\x00\x03\x00\x08\x00\x77\x00\x69\x00\x6e\x00\x37\x00\x04\x00\x08" //.....w.i.n.7.... !
    "\x00\x77\x00\x69\x00\x6e\x00\x37\x00\x07\x00\x08\x00\x67\x95\x0e" //.w.i.n.7.....g.. !
    "\x5a\x4e\x56\x76\xd6\x00\x00\x00\x00\x00\x00\x00\x00\x49\x00\x74" //ZNVv.........I.t !
    "\x00\x68\x00\x61\x00\x71\x00\x75\x00\x65\x00\x55\x00\x6c\x00\x79" //.h.a.q.u.e.U.l.y !
    "\x00\x73\x00\x73\x00\x65\x00\x54\x00\xe9\x00\x6c\x00\xe9\x00\x6d" //.s.s.e.T...l...m !
    "\x00\x61\x00\x71\x00\x75\x00\x65\x00\x44\xbc\x4d\x7a\x13\x3f\x6b" //.a.q.u.e.D.Mz.?k !
    "\x81\xdb\x1d\x2b\x7b\xbf\x1e\x18\x0f\xa3\x22\x04\x20\x01\x00\x00" //...+{.....". ... !
    "\x00\x89\xe2\xda\x48\x17\x29\xb5\x08\x00\x00\x00\x00\x20\x59\x27" //....H.)...... Y' !
    "\x3f\x08\xd0\xc2\xe4\x75\x66\x10\x49\x7b\xbd\x8d\xf7" //?....uf.I{... !]

        // ts credentials (authinfo)
/* 0000 */ "\x30\x5c\xa0\x03\x02\x01\x02\xa2\x55\x04\x53\x01\x00\x00\x00\xaf" // 0.......U.S.....
/* 0010 */ "\xad\x46\x2a\x6a\x9d\xf7\x88\x01\x00\x00\x00\xd5\x4f\xc8\xd0\xbd" // .F*j........O...
/* 0020 */ "\x89\x60\xe0\x71\x60\x31\x7a\xcc\xec\xc5\xbf\x23\x4b\xe5\xf9\xa5" // .`.q`1z....#K...
/* 0030 */ "\x8c\x21\x66\xa6\x78\xda\xd1\xbd\xef\xa4\xfd\x47\xa6\xf1\x56\xa5" // .!f.x......G..V.
/* 0040 */ "\xd9\x52\x72\x92\xfa\x41\xa5\xb4\x9d\x94\xfb\x0e\xe2\x61\xba\xfc" // .Rr..A.......a..
/* 0050 */ "\xd5\xf3\xa7\xb5\x33\xd5\x62\x8d\x93\x18\x54\x39\x8a\xe7"         // ....3.b...T9..
    ""_av
        ;

    auto server =
        // challenge
    "\x30\x81\x88\xa0\x03\x02\x01\x06\xa1\x81\x80\x30\x7e\x30\x7c\xa0" //0..........0~0|. !
    "\x7a\x04\x78\x4e\x54\x4c\x4d\x53\x53\x50\x00\x02\x00\x00\x00\x00" //z.xNTLMSSP...... !
    "\x00\x00\x00\x38\x00\x00\x00\xb7\x82\x08\xe2\xb8\x6c\xda\xa6\xf0" //...8........l... !
    "\xf6\x30\x8d\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x40\x00\x38" //.0.........@.@.8 !
    "\x00\x00\x00\x06\x01\xb1\x1d\x00\x00\x00\x0f\x01\x00\x08\x00\x57" //...............W !
    "\x00\x49\x00\x4e\x00\x37\x00\x02\x00\x08\x00\x57\x00\x49\x00\x4e" //.I.N.7.....W.I.N !
    "\x00\x37\x00\x03\x00\x08\x00\x77\x00\x69\x00\x6e\x00\x37\x00\x04" //.7.....w.i.n.7.. !
    "\x00\x08\x00\x77\x00\x69\x00\x6e\x00\x37\x00\x07\x00\x08\x00\x67" //...w.i.n.7.....g !
    "\x95\x0e\x5a\x4e\x56\x76\xd6\x00\x00\x00\x00" //..ZNVv..... !]
//         // pubauthkey
/* 0000 */ "\x30\x29\xa0\x03\x02\x01\x06\xa3\x22\x04\x20\x01\x00\x00\x00\xa2" //0)......". .....
/* 0010 */ "\xe0\x5b\x50\x97\x8e\x99\x27\x00\x00\x00\x00\xdc\xa7\x0b\xfe\x37" //.[P...'........7
/* 0020 */ "\x45\x3d\x1b\x05\x15\xce\x56\x0a\x54\xa1\xf1"                     //E=....V.T..
    ""_av
        ;

    TestTransport logtrans(client, server);
    TpduBuffer buf;
    buf.load_data(logtrans);
    RED_CHECK_EQUAL(buf.remaining(), 500);
    RED_CHECK_EQUAL(true, buf.next(TpduBuffer::CREDSSP));

    const uint8_t negotiate[]{
       0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04, //07......00.0,.*. !
       0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, //(NTLMSSP........ !
       0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, //.....(.......(.. !
       0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f                                            //......... !
    };

    RED_CHECK_EQUAL(buf.remaining(), 500);
    RED_CHECK(make_array_view(negotiate) == buf.current_pdu_buffer());

    const uint8_t challenge[]{
        0x30, 0x81, 0x88, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x81, 0x80, 0x30, 0x7e, 0x30, 0x7c, 0xa0, //0..........0~0|. !
        0x7a, 0x04, 0x78, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, //z.xNTLMSSP...... !
        0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2, 0xb8, 0x6c, 0xda, 0xa6, 0xf0, //...8........l... !
        0xf6, 0x30, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x00, 0x38, //.0.........@.@.8 !
        0x00, 0x00, 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x08, 0x00, 0x57, //...............W !
        0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00, 0x02, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, //.I.N.7.....W.I.N !
        0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x04, //.7.....w.i.n.7.. !
        0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x07, 0x00, 0x08, 0x00, 0x67, //...w.i.n.7.....g !
        0x95, 0x0e, 0x5a, 0x4e, 0x56, 0x76, 0xd6, 0x00, 0x00, 0x00, 0x00                                //..ZNVv..... !]
    };

    logtrans->send(make_array_view(challenge));

    const uint8_t authenticate[]{
        0x30, 0x82, 0x01, 0x59, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa1, 0x82, 0x01, 0x2c, 0x30, 0x82, 0x01, //0..Y........,0.. !
        0x28, 0x30, 0x82, 0x01, 0x24, 0xa0, 0x82, 0x01, 0x20, 0x04, 0x82, 0x01, 0x1c, 0x4e, 0x54, 0x4c, //(0..$... ....NTL !
        0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00, //MSSP.........X.. !
        0x00, 0x70, 0x00, 0x70, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0xe0, 0x00, 0x00, //.p.p.p.......... !
        0x00, 0x0c, 0x00, 0x0c, 0x00, 0xee, 0x00, 0x00, 0x00, 0x12, 0x00, 0x12, 0x00, 0xfa, 0x00, 0x00, //................ !
        0x00, 0x10, 0x00, 0x10, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1, //.........5...... !
        0x1d, 0x00, 0x00, 0x00, 0x0f, 0x2e, 0x5b, 0xe2, 0x1f, 0x57, 0x20, 0x79, 0xa8, 0x5c, 0x70, 0x2d, //......[..W y..p- !
        0x3d, 0xb6, 0x46, 0x81, 0x9a, 0x34, 0xbe, 0xb5, 0x6e, 0xce, 0xec, 0x0a, 0x50, 0x2d, 0x29, 0x63, //=.F..4..n...P-)c !
        0x7f, 0xcc, 0x5e, 0xe7, 0x18, 0xb8, 0x6c, 0xda, 0xa6, 0xf0, 0xf6, 0x30, 0x8d, 0xa6, 0x41, 0xcc, //.^...l....0..A. !
        0x7a, 0x52, 0x8e, 0x7a, 0xb3, 0x06, 0x7d, 0x0b, 0xe0, 0x00, 0xd5, 0xf6, 0x13, 0x01, 0x01, 0x00, //zR.z..}......... !
        0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x95, 0x0e, 0x5a, 0x4e, 0x56, 0x76, 0xd6, 0xb8, 0x6c, 0xda, //.....g..ZNVv..l. !
        0xa6, 0xf0, 0xf6, 0x30, 0x8d, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, //...0.........W.I !
        0x00, 0x4e, 0x00, 0x37, 0x00, 0x02, 0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, //.N.7.....W.I.N.7 !
        0x00, 0x03, 0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x04, 0x00, 0x08, //.....w.i.n.7.... !
        0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x07, 0x00, 0x08, 0x00, 0x67, 0x95, 0x0e, //.w.i.n.7.....g.. !
        0x5a, 0x4e, 0x56, 0x76, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x74, //ZNVv.........I.t !
        0x00, 0x68, 0x00, 0x61, 0x00, 0x71, 0x00, 0x75, 0x00, 0x65, 0x00, 0x55, 0x00, 0x6c, 0x00, 0x79, //.h.a.q.u.e.U.l.y !
        0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x54, 0x00, 0xe9, 0x00, 0x6c, 0x00, 0xe9, 0x00, 0x6d, //.s.s.e.T...l...m !
        0x00, 0x61, 0x00, 0x71, 0x00, 0x75, 0x00, 0x65, 0x00, 0x44, 0xbc, 0x4d, 0x7a, 0x13, 0x3f, 0x6b, //.a.q.u.e.D.Mz.?k !
        0x81, 0xdb, 0x1d, 0x2b, 0x7b, 0xbf, 0x1e, 0x18, 0x0f, 0xa3, 0x22, 0x04, 0x20, 0x01, 0x00, 0x00, //...+{.....". ... !
        0x00, 0x89, 0xe2, 0xda, 0x48, 0x17, 0x29, 0xb5, 0x08, 0x00, 0x00, 0x00, 0x00, 0x20, 0x59, 0x27, //....H.)...... Y' !
        0x3f, 0x08, 0xd0, 0xc2, 0xe4, 0x75, 0x66, 0x10, 0x49, 0x7b, 0xbd, 0x8d, 0xf7                    //?....uf.I{... !]
    };

    RED_CHECK_EQUAL(true, buf.next(TpduBuffer::CREDSSP));
    RED_CHECK_EQUAL(buf.remaining(), 443);
    RED_CHECK(make_array_view(authenticate) == buf.current_pdu_buffer());

    const uint8_t pubauthkey[]{
        0x30, 0x29, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa3, 0x22, 0x04, 0x20, 0x01, 0x00, 0x00, 0x00, 0xa2, //0)......". .....
        0xe0, 0x5b, 0x50, 0x97, 0x8e, 0x99, 0x27, 0x00, 0x00, 0x00, 0x00, 0xdc, 0xa7, 0x0b, 0xfe, 0x37, //.[P...'........7
        0x45, 0x3d, 0x1b, 0x05, 0x15, 0xce, 0x56, 0x0a, 0x54, 0xa1, 0xf1,                     //E=....V.T..
    };

    logtrans->send(make_array_view(pubauthkey));

    const uint8_t ts_credentials[]{
        0x30, 0x5c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0xa2, 0x55, 0x04, 0x53, 0x01, 0x00, 0x00, 0x00, 0xaf, // 0.......U.S.....
        0xad, 0x46, 0x2a, 0x6a, 0x9d, 0xf7, 0x88, 0x01, 0x00, 0x00, 0x00, 0xd5, 0x4f, 0xc8, 0xd0, 0xbd, // .F*j........O...
        0x89, 0x60, 0xe0, 0x71, 0x60, 0x31, 0x7a, 0xcc, 0xec, 0xc5, 0xbf, 0x23, 0x4b, 0xe5, 0xf9, 0xa5, // .`.q`1z....#K...
        0x8c, 0x21, 0x66, 0xa6, 0x78, 0xda, 0xd1, 0xbd, 0xef, 0xa4, 0xfd, 0x47, 0xa6, 0xf1, 0x56, 0xa5, // .!f.x......G..V.
        0xd9, 0x52, 0x72, 0x92, 0xfa, 0x41, 0xa5, 0xb4, 0x9d, 0x94, 0xfb, 0x0e, 0xe2, 0x61, 0xba, 0xfc, // .Rr..A.......a..
        0xd5, 0xf3, 0xa7, 0xb5, 0x33, 0xd5, 0x62, 0x8d, 0x93, 0x18, 0x54, 0x39, 0x8a, 0xe7              // ....3.b...T9..
    };

    RED_CHECK_EQUAL(true, buf.next(TpduBuffer::CREDSSP));
    RED_CHECK_EQUAL(buf.remaining(), 94);

    RED_CHECK(make_array_view(ts_credentials) == buf.current_pdu_buffer());
    RED_CHECK_EQUAL(false, buf.next(TpduBuffer::CREDSSP));
    RED_CHECK_EQUAL(buf.remaining(), 0);
    RED_TEST_MESSAGE("\n");
}


RED_AUTO_TEST_CASE(TestNlaserver0)
{
    RED_TEST_MESSAGE("==================== TestNlaserver0 ===================");

    ReplayRandom rand(std::vector<uint8_t>({0xab, 0xad, 0x62, 0xb1, 0xe4, 0x68, 0x0d, 0x3c}));

    TimeBase time_base{MonotonicTimePoint{0x01d5754Es}, {}};

    auto get_password_hash = [&](bytes_view user_av, bytes_view domain_av){
            RED_CHECK(user_av == "Christophe"_utf16_le);
            RED_CHECK(domain_av == ""_av);
            return std::pair<PasswordCallback,array_md4>{PasswordCallback::Ok, Md4("SecureLinux$42"_utf16_le)};
        };

    const uint8_t public_key[]{
/* 0000 */ 0x30, 0x81, 0x89, 0x02, 0x81, 0x81, 0x00, 0xcb, 0xfc, 0xaa, 0xad, 0x1d, 0x2b, 0x92, 0xa1, 0x11,  // 0...........+...
/* 0010 */ 0x30, 0x99, 0x9c, 0xd6, 0xe6, 0x57, 0x80, 0x25, 0xfc, 0xe4, 0x65, 0x33, 0xe4, 0xf4, 0x21, 0xf9,  // 0....W.%..e3..!.
/* 0020 */ 0x6a, 0x11, 0x8d, 0x6a, 0x5a, 0x70, 0x35, 0x69, 0xd5, 0x58, 0xed, 0x3d, 0x61, 0x83, 0x0e, 0x96,  // j..jZp5i.X.=a...
/* 0030 */ 0x44, 0xbc, 0x01, 0x1e, 0x0e, 0x82, 0x88, 0x58, 0x87, 0xab, 0xdd, 0x04, 0x80, 0xac, 0x57, 0x34,  // D......X......W4
/* 0040 */ 0xe7, 0xfd, 0x69, 0xf4, 0x1e, 0x5c, 0x30, 0x16, 0x69, 0x6f, 0x3e, 0x93, 0xa4, 0x5f, 0x12, 0x2d,  // ..i...0.io>.._.-
/* 0050 */ 0x21, 0xfa, 0x1c, 0xc0, 0x40, 0xf5, 0xe6, 0x49, 0xf3, 0x85, 0x28, 0x80, 0x0d, 0xef, 0xb5, 0xf0,  // !...@..I..(.....
/* 0060 */ 0x77, 0x79, 0x96, 0xef, 0xc8, 0x0a, 0x3d, 0x15, 0x8e, 0x88, 0xeb, 0x39, 0xfa, 0xfd, 0x2d, 0xce,  // wy....=....9..-.
/* 0070 */ 0x34, 0x79, 0xea, 0xa8, 0xc6, 0xc0, 0x3a, 0x38, 0xa9, 0x44, 0xe1, 0xe3, 0x36, 0xfa, 0xd7, 0x4a,  // 4y....:8.D..6..J
/* 0080 */ 0x2b, 0x2f, 0x03, 0xb5, 0x74, 0x5e, 0x35, 0x02, 0x03, 0x01, 0x00, 0x01,                          // +/..t^5.....
    };
    NtlmServer ntlm_server(false, true, "RDP-WINDOWS-DEV"_av,"RDP-WINDOWS-DEV"_av,"RDP-WINDOWS-DEV"_av,"rdp-windows-dev"_av,"rdp-windows-dev"_av,"rdp-windows-dev"_av,
                           make_array_view(public_key),
                           make_array_view({MsvAvNbDomainName,MsvAvNbComputerName,MsvAvDnsDomainName,MsvAvDnsComputerName,MsvAvTimestamp}),
                           rand, time_base, 5,
                           NtlmVersion{WINDOWS_MAJOR_VERSION_6, WINDOWS_MINOR_VERSION_1, 7601, NTLMSSP_REVISION_W2K3},
                           false, true, true);

    const uint8_t negotiate[]{
/* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
/* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
/* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
/* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
    };

    const uint8_t answer_challenge[]{
/* 0000 */ 0x30, 0x82, 0x01, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x05, 0xa1, 0x81, 0xfa, 0x30, 0x81, 0xf7, 0x30,  // 0...........0..0
/* 0010 */ 0x81, 0xf4, 0xa0, 0x81, 0xf1, 0x04, 0x81, 0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,  // ........NTLMSSP.
/* 0020 */ 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00, 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x8a, 0xe2,  // ........8...5...
/* 0030 */ 0xab, 0xad, 0x62, 0xb1, 0xe4, 0x68, 0x0d, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..b..h.<........
/* 0040 */ 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,  // ....V...........
/* 0050 */ 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00,  // R.D.P.-.W.I.N.D.
/* 0060 */ 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x02, 0x00,  // O.W.S.-.D.E.V...
/* 0070 */ 0x1e, 0x00, 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00,  // ..R.D.P.-.W.I.N.
/* 0080 */ 0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00,  // D.O.W.S.-.D.E.V.
/* 0090 */ 0x01, 0x00, 0x1e, 0x00, 0x52, 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00,  // ....R.D.P.-.W.I.
/* 00a0 */ 0x4e, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00,  // N.D.O.W.S.-.D.E.
/* 00b0 */ 0x56, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00,  // V.....r.d.p.-.w.
/* 00c0 */ 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00,  // i.n.d.o.w.s.-.d.
/* 00d0 */ 0x65, 0x00, 0x76, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00,  // e.v.....r.d.p.-.
/* 00e0 */ 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00,  // w.i.n.d.o.w.s.-.
/* 00f0 */ 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x75,  // d.e.v.........Nu
/* 0100 */ 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,                                                              // ......
    };


    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Negotiate --> answer with NTLM Challenge");

    RED_CHECK(make_array_view(answer_challenge) == ntlm_server.authenticate_next(make_array_view(negotiate)));
    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);


    const uint8_t authenticate[]{
/* 0000 */ 0x30, 0x82, 0x01, 0xdd, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x7c, 0x30, 0x82, 0x01,  // 0...........|0..
/* 0010 */ 0x78, 0x30, 0x82, 0x01, 0x74, 0xa0, 0x82, 0x01, 0x70, 0x04, 0x82, 0x01, 0x6c, 0x4e, 0x54, 0x4c,  // x0..t...p...lNTL
/* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
/* 0030 */ 0x00, 0xc8, 0x00, 0xc8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00,  // .....p.......8..
/* 0040 */ 0x00, 0x14, 0x00, 0x14, 0x00, 0x38, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x4c, 0x01, 0x00,  // .....8.......L..
/* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .........5......
/* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x0d, 0x87, 0x43, 0x44, 0xf6, 0xe3, 0x79, 0x6e, 0xa4, 0xc3, 0x8f,  // .......CD..yn...
/* 0070 */ 0xe8, 0x54, 0x85, 0x3d, 0x01, 0x27, 0x88, 0xb5, 0xec, 0x4a, 0xe5, 0x4b, 0xee, 0x19, 0x45, 0x30,  // .T.=.'...J.K..E0
/* 0080 */ 0xce, 0x72, 0x8c, 0x11, 0x7b, 0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x1e, 0xe6, 0x9e,  // .r..{r..b...[...
/* 0090 */ 0x62, 0xd5, 0x76, 0x1c, 0x3e, 0xcb, 0x28, 0xac, 0x5a, 0x2c, 0xc9, 0xea, 0x52, 0x01, 0x01, 0x00,  // b.v.>.(.Z,..R...
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xe3, 0x91, 0x5d, 0x72, 0x0f, 0xa1,  // .........q..]r..
/* 00b0 */ 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00, 0x52, 0x00, 0x44,  // b...[........R.D
/* 00c0 */ 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x4f, 0x00, 0x57,  // .P.-.W.I.N.D.O.W
/* 00d0 */ 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x01, 0x00, 0x1e, 0x00, 0x52,  // .S.-.D.E.V.....R
/* 00e0 */ 0x00, 0x44, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x44, 0x00, 0x4f,  // .D.P.-.W.I.N.D.O
/* 00f0 */ 0x00, 0x57, 0x00, 0x53, 0x00, 0x2d, 0x00, 0x44, 0x00, 0x45, 0x00, 0x56, 0x00, 0x04, 0x00, 0x1e,  // .W.S.-.D.E.V....
/* 0100 */ 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64,  // .r.d.p.-.w.i.n.d
/* 0110 */ 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76, 0x00, 0x03,  // .o.w.s.-.d.e.v..
/* 0120 */ 0x00, 0x1e, 0x00, 0x72, 0x00, 0x64, 0x00, 0x70, 0x00, 0x2d, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e,  // ...r.d.p.-.w.i.n
/* 0130 */ 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00, 0x73, 0x00, 0x2d, 0x00, 0x64, 0x00, 0x65, 0x00, 0x76,  // .d.o.w.s.-.d.e.v
/* 0140 */ 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x75, 0xd5, 0x01, 0x00, 0x00, 0x00,  // .........Nu.....
/* 0150 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68, 0x00, 0x72, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74,  // .....C.h.r.i.s.t
/* 0160 */ 0x00, 0x6f, 0x00, 0x70, 0x00, 0x68, 0x00, 0x65, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31,  // .o.p.h.e.W.I.N.1
/* 0170 */ 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0xcf, 0xc5, 0xf9, 0x2b, 0xb4, 0xbc, 0x1b,  // .0.C.G.R....+...
/* 0180 */ 0x87, 0xc0, 0x57, 0xa4, 0x80, 0x21, 0x0c, 0x6a, 0xc4, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00,  // ..W..!.j..2.0...
/* 0190 */ 0x00, 0x6c, 0x55, 0xa4, 0x5a, 0x71, 0x5a, 0x97, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0xdd,  // .lU.ZqZ.l.....:.
/* 01a0 */ 0x21, 0x36, 0x02, 0x1b, 0x93, 0x3b, 0x84, 0x95, 0x8d, 0x54, 0xfd, 0xb3, 0xa8, 0x53, 0x08, 0xc7,  // !6...;...T...S..
/* 01b0 */ 0xd5, 0x73, 0x4e, 0x5d, 0x9f, 0x88, 0x16, 0x36, 0x53, 0xed, 0x0c, 0xc6, 0x35, 0xa5, 0x22, 0x04,  // .sN]...6S...5.".
/* 01c0 */ 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f,  //  ....sz.. ..{u.O
/* 01d0 */ 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90,  // ....r.k..:...C..
/* 01e0 */ 0xfb,
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Authenticate --> ask for user password MD4");
    RED_CHECK(""_av == ntlm_server.authenticate_next(make_array_view(authenticate)));

    auto [password_res, password_hash] = get_password_hash(ntlm_server.authenticate.UserName.buffer, ntlm_server.authenticate.DomainName.buffer);
    ntlm_server.set_password_hash(password_res, password_hash);

    const uint8_t pubauthkey[]{
/* 0000 */ 0x30, 0x39, 0xa0, 0x03, 0x02, 0x01, 0x05, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x95,  // 09......2.0.....
/* 0010 */ 0x22, 0x4f, 0x53, 0x52, 0x97, 0xb4, 0xba, 0x00, 0x00, 0x00, 0x00, 0xf5, 0x77, 0x3b, 0x1c, 0x29,  // "OSR........w;.)
/* 0020 */ 0x79, 0xa8, 0x0a, 0xbf, 0x99, 0x29, 0x16, 0xfd, 0xdb, 0x40, 0x10, 0xb6, 0x0a, 0x13, 0x2e, 0xc8,  // y....)...@......
/* 0030 */ 0x6e, 0x15, 0x82, 0x6d, 0xe3, 0x77, 0x22, 0xbe, 0x2d, 0x6a, 0xc4,                                // n..m.w".-j.
    };

//    RED_CHECK(false);
    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Authenticate --> answer with NTLM Pubauthkey");

    RED_CHECK(make_array_view(pubauthkey) == ntlm_server.authenticate_next({}));
//
//    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);
//
//    std::vector<uint8_t>  ts_credentials{
//    };

//    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM TS Credentials --> NTLM Finished");
//
//    // Recv ts_credential, -> finished
//    RED_CHECK_EQUAL(ntlm_server.authenticate_next(ts_credentials).size(), 0);
//    RED_CHECK_EQUAL(ntlm_server.state, credssp::State::Finish);
//    RED_TEST_MESSAGE("\n");
}


RED_AUTO_TEST_CASE(TestNlaserver1)
{
    RED_TEST_MESSAGE("==================== TestNlaserver1 ===================");

//Time Stamp (1569948384, 939173)
//Client Random Challenge {0xaa, 0x52, 0xcc, 0x44, 0xe5, 0x73, 0x04, 0xb5}
//NTLMContextClient Compute response: SessionBaseKey
//using /dev/urandom as random source
//Random ExportedSessionKey
///* 0000 */ 0xd5, 0x3d, 0xb7, 0x01, 0x08, 0x23, 0x6c, 0x84, 0x00, 0xf0, 0xe6, 0x34, 0x6a, 0xf6, 0xc7, 0x49,  // .=...#l....4j..I
//Random Client Nonce
///* 0000 */ 0x4c, 0x55, 0x31, 0xef, 0xf8, 0xd7, 0xeb, 0x7b, 0xd5, 0x1e, 0xe8, 0x58, 0x3f, 0xc6, 0x7b, 0x69,  // LU1....{...X?.{i
///* 0010 */ 0x9f, 0x31, 0xbb, 0xc8, 0xea, 0x3c, 0x9c, 0x92, 0x9a, 0xe2, 0x6b, 0x70, 0xaa, 0xb8, 0x0d, 0x3e,  // .1...<....kp...>

    ReplayRandom rand(std::vector<uint8_t>({0xab, 0xb8, 0x4d, 0x26, 0xe0, 0x87, 0x11, 0x87}));

    TimeBase time_base{MonotonicTimePoint{0x01D57877s}, {}};

    auto get_password_hash = [&](bytes_view user_av, bytes_view domain_av) -> std::pair<PasswordCallback,array_md4>{
            RED_CHECK(user_av == "Administrator@proxykdc.lab"_utf16_le);
            RED_CHECK(domain_av == ""_av);
            return std::pair<PasswordCallback,array_md4>{PasswordCallback::Ok,Md4("SecureLinux!3"_utf16_le)};
        };

    const uint8_t public_key[]{
/* 0000 */ 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xdb, 0xf2, 0x21, 0x0a, 0x32, 0xac, 0x86,  // 0..........!.2..
/* 0010 */ 0x04, 0x88, 0xf1, 0xcc, 0x21, 0xc6, 0x89, 0x66, 0x4b, 0x88, 0xa5, 0xac, 0x84, 0xc0, 0xae, 0x52,  // ....!..fK......R
/* 0020 */ 0x6d, 0xfb, 0x4c, 0xf8, 0x3d, 0x5e, 0x51, 0xd5, 0x20, 0x8a, 0xc4, 0x6f, 0xe6, 0x68, 0x0e, 0x1b,  // m.L.=^Q. ..o.h..
/* 0030 */ 0x1e, 0x19, 0xbd, 0x95, 0x23, 0x5f, 0x67, 0x65, 0x6a, 0x05, 0xe8, 0x19, 0xc6, 0x14, 0x52, 0x88,  // ....#_gej.....R.
/* 0040 */ 0x3b, 0xde, 0x32, 0xbd, 0xd6, 0x85, 0x6a, 0x12, 0xf1, 0xbc, 0xd5, 0x65, 0xfc, 0x75, 0x04, 0xe2,  // ;.2...j....e.u..
/* 0050 */ 0x78, 0x4a, 0x6f, 0x42, 0xd7, 0x2d, 0x5d, 0xb2, 0x38, 0x50, 0xac, 0xd4, 0x1e, 0x00, 0xf1, 0x0c,  // xJoB.-].8P......
/* 0060 */ 0x5d, 0x4d, 0xc1, 0x95, 0x55, 0x17, 0x5a, 0xa4, 0x6a, 0xc3, 0x48, 0x93, 0x56, 0x3b, 0x08, 0x8c,  // ]M..U.Z.j.H.V;..
/* 0070 */ 0x0a, 0x87, 0x12, 0x57, 0x97, 0x23, 0x42, 0x1d, 0x9a, 0xb8, 0x3f, 0xd8, 0x68, 0xb8, 0xa8, 0xba,  // ...W.#B...?.h...
/* 0080 */ 0x16, 0x84, 0x38, 0xa6, 0xee, 0x88, 0x46, 0xfd, 0x0c, 0x7a, 0xdd, 0xcb, 0x72, 0x02, 0x6c, 0x84,  // ..8...F..z..r.l.
/* 0090 */ 0xfa, 0xef, 0xb6, 0x13, 0x8a, 0x6e, 0xf8, 0x71, 0x08, 0x39, 0xb1, 0x87, 0x08, 0xa0, 0xa7, 0x47,  // .....n.q.9.....G
/* 00a0 */ 0x3e, 0x40, 0x0d, 0x73, 0xb6, 0xc9, 0x8c, 0xe1, 0x76, 0xff, 0xb4, 0xa0, 0x18, 0x22, 0x3f, 0x32,  // >@.s....v...."?2
/* 00b0 */ 0x5d, 0xcc, 0xc7, 0x47, 0x4c, 0x15, 0x65, 0x48, 0x1f, 0x6d, 0xdc, 0x57, 0xbe, 0xaf, 0x71, 0xb6,  // ]..GL.eH.m.W..q.
/* 00c0 */ 0x4e, 0xa5, 0x63, 0xff, 0x04, 0xc7, 0x57, 0x3d, 0x83, 0x53, 0xd9, 0xe3, 0x73, 0x30, 0xcb, 0x08,  // N.c...W=.S..s0..
/* 00d0 */ 0xec, 0x7e, 0x98, 0x1d, 0xb2, 0x8a, 0xe6, 0xf2, 0x97, 0xbc, 0xfd, 0x5f, 0xa7, 0xf0, 0xd4, 0x10,  // .~........._....
/* 00e0 */ 0x49, 0xbb, 0x7d, 0xfb, 0xfe, 0x52, 0xd0, 0x68, 0x41, 0x61, 0xf4, 0x82, 0xf4, 0x18, 0x4a, 0x05,  // I.}..R.hAa....J.
/* 00f0 */ 0xa4, 0xe4, 0xed, 0x69, 0x60, 0x27, 0x77, 0x97, 0x20, 0xa0, 0x22, 0x85, 0x8c, 0x91, 0x2e, 0xde,  // ...i`'w. .".....
/* 0100 */ 0x0c, 0xde, 0xba, 0xca, 0x0b, 0x9e, 0xba, 0x22, 0x6b, 0x02, 0x03, 0x01, 0x00, 0x01,              // ......."k.....
    };
    NtlmServer ntlm_server(true, false, "PROXYKDC"_av,"WINKDC2012"_av,"PROXYKDC"_av,"WINKDC2012.proxykdc.lab"_av,"proxykdc.lab"_av,"proxykdc.lab"_av,
                           make_array_view(public_key),
//                           {MsvAvNbDomainName, MsvAvDnsDomainName, MsvAvNbComputerName,MsvAvDnsComputerName,MsvAvTimestamp},
                           make_array_view({MsvAvNbDomainName, MsvAvNbComputerName, MsvAvDnsDomainName,MsvAvDnsComputerName,MsvAvTimestamp}),
                           rand, time_base, 6,
                           NtlmVersion{WINDOWS_MAJOR_VERSION_6, WINDOWS_MINOR_VERSION_3, 9600, NTLMSSP_REVISION_W2K3},
                           false, true, true);

    const uint8_t negotiate[]{
/* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
/* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
/* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
/* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
    };

//     Recv negotiate, send challenge
    const uint8_t answer_challenge[]{
/* 0000 */ 0x30, 0x81, 0xe6, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x81, 0xde, 0x30, 0x81, 0xdb, 0x30, 0x81,  // 0..........0..0.
/* 0010 */ 0xd8, 0xa0, 0x81, 0xd5, 0x04, 0x81, 0xd2, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02,  // .......NTLMSSP..
/* 0020 */ 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x89, 0xe2, 0xab,  // .......8...5....
/* 0030 */ 0xb8, 0x4d, 0x26, 0xe0, 0x87, 0x11, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a,  // .M&.............
/* 0040 */ 0x00, 0x8a, 0x00, 0x48, 0x00, 0x00, 0x00, 0x06, 0x03, 0x80, 0x25, 0x00, 0x00, 0x00, 0x0f, 0x50,  // ...H......%....P
/* 0050 */ 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x02,  // .R.O.X.Y.K.D.C..
/* 0060 */ 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44,  // ...P.R.O.X.Y.K.D
/* 0070 */ 0x00, 0x43, 0x00, 0x01, 0x00, 0x14, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44,  // .C.....W.I.N.K.D
/* 0080 */ 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70,  // .C.2.0.1.2.....p
/* 0090 */ 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e,  // .r.o.x.y.k.d.c..
/* 00a0 */ 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e,  // .l.a.b.....W.I.N
/* 00b0 */ 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e,  // .K.D.C.2.0.1.2..
/* 00c0 */ 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63,  // .p.r.o.x.y.k.d.c
/* 00d0 */ 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,  // ...l.a.b........
/* 00e0 */ 0x00, 0x77, 0x78, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,                                            // .wx......
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Negotiate --> answer with NTLM Challenge");

    RED_CHECK(make_array_view(answer_challenge) == ntlm_server.authenticate_next(make_array_view(negotiate)));
    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);

    const uint8_t authenticate[]{
/* 0000 */ 0x30, 0x82, 0x01, 0xef, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x8e, 0x30, 0x82, 0x01,  // 0............0..
/* 0010 */ 0x8a, 0x30, 0x82, 0x01, 0x86, 0xa0, 0x82, 0x01, 0x82, 0x04, 0x82, 0x01, 0x7e, 0x4e, 0x54, 0x4c,  // .0..........~NTL
/* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
/* 0030 */ 0x00, 0xba, 0x00, 0xba, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00,  // .....p.......*..
/* 0040 */ 0x00, 0x34, 0x00, 0x34, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x5e, 0x01, 0x00,  // .4.4.*.......^..
/* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .....n...5......
/* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x64, 0x42, 0x06, 0xc6, 0x88, 0x6a, 0x82, 0x20, 0x64, 0xb9, 0xaa,  // .....dB...j. d..
/* 0070 */ 0x24, 0x90, 0xd0, 0xc0, 0xba, 0xbc, 0xb9, 0x17, 0x1f, 0x63, 0x55, 0xf9, 0x9e, 0xdf, 0xb0, 0xd4,  // $........cU.....
/* 0080 */ 0x65, 0x95, 0xdd, 0x3d, 0xae, 0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x64, 0x93, 0xe5,  // e..=.r..b...[d..
/* 0090 */ 0xa3, 0x33, 0x96, 0x55, 0x58, 0x21, 0x15, 0xa8, 0xe3, 0x9c, 0x59, 0x2e, 0x13, 0x01, 0x01, 0x00,  // .3.UX!....Y.....
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xe3, 0x91, 0x5d, 0x72, 0x0f, 0xa1,  // .........q..]r..
/* 00b0 */ 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52,  // b...[........P.R
/* 00c0 */ 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14,  // .O.X.Y.K.D.C....
/* 00d0 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30,  // .W.I.N.K.D.C.2.0
/* 00e0 */ 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78,  // .1.2.....p.r.o.x
/* 00f0 */ 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62,  // .y.k.d.c...l.a.b
/* 0100 */ 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43,  // .....W.I.N.K.D.C
/* 0110 */ 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f,  // .2.0.1.2...p.r.o
/* 0120 */ 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61,  // .x.y.k.d.c...l.a
/* 0130 */ 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x78, 0xd5, 0x01, 0x00,  // .b.........wx...
/* 0140 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00, 0x64, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e,  // .......A.d.m.i.n
/* 0150 */ 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72,  // .i.s.t.r.a.t.o.r
/* 0160 */ 0x00, 0x40, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64,  // .@.p.r.o.x.y.k.d
/* 0170 */ 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e,  // .c...l.a.b.W.I.N
/* 0180 */ 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0x75, 0x48, 0x67, 0xde, 0x15,  // .1.0.C.G.R.uHg..
/* 0190 */ 0x98, 0x52, 0x9b, 0x0c, 0x88, 0x23, 0xaa, 0xc9, 0x88, 0xf6, 0xca, 0xa3, 0x32, 0x04, 0x30, 0x01,  // .R...#......2.0.
/* 01a0 */ 0x00, 0x00, 0x00, 0x19, 0x62, 0x1a, 0xea, 0x51, 0x9a, 0x7a, 0xca, 0x00, 0x00, 0x00, 0x00, 0xa3,  // ....b..Q.z......
/* 01b0 */ 0x1d, 0xae, 0x64, 0x6c, 0x07, 0x48, 0x0c, 0x15, 0xb3, 0xdd, 0x7e, 0xb6, 0x96, 0xa6, 0xcd, 0x0e,  // ..dl.H....~.....
/* 01c0 */ 0x3c, 0x5e, 0xf5, 0x7b, 0x87, 0x9c, 0xad, 0x49, 0x3f, 0x00, 0x34, 0x9f, 0x66, 0x5f, 0x8c, 0xa5,  // <^.{...I?.4.f_..
/* 01d0 */ 0x22, 0x04, 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75,  // ". ....sz.. ..{u
/* 01e0 */ 0x9d, 0x4f, 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43,  // .O....r.k..:...C
/* 01f0 */ 0xee, 0x90, 0xfb,                                                                                // ...
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Authenticate --> ask password hash");
    RED_CHECK(""_av == ntlm_server.authenticate_next(make_array_view(authenticate)));

    auto [password_res, password_hash] = get_password_hash(ntlm_server.authenticate.UserName.buffer, ntlm_server.authenticate.DomainName.buffer);
    ntlm_server.set_password_hash(password_res, password_hash);

    const uint8_t pubauthkey[]{
/* 0000 */ 0x30, 0x39, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x69,  // 09......2.0....i
/* 0010 */ 0xe1, 0x70, 0x51, 0x0f, 0x66, 0xb6, 0x98, 0x00, 0x00, 0x00, 0x00, 0x44, 0x67, 0xca, 0x80, 0xf0,  // .pQ.f......Dg...
/* 0020 */ 0xe7, 0xd8, 0xfe, 0x59, 0xc9, 0x9f, 0xa0, 0x03, 0xd9, 0x33, 0x72, 0x83, 0x6d, 0x91, 0x1d, 0x1d,  // ...Y.....3r.m...
/* 0030 */ 0x8e, 0x80, 0xd4, 0x4f, 0xb6, 0x01, 0xb8, 0xd6, 0x74, 0xa8, 0x7f,                                // ...O....t..
    };

    RED_TEST_MESSAGE("+++++++++++++ Continue NTLM Authenticate response --> answer with NTLM Pubauthkey");
    RED_CHECK(make_array_view(pubauthkey) == ntlm_server.authenticate_next({}));

    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);

    const uint8_t ts_credentials[]{
/* 0000 */ 0x30, 0x81, 0xa4, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa2, 0x79, 0x04, 0x77, 0x01, 0x00, 0x00, 0x00,  // 0........y.w....
/* 0010 */ 0x46, 0xad, 0x44, 0xe7, 0xfe, 0x66, 0xaf, 0xf6, 0x01, 0x00, 0x00, 0x00, 0x74, 0x89, 0x77, 0xcd,  // F.D..f......t.w.
/* 0020 */ 0x1f, 0x28, 0xbf, 0x3e, 0xdd, 0x1f, 0x65, 0x4f, 0x04, 0x9e, 0x2f, 0xd4, 0xef, 0x7f, 0x8f, 0x5e,  // .(.>..eO../....^
/* 0030 */ 0x27, 0x4d, 0xee, 0x1d, 0x4f, 0xa2, 0xe9, 0xc3, 0x5a, 0x7a, 0x68, 0x51, 0xf3, 0x2a, 0xb3, 0xc9,  // 'M..O...ZzhQ.*..
/* 0040 */ 0xd8, 0x00, 0xab, 0xb8, 0x59, 0x87, 0xa5, 0xf1, 0x1f, 0xfe, 0x4e, 0x0a, 0xed, 0xe4, 0xc8, 0x7b,  // ....Y.....N....{
/* 0050 */ 0xd6, 0xe4, 0x75, 0x80, 0x4d, 0x0e, 0x16, 0xe7, 0x6e, 0x17, 0x9f, 0x9f, 0xa3, 0x7a, 0x2e, 0x0f,  // ..u.M...n....z..
/* 0060 */ 0x8d, 0xd9, 0xf3, 0x8e, 0x42, 0xca, 0xfc, 0xbc, 0x31, 0x6a, 0xe7, 0x35, 0xe7, 0x16, 0x2a, 0x0f,  // ....B...1j.5..*.
/* 0070 */ 0x25, 0x8e, 0xbc, 0xb5, 0x98, 0xdd, 0x03, 0xf2, 0x89, 0x32, 0x29, 0x46, 0x64, 0x38, 0x2a, 0xcb,  // %........2)Fd8*.
/* 0080 */ 0x6d, 0x07, 0x13, 0xa5, 0x22, 0x04, 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20,  // m...". ....sz..
/* 0090 */ 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f, 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a,  // ..{u.O....r.k..:
/* 00a0 */ 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90, 0xfb,                                                        // ...C...
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM TS Credentials --> NTLM Finished");

    // Recv ts_credential, -> finished
    RED_CHECK_EQUAL(ntlm_server.authenticate_next(make_array_view(ts_credentials)), ""_av);
    RED_CHECK_EQUAL(ntlm_server.state, credssp::State::Finish);
    RED_TEST_MESSAGE("\n");
}


RED_AUTO_TEST_CASE(TestNlaserver2)
{
    RED_TEST_MESSAGE("==================== TestNlaserver2 ===================");

//Time Stamp (1569948639, 973866)
//Client Random Challenge {0x61, 0xdf, 0x4c, 0x0d, 0xb7, 0x66, 0xd8, 0xc0}
//NTLMContextClient Compute response: SessionBaseKey
//Random ExportedSessionKey
///* 0000 */ 0x5c, 0xb8, 0x8b, 0x4f, 0x44, 0x0a, 0x23, 0xda, 0x7a, 0xd1, 0x98, 0x5b, 0x50, 0xc3, 0x93, 0x6b,  // ...OD.#.z..[P..k
//Random Client Nonce
///* 0000 */ 0x8d, 0x78, 0x8c, 0x8c, 0xfe, 0x94, 0x74, 0x5c, 0xb2, 0xc2, 0xd6, 0xed, 0x8b, 0x6d, 0x21, 0x83,  // .x....t......m!.
///* 0010 */ 0x79, 0x43, 0x0f, 0x1c, 0x87, 0xcf, 0xd2, 0xf5, 0xbc, 0x9e, 0xef, 0x9f, 0xd9, 0x11, 0xf1, 0xf0,  // yC..............
    ReplayRandom rand(std::vector<uint8_t>({0x72, 0xE9, 0x0E, 0x66, 0x83, 0x2E, 0x12, 0xC7}));

    TimeBase time_base{MonotonicTimePoint{0x01D57878s}, {}};

    std::function<std::pair<PasswordCallback,array_md4>(bytes_view,bytes_view)>
        get_password_hash =
        [&](bytes_view user_av, bytes_view domain_av) -> std::pair<PasswordCallback,array_md4> {
            RED_CHECK(user_av == "hercule"_utf16_le);
            RED_CHECK(domain_av == "PROXYKDC"_utf16_le);
            return std::pair<PasswordCallback,array_md4>{PasswordCallback::Ok,::Md4("SecureLinux$42"_utf16_le)};
        };

    const uint8_t public_key[]{
/* 0000 */ 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xaa, 0x2c, 0x3b, 0x36, 0x19, 0x68, 0x7c,  // 0.........,;6.h|
/* 0010 */ 0x94, 0x11, 0x5f, 0x5f, 0xba, 0x50, 0x49, 0xbe, 0xf1, 0x12, 0x72, 0x8d, 0x2e, 0x60, 0xfb, 0x26,  // ..__.PI...r..`.&
/* 0020 */ 0x4d, 0x66, 0x30, 0xf6, 0xcd, 0xf1, 0x69, 0xd0, 0x0f, 0x53, 0xf5, 0x21, 0x9b, 0x92, 0xf0, 0xc5,  // Mf0...i..S.!....
/* 0030 */ 0xdf, 0x27, 0x3d, 0x22, 0x22, 0x9f, 0xc5, 0x94, 0xf5, 0xdd, 0xfc, 0xb6, 0x0b, 0x55, 0xb7, 0xb8,  // .'=""........U..
/* 0040 */ 0x91, 0xb1, 0x99, 0x96, 0xa1, 0xd2, 0x37, 0x8e, 0xf6, 0xed, 0x01, 0x61, 0x06, 0x95, 0x34, 0xd4,  // ......7....a..4.
/* 0050 */ 0x3f, 0xb2, 0x0c, 0xf0, 0xe1, 0x03, 0xfb, 0xc9, 0x6f, 0x08, 0x8d, 0x4b, 0xbb, 0x3c, 0x65, 0x9b,  // ?.......o..K.<e.
/* 0060 */ 0xa7, 0x2d, 0x4d, 0x7f, 0xd6, 0xab, 0x05, 0xd0, 0xa6, 0xbf, 0xa7, 0x17, 0x2b, 0x57, 0xef, 0xc8,  // .-M.........+W..
/* 0070 */ 0xe3, 0x3d, 0xc1, 0x6a, 0xf8, 0x0b, 0x90, 0x9f, 0x87, 0xfa, 0x37, 0x2e, 0xf1, 0x7e, 0x80, 0xb3,  // .=.j......7..~..
/* 0080 */ 0xc5, 0x39, 0x8f, 0x72, 0x53, 0x3d, 0xda, 0x63, 0x6a, 0x8a, 0x81, 0x1a, 0xac, 0x04, 0x4d, 0xd7,  // .9.rS=.cj.....M.
/* 0090 */ 0x51, 0x23, 0x25, 0x52, 0x5b, 0xbb, 0x7c, 0x21, 0x72, 0x7c, 0xea, 0xa2, 0xf6, 0xcd, 0xc2, 0xaa,  // Q#%R[.|!r|......
/* 00a0 */ 0x0d, 0x68, 0x77, 0xe1, 0x9f, 0x27, 0x99, 0x27, 0x7e, 0x19, 0x07, 0x71, 0x0e, 0x2c, 0xa8, 0x4a,  // .hw..'.'~..q.,.J
/* 00b0 */ 0xc7, 0x30, 0x36, 0xc5, 0x14, 0xc1, 0xcb, 0xf3, 0x4f, 0xa6, 0xd8, 0x90, 0x3b, 0x7d, 0xe1, 0x72,  // .06.....O...;}.r
/* 00c0 */ 0x4c, 0xda, 0x51, 0x75, 0x04, 0xe2, 0xd7, 0x3b, 0xfb, 0xb0, 0x6f, 0xc9, 0xd0, 0x2a, 0xb8, 0xcc,  // L.Qu...;..o..*..
/* 00d0 */ 0xc6, 0x1f, 0x7a, 0xff, 0x22, 0x13, 0x81, 0x73, 0x27, 0x4d, 0x47, 0xbf, 0xbf, 0x4d, 0xa4, 0x19,  // ..z."..s'MG..M..
/* 00e0 */ 0x4c, 0x2d, 0xa8, 0x5b, 0xd9, 0x4f, 0x9f, 0xe6, 0xa5, 0x57, 0xe9, 0x00, 0xc9, 0xd4, 0xc9, 0xcd,  // L-.[.O...W......
/* 00f0 */ 0xd7, 0x14, 0x2a, 0xcc, 0x21, 0x38, 0x3f, 0xfe, 0x40, 0xd7, 0x75, 0xf2, 0xef, 0x0d, 0x5d, 0x6e,  // ..*.!8?.@.u...]n
/* 0100 */ 0x6b, 0xa8, 0xe6, 0x10, 0x89, 0x24, 0x6b, 0xdc, 0x61, 0x02, 0x03, 0x01, 0x00, 0x01,              // k....$k.a.....
    };


    NtlmServer ntlm_server(true, false, "PROXYKDC"_av, "WIN10CGR"_av, "PROXYKDC"_av, "WIN10CGR.proxykdc.lab"_av, "proxykdc.lab"_av, "proxykdc.lab"_av,
                           make_array_view(public_key),
                           make_array_view({MsvAvNbDomainName, MsvAvNbComputerName, MsvAvDnsDomainName, MsvAvDnsComputerName, MsvAvDnsTreeName, MsvAvTimestamp}),
                           rand, time_base, 6,
                           NtlmVersion{10, 0, 0x4563, NTLMSSP_REVISION_W2K3},
                           false, true, true);

    // std::string host("WIN10CGR");
    // TimeBase time_basec({0x5d94e8d1, 0});
    // ReplayRandom randc(std::vector<uint8_t>({
    //     0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b,
    //     0x61, 0x52, 0x2f, 0xa9, 0xa9, 0x36, 0x75, 0xda, 0x62, 0x19, 0x9e, 0xcd, 0x22, 0xbe, 0xb4, 0xea,
    //     // Random Client Nonce
    //     0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f, 0xac,  // ....sz.. ..{u.O.
    //     0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90, 0xfb,  // ...r.k..:...C...
    // }));
    // rdpClientNTLM ntlm_client(user, domain, pass, host.c_str(), public_key, false, randc, time_basec, true, true);
    // auto client_negotiate = ntlm_client.authenticate_start();

    const uint8_t negotiate[]{
/* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
/* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
/* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
/* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
    };

//     Recv negotiate, send challenge
    const uint8_t answer_challenge[]{
/* 0000 */ 0x30, 0x81, 0xfa, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x81, 0xf2, 0x30, 0x81, 0xef, 0x30, 0x81,  // 0..........0..0.
/* 0010 */ 0xec, 0xa0, 0x81, 0xe9, 0x04, 0x81, 0xe6, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02,  // .......NTLMSSP..
/* 0020 */ 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x89, 0xe2, 0x72,  // .......8...5...r
/* 0030 */ 0xe9, 0x0e, 0x66, 0x83, 0x2e, 0x12, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e,  // ..f.............
/* 0040 */ 0x00, 0x9e, 0x00, 0x48, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x63, 0x45, 0x00, 0x00, 0x00, 0x0f, 0x50,  // ...H.....cE....P
/* 0050 */ 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x02,  // .R.O.X.Y.K.D.C..
/* 0060 */ 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44,  // ...P.R.O.X.Y.K.D
/* 0070 */ 0x00, 0x43, 0x00, 0x01, 0x00, 0x10, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30,  // .C.....W.I.N.1.0
/* 0080 */ 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f,  // .C.G.R.....p.r.o
/* 0090 */ 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61,  // .x.y.k.d.c...l.a
/* 00a0 */ 0x00, 0x62, 0x00, 0x03, 0x00, 0x2a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30,  // .b...*.W.I.N.1.0
/* 00b0 */ 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78,  // .C.G.R...p.r.o.x
/* 00c0 */ 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62,  // .y.k.d.c...l.a.b
/* 00d0 */ 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b,  // .....p.r.o.x.y.k
/* 00e0 */ 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08,  // .d.c...l.a.b....
/* 00f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x78, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,                    // .....xx......
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Negotiate --> answer with NTLM Challenge");

    RED_CHECK(make_array_view(answer_challenge) == ntlm_server.authenticate_next(make_array_view(negotiate)));
    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);

    // auto client_authenticate = ntlm_client.authenticate_next(server_negotiate_answer);

    const uint8_t authenticate[]{
/* 0000 */ 0x30, 0x82, 0x01, 0xed, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x8c, 0x30, 0x82, 0x01,  // 0............0..
/* 0010 */ 0x88, 0x30, 0x82, 0x01, 0x84, 0xa0, 0x82, 0x01, 0x80, 0x04, 0x82, 0x01, 0x7c, 0x4e, 0x54, 0x4c,  // .0..........|NTL
/* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
/* 0030 */ 0x00, 0xce, 0x00, 0xce, 0x00, 0x70, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x3e, 0x01, 0x00,  // .....p.......>..
/* 0040 */ 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x5c, 0x01, 0x00,  // .....N..........
/* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .....l...5......
/* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x69, 0xbb, 0x2e, 0xcc, 0x8b, 0xc7, 0xb9, 0xab, 0x07, 0x09, 0x05,  // .....i..........
/* 0070 */ 0x12, 0xb3, 0x6c, 0x61, 0xdb, 0xd3, 0x1d, 0x92, 0x47, 0x8a, 0xb2, 0x2b, 0x90, 0x52, 0xef, 0x71,  // ..la....G..+.R.q
/* 0080 */ 0xd6, 0xa0, 0x7f, 0x9a, 0x08, 0x72, 0x0f, 0xa1, 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x45, 0x28, 0x84,  // .....r..b...[E(.
/* 0090 */ 0xfd, 0xe3, 0x54, 0xce, 0xd2, 0xfc, 0x3f, 0x6d, 0x22, 0x03, 0xe0, 0xc5, 0x47, 0x01, 0x01, 0x00,  // ..T...?m"...G...
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd1, 0xe8, 0x94, 0x5d, 0x72, 0x0f, 0xa1,  // ............]r..
/* 00b0 */ 0x62, 0x9f, 0xbf, 0xe3, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52,  // b...[........P.R
/* 00c0 */ 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x10,  // .O.X.Y.K.D.C....
/* 00d0 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52,  // .W.I.N.1.0.C.G.R
/* 00e0 */ 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b,  // .....p.r.o.x.y.k
/* 00f0 */ 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x03, 0x00, 0x2a,  // .d.c...l.a.b...*
/* 0100 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52,  // .W.I.N.1.0.C.G.R
/* 0110 */ 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64,  // ...p.r.o.x.y.k.d
/* 0120 */ 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70,  // .c...l.a.b.....p
/* 0130 */ 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e,  // .r.o.x.y.k.d.c..
/* 0140 */ 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,  // .l.a.b.........x
/* 0150 */ 0x78, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f,  // x..........P.R.O
/* 0160 */ 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72,  // .X.Y.K.D.C.h.e.r
/* 0170 */ 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31,  // .c.u.l.e.W.I.N.1
/* 0180 */ 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52, 0x00, 0xab, 0x4a, 0xc6, 0x55, 0x56, 0xd5, 0xf0,  // .0.C.G.R..J.UV..
/* 0190 */ 0x55, 0x0f, 0x0a, 0xfb, 0xff, 0xf0, 0x06, 0xc0, 0x78, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00,  // U.......x.2.0...
/* 01a0 */ 0x00, 0x40, 0xa1, 0x06, 0xcd, 0x1b, 0xa8, 0x9c, 0xfa, 0x00, 0x00, 0x00, 0x00, 0xe3, 0xb4, 0x2b,  // .@.............+
/* 01b0 */ 0x77, 0x06, 0x85, 0x91, 0x74, 0x2f, 0xbb, 0x33, 0x3b, 0x38, 0x21, 0xce, 0xd1, 0xff, 0x57, 0x2f,  // w...t/.3;8!...W/
/* 01c0 */ 0xed, 0x52, 0x68, 0x3e, 0x85, 0xa8, 0xb7, 0xd2, 0x7c, 0x1d, 0x51, 0x2e, 0xb5, 0xa5, 0x22, 0x04,  // .Rh>....|.Q...".
/* 01d0 */ 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75, 0x9d, 0x4f,  //  ....sz.. ..{u.O
/* 01e0 */ 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43, 0xee, 0x90,  // ....r.k..:...C..
/* 01f0 */ 0xfb,                                                                                            // .
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM Authenticate --> ask password hash");
    RED_CHECK(""_av == ntlm_server.authenticate_next(make_array_view(authenticate)));

    auto [password_res, password_hash] = get_password_hash(ntlm_server.authenticate.UserName.buffer, ntlm_server.authenticate.DomainName.buffer);
    ntlm_server.set_password_hash(password_res, password_hash);

    const uint8_t pubauthkey[]{
/* 0000 */ 0x30, 0x39, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x17,  // 09......2.0.....
/* 0010 */ 0xa2, 0xa6, 0xe8, 0x8e, 0xd7, 0x71, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x42, 0xf5, 0xc9, 0x82, 0x31,  // .....q.....B...1
/* 0020 */ 0x59, 0xfe, 0x2d, 0x19, 0x1f, 0xae, 0x30, 0x4d, 0xe5, 0xc7, 0x78, 0x97, 0xd3, 0x4f, 0xb6, 0x8d,  // Y.-...0M..x..O..
/* 0030 */ 0x7b, 0x83, 0xbc, 0x25, 0xc4, 0x8b, 0x56, 0xdf, 0xae, 0x49, 0xe3,                                // {..%..V..I.
    };

    RED_TEST_MESSAGE("+++++++++++++ Continue with NTLM Authenticate --> answer with NTLM Pubauthkey");
    RED_CHECK(make_array_view(pubauthkey) == ntlm_server.authenticate_next({}));

    RED_CHECK_EQUAL(credssp::State::Cont, ntlm_server.state);

    // auto client_ts_credentials = ntlm_client.authenticate_next(server_pubauthkey);

    const uint8_t ts_credentials[]{
/* 0000 */ 0x30, 0x81, 0x90, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa2, 0x65, 0x04, 0x63, 0x01, 0x00, 0x00, 0x00,  // 0........e.c....
/* 0010 */ 0xdb, 0xf9, 0xa7, 0xb0, 0xa2, 0x20, 0x12, 0xca, 0x01, 0x00, 0x00, 0x00, 0x74, 0xbd, 0x77, 0xcd,  // ..... ......t.w.
/* 0020 */ 0x1f, 0x28, 0xbf, 0x3e, 0xc9, 0x1f, 0x71, 0x4f, 0x18, 0x9e, 0x3f, 0xd4, 0xff, 0x8e, 0xb9, 0x08,  // .(.>..qO..?.....
/* 0030 */ 0x13, 0x43, 0xee, 0x21, 0x4f, 0x96, 0xe9, 0xe1, 0x5a, 0x50, 0x68, 0x7b, 0xf3, 0xf8, 0xa3, 0xb9,  // .C.!O...ZPh{....
/* 0040 */ 0xd6, 0x1a, 0xab, 0xbc, 0x59, 0x81, 0xa5, 0xfd, 0x1f, 0xf9, 0x4e, 0x26, 0xed, 0xf1, 0xc8, 0xab,  // ....Y.....N&....
/* 0050 */ 0xc8, 0x8f, 0x69, 0xab, 0x4d, 0x12, 0x16, 0xef, 0x6e, 0x06, 0x9f, 0x8e, 0xa3, 0x31, 0x2e, 0x2f,  // ..i.M...n....1./
/* 0060 */ 0x8d, 0xd1, 0xf3, 0x82, 0x42, 0x1d, 0xe0, 0xc0, 0x2b, 0x1d, 0xe7, 0x64, 0xe7, 0x47, 0x2a, 0xa5,  // ....B...+..d.G*.
/* 0070 */ 0x22, 0x04, 0x20, 0xad, 0x88, 0xfa, 0xfb, 0x73, 0x7a, 0x14, 0xbd, 0x20, 0xef, 0xb4, 0x7b, 0x75,  // ". ....sz.. ..{u
/* 0080 */ 0x9d, 0x4f, 0xac, 0x0d, 0x13, 0x98, 0x72, 0x06, 0x6b, 0xa7, 0xf1, 0x3a, 0xcd, 0x16, 0xdd, 0x43,  // .O....r.k..:...C
/* 0090 */ 0xee, 0x90, 0xfb,
    };

    RED_TEST_MESSAGE("+++++++++++++ Server receive NTLM TS Credentials --> NTLM Finished");

    // Recv ts_credential, -> finished
    RED_CHECK_EQUAL(ntlm_server.authenticate_next(make_array_view(ts_credentials)), ""_av);
    RED_CHECK_EQUAL(ntlm_server.state, credssp::State::Finish);
    RED_TEST_MESSAGE("\n");
}
