/*
  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

  Product name: redemption, a FLOSS RDP proxy
  Copyright (C) Wallix 2013
  Author(s): Christophe Grosjean, Raphael Zhou, Meng Tan
*/

#include <ostream>

#include "test_only/test_framework/redemption_unit_tests.hpp"


#include "core/RDP/nla/credssp.hpp"

#include "test_only/test_framework/sig.hpp"


RED_TEST_DELEGATE_PRINT_ENUM(NTLM_AV_ID);

template<std::size_t N>
struct U8Array
{
    uint8_t datas[N];

    template<class... Xs>
    U8Array(Xs... xs)
    : datas{uint8_t(xs)...}
    {}

    bytes_view av() const
    {
        return {datas, N};
    }

    operator bytes_view () const
    {
        return {datas, N};
    }
};

template<>
struct U8Array<0>
{
    static bytes_view av()
    {
        return {};
    }

    operator bytes_view () const
    {
        return {};
    }
};

template<class... Xs>
U8Array(Xs... xs) -> U8Array<sizeof...(Xs)>;


RED_AUTO_TEST_CASE(TestBERIntegerCase1)
{
    auto r = BER::mkInteger(114178754);
    RED_CHECK_EQUAL(r.size(), 6);

    auto [value, queue] = BER::pop_integer(r, "Integer", ERR_CREDSSP_TS_REQUEST);
    RED_CHECK_EQUAL(value, 114178754);
    (void)queue;
}

RED_AUTO_TEST_CASE(TestBERIntegerCase2)
{
    auto r = BER::mkInteger(1);
    RED_CHECK_EQUAL(r.size(), 3);

    auto [value, queue] = BER::pop_integer(r, "Integer", ERR_CREDSSP_TS_REQUEST);
    (void)queue;
    RED_CHECK_EQUAL(value, 1);
}

RED_AUTO_TEST_CASE(TestBERIntegerCase3)
{
    auto r = BER::mkInteger(52165);
    RED_CHECK_EQUAL(r.size(), 5);

    auto [value, queue] = BER::pop_integer(r, "Integer", ERR_CREDSSP_TS_REQUEST);
    (void)queue;
    RED_CHECK_EQUAL(value, 52165);
}

RED_AUTO_TEST_CASE(TestBERIntegerCase4)
{
    auto r = BER::mkInteger(0x0FFF);
    RED_CHECK_EQUAL(r.size(), 4);

    auto [value, queue] = BER::pop_integer(r, "Integer", ERR_CREDSSP_TS_REQUEST);
    (void)queue;
    RED_CHECK_EQUAL(value, 0x0FFF);
}

RED_AUTO_TEST_CASE(TestBEROctetString)
{
    const uint8_t oct_str[] = {1, 2, 3, 4, 5, 6, 7};

    auto r = BER::mkOctetStringHeader(sizeof(oct_str));
    r.insert(r.end(), oct_str, oct_str+sizeof(oct_str));

    auto [length, queue] = BER::pop_tag_length(r, BER::CLASS_UNIV|BER::PC_PRIMITIVE|BER::TAG_OCTET_STRING, "TestOctetString", ERR_CREDSSP_TS_REQUEST);
    (void)queue;
    RED_CHECK_EQUAL(length, 7);
}


RED_AUTO_TEST_CASE(TestBERContextual)
{
    StaticOutStream<2048> s;
    uint8_t tag = 0x06;

    const uint8_t data[] = {0, 1, 2};

    auto v = BER::mkContextualFieldHeader(sizeof(data), tag);
    v.insert(v.end(), data, data+sizeof(data));

    RED_CHECK_EQUAL(true, BER::check_ber_ctxt_tag(v, tag));
    auto [length, queue] = BER::pop_length(bytes_view(v).drop_front(1), "TS Request [1] negoTokens", ERR_CREDSSP_TS_REQUEST);
    (void)queue;
    RED_CHECK_EQUAL(length, sizeof(data));
}

RED_AUTO_TEST_CASE(TestTSRequestNTLMSSP_NEGOTIATE)
{
    // ===== NTLMSSP_NEGOTIATE =====
    constexpr static uint8_t packet[] = {
        0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x03, 0xa1,
        0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,
        0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50,
        0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,
        0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0x01, 0x28, 0x0a, 0x00, 0x00, 0x00,
        0x0f
    };

    TSRequest ts_req = recvTSRequest(make_array_view(packet), true);

    RED_CHECK_EQUAL(ts_req.version, 6);
    RED_CHECK_EQUAL(ts_req.negoTokens.size(), 0x28);
    RED_CHECK_EQUAL(ts_req.authInfo.size(), 0);
    RED_CHECK_EQUAL(ts_req.error_code, 0);
    RED_CHECK_EQUAL(ts_req.pubKeyAuth.size(), 0);

    ts_req.version = 3;

    auto v = emitTSRequest(ts_req.version,
                           ts_req.negoTokens,
                           ts_req.authInfo,
                           ts_req.pubKeyAuth,
                           ts_req.error_code,
                           ts_req.clientNonce.clientNonce,
                           ts_req.clientNonce.initialized,
                           true);
    RED_CHECK_EQUAL(v.size(), 0x37 + 2);
    RED_CHECK_SIG_A(v, ut::sig(make_array_view(packet)).bytes());
}

RED_AUTO_TEST_CASE(TestTSRequestNTLMSSP_CHALLENGE)
{
// ===== NTLMSSP_CHALLENGE =====
    constexpr static uint8_t packet[] = {
        0x30, 0x81, 0x94, 0xa0, 0x03, 0x02, 0x01, 0x03,
        0xa1, 0x81, 0x8c, 0x30, 0x81, 0x89, 0x30, 0x81,
        0x86, 0xa0, 0x81, 0x83, 0x04, 0x81, 0x80, 0x4e,
        0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02,
        0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x38,
        0x00, 0x00, 0x00, 0x35, 0x82, 0x8a, 0xe2, 0x26,
        0x6e, 0xcd, 0x75, 0xaa, 0x41, 0xe7, 0x6f, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
        0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06,
        0x01, 0xb0, 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x57,
        0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00, 0x02,
        0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e,
        0x00, 0x37, 0x00, 0x01, 0x00, 0x08, 0x00, 0x57,
        0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00, 0x04,
        0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e,
        0x00, 0x37, 0x00, 0x03, 0x00, 0x08, 0x00, 0x77,
        0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x07,
        0x00, 0x08, 0x00, 0xa9, 0x8d, 0x9b, 0x1a, 0x6c,
        0xb0, 0xcb, 0x01, 0x00, 0x00, 0x00, 0x00
    };

    TSRequest ts_req = recvTSRequest(make_array_view(packet), true);

    RED_CHECK_EQUAL(ts_req.version, 6);
    RED_CHECK_EQUAL(ts_req.negoTokens.size(), 0x80);
    RED_CHECK_EQUAL(ts_req.authInfo.size(), 0);
    RED_CHECK_EQUAL(ts_req.pubKeyAuth.size(), 0);

    ts_req.version = 3;

    auto v = emitTSRequest(ts_req.version,
                           ts_req.negoTokens,
                           ts_req.authInfo,
                           ts_req.pubKeyAuth,
                           ts_req.error_code,
                           ts_req.clientNonce.clientNonce,
                           ts_req.clientNonce.initialized,
                           true);
    RED_CHECK_EQUAL(v.size(), 0x94 + 3);
    RED_CHECK_SIG_A(v, ut::sig(make_array_view(packet)).bytes());
}


RED_AUTO_TEST_CASE(TestTSRequestNTLMSSP_AUTH)
{
    // ===== NTLMSSP_AUTH =====
    constexpr static uint8_t packet[] = {
        0x30, 0x82, 0x02, 0x41, 0xa0, 0x03, 0x02, 0x01,
        0x03, 0xa1, 0x82, 0x01, 0x12, 0x30, 0x82, 0x01,
        0x0e, 0x30, 0x82, 0x01, 0x0a, 0xa0, 0x82, 0x01,
        0x06, 0x04, 0x82, 0x01, 0x02, 0x4e, 0x54, 0x4c,
        0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00,
        0x00, 0x18, 0x00, 0x18, 0x00, 0x6a, 0x00, 0x00,
        0x00, 0x70, 0x00, 0x70, 0x00, 0x82, 0x00, 0x00,
        0x00, 0x08, 0x00, 0x08, 0x00, 0x48, 0x00, 0x00,
        0x00, 0x10, 0x00, 0x10, 0x00, 0x50, 0x00, 0x00,
        0x00, 0x0a, 0x00, 0x0a, 0x00, 0x60, 0x00, 0x00,
        0x00, 0x10, 0x00, 0x10, 0x00, 0xf2, 0x00, 0x00,
        0x00, 0x35, 0x82, 0x88, 0xe2, 0x05, 0x01, 0x28,
        0x0a, 0x00, 0x00, 0x00, 0x0f, 0x77, 0x00, 0x69,
        0x00, 0x6e, 0x00, 0x37, 0x00, 0x75, 0x00, 0x73,
        0x00, 0x65, 0x00, 0x72, 0x00, 0x6e, 0x00, 0x61,
        0x00, 0x6d, 0x00, 0x65, 0x00, 0x57, 0x00, 0x49,
        0x00, 0x4e, 0x00, 0x58, 0x00, 0x50, 0x00, 0xa0,
        0x98, 0x01, 0x10, 0x19, 0xbb, 0x5d, 0x00, 0xf6,
        0xbe, 0x00, 0x33, 0x90, 0x20, 0x34, 0xb3, 0x47,
        0xa2, 0xe5, 0xcf, 0x27, 0xf7, 0x3c, 0x43, 0x01,
        0x4a, 0xd0, 0x8c, 0x24, 0xb4, 0x90, 0x74, 0x39,
        0x68, 0xe8, 0xbd, 0x0d, 0x2b, 0x70, 0x10, 0x01,
        0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3,
        0x83, 0xa2, 0x1c, 0x6c, 0xb0, 0xcb, 0x01, 0x47,
        0xa2, 0xe5, 0xcf, 0x27, 0xf7, 0x3c, 0x43, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x57,
        0x00, 0x49, 0x00, 0x4e, 0x00, 0x37, 0x00, 0x01,
        0x00, 0x08, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e,
        0x00, 0x37, 0x00, 0x04, 0x00, 0x08, 0x00, 0x77,
        0x00, 0x69, 0x00, 0x6e, 0x00, 0x37, 0x00, 0x03,
        0x00, 0x08, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6e,
        0x00, 0x37, 0x00, 0x07, 0x00, 0x08, 0x00, 0xa9,
        0x8d, 0x9b, 0x1a, 0x6c, 0xb0, 0xcb, 0x01, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1,
        0xd2, 0x45, 0x42, 0x0f, 0x37, 0x9a, 0x0e, 0xe0,
        0xce, 0x77, 0x40, 0x10, 0x8a, 0xda, 0xba, 0xa3,
        0x82, 0x01, 0x22, 0x04, 0x82, 0x01, 0x1e, 0x01,
        0x00, 0x00, 0x00, 0x91, 0x5e, 0xb0, 0x6e, 0x72,
        0x82, 0x53, 0xae, 0x00, 0x00, 0x00, 0x00, 0x27,
        0x29, 0x73, 0xa9, 0xfa, 0x46, 0x17, 0x3c, 0x74,
        0x14, 0x45, 0x2a, 0xd1, 0xe2, 0x92, 0xa1, 0xc6,
        0x0a, 0x30, 0xd4, 0xcc, 0xe0, 0x92, 0xf6, 0xb3,
        0x20, 0xb3, 0xa0, 0xf1, 0x38, 0xb1, 0xf4, 0xe5,
        0x96, 0xdf, 0xa1, 0x65, 0x5b, 0xd6, 0x0c, 0x2a,
        0x86, 0x99, 0xcc, 0x72, 0x80, 0xbd, 0xe9, 0x19,
        0x1f, 0x42, 0x53, 0xf6, 0x84, 0xa3, 0xda, 0x0e,
        0xec, 0x10, 0x29, 0x15, 0x52, 0x5c, 0x77, 0x40,
        0xc8, 0x3d, 0x44, 0x01, 0x34, 0xb6, 0x0a, 0x75,
        0x33, 0xc0, 0x25, 0x71, 0xd3, 0x25, 0x38, 0x3b,
        0xfc, 0x3b, 0xa8, 0xcf, 0xba, 0x2b, 0xf6, 0x99,
        0x0e, 0x5f, 0x4e, 0xa9, 0x16, 0x2b, 0x52, 0x9f,
        0xbb, 0x76, 0xf8, 0x03, 0xfc, 0x11, 0x5e, 0x36,
        0x83, 0xd8, 0x4c, 0x9a, 0xdc, 0x9d, 0x35, 0xe2,
        0xc8, 0x63, 0xa9, 0x3d, 0x07, 0x97, 0x52, 0x64,
        0x54, 0x72, 0x9e, 0x9a, 0x8c, 0x56, 0x79, 0x4a,
        0x78, 0x91, 0x0a, 0x4c, 0x52, 0x84, 0x5a, 0x4a,
        0xb8, 0x28, 0x0b, 0x2f, 0xe6, 0x89, 0x7d, 0x07,
        0x3b, 0x7b, 0x6e, 0x22, 0xcc, 0x4c, 0xff, 0xf4,
        0x10, 0x96, 0xf2, 0x27, 0x29, 0xa0, 0x76, 0x0d,
        0x4c, 0x7e, 0x7a, 0x42, 0xe4, 0x1e, 0x6a, 0x95,
        0x7d, 0x4c, 0xaf, 0xdb, 0x86, 0x49, 0x5c, 0xbf,
        0xc2, 0x65, 0xb6, 0xf2, 0xed, 0xae, 0x8d, 0x57,
        0xed, 0xf0, 0xd4, 0xcb, 0x7a, 0xbb, 0x23, 0xde,
        0xe3, 0x43, 0xea, 0xb1, 0x02, 0xe3, 0xb4, 0x96,
        0xe9, 0xe7, 0x48, 0x69, 0xb0, 0xaa, 0xec, 0x89,
        0x38, 0x8b, 0xc2, 0xbd, 0xdd, 0xf7, 0xdf, 0xa1,
        0x37, 0xe7, 0x34, 0x72, 0x7f, 0x91, 0x10, 0x14,
        0x73, 0xfe, 0x32, 0xdc, 0xfe, 0x68, 0x2b, 0xc0,
        0x08, 0xdf, 0x05, 0xf7, 0xbd, 0x46, 0x33, 0xfb,
        0xc9, 0xfc, 0x89, 0xaa, 0x5d, 0x25, 0x49, 0xc8,
        0x6e, 0x86, 0xee, 0xc2, 0xce, 0xc4, 0x8e, 0x85,
        0x9f, 0xe8, 0x30, 0xb3, 0x86, 0x11, 0xd5, 0xb8,
        0x34, 0x4a, 0xe0, 0x03, 0xe5
    };

    TSRequest ts_req = recvTSRequest(make_array_view(packet), true);

    RED_CHECK_EQUAL(ts_req.version, 6);
    RED_CHECK_EQUAL(ts_req.negoTokens.size(), 0x102);
    RED_CHECK_EQUAL(ts_req.authInfo.size(), 0);
    RED_CHECK_EQUAL(ts_req.pubKeyAuth.size(), 0x11e);

    ts_req.version = 3;

    auto v = emitTSRequest(ts_req.version,
                           ts_req.negoTokens,
                           ts_req.authInfo,
                           ts_req.pubKeyAuth,
                           ts_req.error_code,
                           ts_req.clientNonce.clientNonce,
                           ts_req.clientNonce.initialized,
                           true);
    RED_CHECK_EQUAL(v.size(), 0x241 + 4);
    RED_CHECK_SIG_A(v, ut::sig(make_array_view(packet)).bytes());
}

RED_AUTO_TEST_CASE(TestTSRequestPUBKEYAUTH)
{
// ===== PUBKEYAUTH =====
    constexpr static uint8_t packet[] = {
        0x30, 0x82, 0x01, 0x2b, 0xa0, 0x03, 0x02, 0x01,
        0x03, 0xa3, 0x82, 0x01, 0x22, 0x04, 0x82, 0x01,
        0x1e, 0x01, 0x00, 0x00, 0x00, 0xc9, 0x88, 0xfc,
        0xf1, 0x11, 0x68, 0x2c, 0x72, 0x00, 0x00, 0x00,
        0x00, 0xc7, 0x51, 0xf4, 0x71, 0xd3, 0x9f, 0xb6,
        0x50, 0xbe, 0xa8, 0xf6, 0x20, 0x77, 0xa1, 0xfc,
        0xdd, 0x8e, 0x02, 0xf0, 0xa4, 0x6b, 0xba, 0x3f,
        0x9d, 0x65, 0x9d, 0xab, 0x4a, 0x95, 0xc9, 0xb4,
        0x38, 0x03, 0x87, 0x04, 0xb1, 0xfe, 0x42, 0xec,
        0xfa, 0xfc, 0xaa, 0x85, 0xf1, 0x31, 0x2d, 0x26,
        0xcf, 0x63, 0xfd, 0x62, 0x36, 0xcf, 0x56, 0xc3,
        0xfb, 0xf6, 0x36, 0x9b, 0xe5, 0xb2, 0xe7, 0xce,
        0xcb, 0xe1, 0x82, 0xb2, 0x89, 0xff, 0xdd, 0x87,
        0x5e, 0xd3, 0xd8, 0xff, 0x2e, 0x16, 0x35, 0xad,
        0xdb, 0xda, 0xc9, 0xc5, 0x81, 0xad, 0x48, 0xf1,
        0x8b, 0x76, 0x3d, 0x74, 0x34, 0xdf, 0x80, 0x6b,
        0xf3, 0x68, 0x6d, 0xf6, 0xec, 0x5f, 0xbe, 0xea,
        0xb7, 0x6c, 0xea, 0xe4, 0xeb, 0xe9, 0x17, 0xf9,
        0x4e, 0x0d, 0x79, 0xd5, 0x82, 0xdd, 0xb7, 0xdc,
        0xcd, 0xfc, 0xbb, 0xf1, 0x0b, 0x9b, 0xe9, 0x18,
        0xe7, 0xb3, 0xb3, 0x8b, 0x40, 0x82, 0xa0, 0x9d,
        0x58, 0x73, 0xda, 0x54, 0xa2, 0x2b, 0xd2, 0xb6,
        0x41, 0x60, 0x8a, 0x64, 0xf2, 0xa2, 0x59, 0x64,
        0xcf, 0x27, 0x1a, 0xe6, 0xb5, 0x1a, 0x0e, 0x0e,
        0xe1, 0x14, 0xef, 0x26, 0x68, 0xeb, 0xc8, 0x49,
        0xe2, 0x66, 0xbb, 0x11, 0x71, 0x49, 0xad, 0x7e,
        0xae, 0xde, 0xa8, 0x78, 0xfd, 0x64, 0x51, 0xd8,
        0x18, 0x01, 0x11, 0xc0, 0x8d, 0x3b, 0xec, 0x40,
        0x2b, 0x1f, 0xc5, 0xa4, 0x45, 0x1e, 0x07, 0xae,
        0x5a, 0xd8, 0x1c, 0xab, 0xdf, 0x89, 0x96, 0xdc,
        0xdc, 0x29, 0xd8, 0x30, 0xdb, 0xbf, 0x48, 0x2a,
        0x42, 0x27, 0xc2, 0x50, 0xac, 0xf9, 0x02, 0xd1,
        0x20, 0x12, 0xdd, 0x50, 0x22, 0x09, 0x44, 0xac,
        0xe0, 0x22, 0x1f, 0x66, 0x64, 0xec, 0xfa, 0x2b,
        0xb8, 0xcd, 0x43, 0x3a, 0xce, 0x40, 0x74, 0xe1,
        0x34, 0x81, 0xe3, 0x94, 0x47, 0x6f, 0x49, 0x01,
        0xf8, 0xb5, 0xfc, 0xd0, 0x75, 0x80, 0xc6, 0x35,
        0xac, 0xc0, 0xfd, 0x1b, 0xb5, 0xa2, 0xd3
    };

    TSRequest ts_req = recvTSRequest(make_array_view(packet), true);

    RED_CHECK_EQUAL(ts_req.version, 6);
    RED_CHECK_EQUAL(ts_req.negoTokens.size(), 0);
    RED_CHECK_EQUAL(ts_req.authInfo.size(), 0);
    RED_CHECK_EQUAL(ts_req.pubKeyAuth.size(), 0x11e);

    ts_req.version = 3;

    auto v = emitTSRequest(ts_req.version,
                           ts_req.negoTokens,
                           ts_req.authInfo,
                           ts_req.pubKeyAuth,
                           ts_req.error_code,
                           ts_req.clientNonce.clientNonce,
                           ts_req.clientNonce.initialized,
                           true);
    RED_CHECK_EQUAL(v.size(), 0x12b + 4);
    RED_CHECK_SIG_A(v, ut::sig(make_array_view(packet)).bytes());
}

RED_AUTO_TEST_CASE(TestTSRequestAUTHINFO)
{
    // ===== AUTHINFO =====
    constexpr static uint8_t packet[] = {
        0x30, 0x5a, 0xa0, 0x03, 0x02, 0x01, 0x03, 0xa2,
        0x53, 0x04, 0x51, 0x01, 0x00, 0x00, 0x00, 0xb3,
        0x2c, 0x3b, 0xa1, 0x36, 0xf6, 0x55, 0x71, 0x01,
        0x00, 0x00, 0x00, 0xa8, 0x85, 0x7d, 0x11, 0xef,
        0x92, 0xa0, 0xd6, 0xff, 0xee, 0xa1, 0xae, 0x6d,
        0xc5, 0x2e, 0x4e, 0x65, 0x50, 0x28, 0x93, 0x75,
        0x30, 0xe1, 0xc3, 0x37, 0xeb, 0xac, 0x1f, 0xdd,
        0xf3, 0xe0, 0x92, 0xf6, 0x21, 0xbc, 0x8f, 0xa8,
        0xd4, 0xe0, 0x5a, 0xa6, 0xff, 0xda, 0x09, 0x50,
        0x24, 0x0d, 0x8f, 0x8f, 0xf4, 0x92, 0xfe, 0x49,
        0x2a, 0x13, 0x52, 0xa6, 0x52, 0x75, 0x50, 0x8d,
        0x3e, 0xe9, 0x6b, 0x57
    };
    TSRequest ts_req = recvTSRequest(make_array_view(packet), true);

    RED_CHECK_EQUAL(ts_req.version, 6);

    RED_CHECK_EQUAL(ts_req.negoTokens.size(), 0);
    RED_CHECK_EQUAL(ts_req.authInfo.size(), 0x51);
    RED_CHECK_EQUAL(ts_req.pubKeyAuth.size(), 0);

    ts_req.version = 3;

    auto v = emitTSRequest(ts_req.version,
                           ts_req.negoTokens,
                           ts_req.authInfo,
                           ts_req.pubKeyAuth,
                           ts_req.error_code,
                           ts_req.clientNonce.clientNonce,
                           ts_req.clientNonce.initialized,
                           true);

    RED_CHECK_EQUAL(v.size(), 0x5c);
    RED_CHECK_SIG_A(v, ut::sig(make_array_view(packet)).bytes());
}

RED_AUTO_TEST_CASE(TestTSCredentialsPassword)
{
    bytes_view domain = "flatland\0"_av;
    bytes_view user = "square\0"_av;
    bytes_view pass = "hypercube\0"_av;

    auto r = emitTSCredentialsPassword(domain, user, pass, true);
    RED_CHECK_EQUAL(r.size(), r[1]+2u);

    TSCredentials ts_cred_received = recvTSCredentials(r, true);

    RED_CHECK_EQUAL(ts_cred_received.credType, 1);
    RED_CHECK_EQUAL(ts_cred_received.passCreds.domainName, domain);
    RED_CHECK_EQUAL(ts_cred_received.passCreds.userName, user);
    RED_CHECK_EQUAL(ts_cred_received.passCreds.password, pass);
}

RED_AUTO_TEST_CASE(TestTSCredentialsSmartCard)
{
    bytes_view pin = "3615\0"_av;
    bytes_view userHint = "aka\0"_av;
    bytes_view domainHint = "grandparc\0"_av;

    bytes_view cardName = "passepartout\0"_av;
    bytes_view readerName = "acrobat\0"_av;
    bytes_view containerName = "docker\0"_av;
    bytes_view cspName = "what\0"_av;
    uint32_t keySpec = 32;

    auto r = emitTSCredentialsSmartCard(pin, userHint, domainHint, keySpec, cardName, readerName, containerName, cspName, true);
    RED_CHECK_EQUAL(r.size(), r[1]+2u);

    TSCredentials ts_cred = recvTSCredentials(r, true);

    RED_CHECK_EQUAL(ts_cred.credType, 2);
    RED_CHECK_EQUAL(ts_cred.smartcardCreds.pin, pin);
    RED_CHECK_EQUAL(ts_cred.smartcardCreds.userHint, userHint);
    RED_CHECK_EQUAL(ts_cred.smartcardCreds.domainHint, domainHint);
    RED_CHECK_EQUAL(ts_cred.smartcardCreds.cspData.keySpec, keySpec);

    RED_CHECK(ts_cred.smartcardCreds.cspData.cardName == cardName);
    RED_CHECK(ts_cred.smartcardCreds.cspData.readerName == readerName);
    RED_CHECK(ts_cred.smartcardCreds.cspData.containerName == containerName);
    RED_CHECK(ts_cred.smartcardCreds.cspData.cspName == cspName);
}

//rdpCredssp - Client Authentication : Sending Authentication Token
//TSRequest hexdump ---------------------------------
//TSRequest version 6 ------------------------------
//TSRequest negoTokens ------------------------------
///* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2,  // NTLMSSP.........
///* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(.......(...
///* 0020 */ 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                                  // ........
//TSRequest authInfo --------------------------------
//TSRequest pubkeyAuth ------------------------------
//TSRequest error_code 0 ---------------------------
//TSRequest clientNonce -----------------------------
///* 0000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
///* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
//TSRequest ts_request_header -----------------------
//TSRequest version_field ---------------------------
///* 0000 */ 0xa0, 0x03, 0x02, 0x01, 0x06,                                                                    // .....
//TSRequest nego_tokens_header ----------------------
///* 0000 */ 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04, 0x28,                                      // .00.0,.*.(
//TSRequest auth_info_header ------------------------
//TSRequest pub_key_auth_header ---------------------
//TSRequest error_code field ------------------------
//TSRequest nonce -----------------------------------
//emit TSRequest full dump--------------------------------
///* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
///* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
///* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
///* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
//emit TSRequest hexdump -DONE----------------------------

RED_AUTO_TEST_CASE(TestNTLMMessagesNegotiate)
{
    U8Array expectedNegoTokens = {
        0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2,  // NTLMSSP.........
        0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(.......(...
        0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,
    };

    RED_CHECK_EQUAL(expectedNegoTokens.av(), emitNTLMNegotiateMessage());
}

RED_AUTO_TEST_CASE(TestNTLMMessagesChallenge)
{
    U8Array negoTokens = {
         /* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,  // NTLMSSP.........
         /* 0010 */ 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x89, 0xe2, 0x01, 0x05, 0x03, 0x5c, 0x69, 0x17, 0x57, 0x89,  // 8...5.......i.W.
         /* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x00, 0xa6, 0x00, 0x48, 0x00, 0x00, 0x00,  // ............H...
         /* 0030 */ 0x06, 0x03, 0x80, 0x25, 0x00, 0x00, 0x00, 0x0f, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00,  // ...%....P.R.O.X.
         /* 0040 */ 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00,  // Y.K.D.C.....P.R.
         /* 0050 */ 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14, 0x00,  // O.X.Y.K.D.C.....
         /* 0060 */ 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00,  // W.I.N.K.D.C.2.0.
         /* 0070 */ 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00,  // 1.2.....p.r.o.x.
         /* 0080 */ 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,  // y.k.d.c...l.a.b.
         /* 0090 */ 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // ....W.I.N.K.D.C.
         /* 00a0 */ 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00,  // 2.0.1.2...p.r.o.
         /* 00b0 */ 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00,  // x.y.k.d.c...l.a.
         /* 00c0 */ 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // b.....p.r.o.x.y.
         /* 00d0 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00,  // k.d.c...l.a.b...
         /* 00e0 */ 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,              // .......b......
    };
    NTLMChallengeMessage challenge_message = recvNTLMChallengeMessage(negoTokens.av(), true);

    RED_CHECK_EQUAL(challenge_message.TargetName.bufferOffset, 56);
    RED_CHECK_EQUAL(challenge_message.TargetName.buffer,
        (U8Array{
        /* 0000 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
        }.av())
    );

//    hexdump_d(challenge_message.serverChallenge);
    array_challenge expected_server_challenge{0x01, 0x05, 0x03, 0x5c, 0x69, 0x17, 0x57, 0x89};
    RED_CHECK(challenge_message.serverChallenge == expected_server_challenge);

    logNtlmFlags(challenge_message.negoFlags.flags);

    RED_CHECK(challenge_message.negoFlags.flags ==
            (NTLMSSP_NEGOTIATE_56|
            NTLMSSP_NEGOTIATE_KEY_EXCH|
            NTLMSSP_NEGOTIATE_128|
            NTLMSSP_NEGOTIATE_VERSION|
            NTLMSSP_NEGOTIATE_TARGET_INFO|
            NTLMSSP_NEGOTIATE_EXTENDED_SESSION_SECURITY|
            NTLMSSP_TARGET_TYPE_DOMAIN|
            NTLMSSP_NEGOTIATE_ALWAYS_SIGN|
            NTLMSSP_NEGOTIATE_NTLM|
            NTLMSSP_NEGOTIATE_SEAL|
            NTLMSSP_NEGOTIATE_SIGN|
            NTLMSSP_REQUEST_TARGET|
            NTLMSSP_NEGOTIATE_UNICODE)
    );

//    hexdump_d(challenge_message.TargetInfo.buffer);
    RED_CHECK_EQUAL(challenge_message.TargetInfo.bufferOffset, 72);
    RED_CHECK_EQUAL(challenge_message.TargetInfo.buffer, (U8Array{
 /* 0000 */ 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00,  // ....P.R.O.X.Y.K.
 /* 0010 */ 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00,  // D.C.....W.I.N.K.
 /* 0020 */ 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00,  // D.C.2.0.1.2.....
 /* 0030 */ 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00,  // p.r.o.x.y.k.d.c.
 /* 0040 */ 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00,  // ..l.a.b.....W.I.
 /* 0050 */ 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00,  // N.K.D.C.2.0.1.2.
 /* 0060 */ 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00,  // ..p.r.o.x.y.k.d.
 /* 0070 */ 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00,  // c...l.a.b.....p.
 /* 0080 */ 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00,  // r.o.x.y.k.d.c...
 /* 0090 */ 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62,  // l.a.b..........b
 /* 00a0 */ 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,
    }.av()));

    RED_CHECK_EQUAL(challenge_message.version.ProductMajorVersion, 6);
    RED_CHECK_EQUAL(challenge_message.version.ProductMinorVersion, 3);
    RED_CHECK_EQUAL(challenge_message.version.ProductBuild, 9600);
    RED_CHECK_EQUAL(challenge_message.version.NtlmRevisionCurrent, 15);

//    // Vector of AvPair
    RED_CHECK_EQUAL(challenge_message.AvPairList.size(), 6);
//    hexdump_d(challenge_message.AvPairList[0].data);
    // MsvAvNbDomainName    = 0x02,
    RED_CHECK_EQUAL(challenge_message.AvPairList[0].id, MsvAvNbDomainName);
    RED_CHECK_EQUAL(challenge_message.AvPairList[0].data, (U8Array{
        /* 0000 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
    }.av()));
//    hexdump_d(challenge_message.AvPairList[1].data);
    // MsvAvNbComputerName  = 0x01,
    RED_CHECK_EQUAL(challenge_message.AvPairList[1].id, MsvAvNbComputerName);
    RED_CHECK_EQUAL(challenge_message.AvPairList[1].data, (U8Array{
    /* 0000 */ 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00,  // W.I.N.K.D.C.2.0.
    /* 0010 */ 0x31, 0x00, 0x32, 0x00,                                                                          // 1.2.
    }.av()));
//    hexdump_d(challenge_message.AvPairList[2].data);
    // MsvAvDnsDomainName   = 0x04,
    RED_CHECK_EQUAL(challenge_message.AvPairList[2].id, MsvAvDnsDomainName);
    RED_CHECK_EQUAL(challenge_message.AvPairList[2].data, (U8Array{
    /* 0000 */ 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00,  // p.r.o.x.y.k.d.c.
    /* 0010 */ 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,                                                  // ..l.a.b.
    }.av()));
//    hexdump_d(challenge_message.AvPairList[3].data);
    // MsvAvDnsComputerName = 0x03,
    RED_CHECK_EQUAL(challenge_message.AvPairList[3].id, MsvAvDnsComputerName);
    RED_CHECK_EQUAL(challenge_message.AvPairList[3].data, (U8Array{
    /* 0000 */ 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00,  // W.I.N.K.D.C.2.0.
    /* 0010 */ 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // 1.2...p.r.o.x.y.
    /* 0020 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,              // k.d.c...l.a.b.
    }.av()));
//    hexdump_d(challenge_message.AvPairList[4].data);
    // MsvAvDnsTreeName     = 0x05,
    RED_CHECK_EQUAL(challenge_message.AvPairList[4].id, MsvAvDnsTreeName);
    RED_CHECK_EQUAL(challenge_message.AvPairList[4].data, (U8Array{
    /* 0000 */ 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00,  // p.r.o.x.y.k.d.c.
    /* 0010 */ 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,                                                  // ..l.a.b.
    }.av()));
//    hexdump_d(challenge_message.AvPairList[5].data);
    // MsvAvTimestamp       = 0x07,
    auto tt = challenge_message.AvPairList[5].data;
    uint64_t tstamp = (uint64_t(tt[7]) << 56) + (uint64_t(tt[6]) << 48) + (uint64_t(tt[5]) << 40)
                    + (uint64_t(tt[4]) << 32) + (uint64_t(tt[3]) << 24) + (uint64_t(tt[2]) << 16)
                    + (uint64_t(tt[1]) << 8) + (uint64_t(tt[0]));
    RED_CHECK_EQUAL(challenge_message.AvPairList[5].id, MsvAvTimestamp);
    RED_CHECK_EQUAL(tstamp, 132119911851285221);
    RED_CHECK_EQUAL(challenge_message.AvPairList[5].data, (U8Array{
    /* 0000 */ 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62, 0xd5, 0x01,
    }.av()));
}


RED_AUTO_TEST_CASE(TestCredssp_scenarized_nla_ntlm)
{
    // negoTokens contains Negotiate Message
    {
        uint32_t version = 6;
        U8Array negoTokens = {
            0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2,  // NTLMSSP.........
            0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(.......(...
            0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,
        };
        bytes_view authInfo = {};
        bytes_view pubKeyAuth = {};
        uint32_t error_code = 0;
        bytes_view clientNonce = {};

        auto result = emitTSRequest(version, negoTokens, authInfo, pubKeyAuth, error_code, clientNonce, false, true);

        U8Array expectedResult = {
            // TSRequest ber sequence header
            0x30, 0x37,
            // version field
            0xa0, 0x03, 0x02, 0x01, 0x06,
            // negoTokens ber header
            0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04, 0x28, // 07......00.0,.*.(
            // negoTokens
            0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2, // NTLMSSP........
            0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // .....(.......(..
            0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,
        };

        RED_CHECK_EQUAL(expectedResult.av(), result);
    }

    {
        U8Array answerTSRequest = {
              0x30, 0x82, 0x01, 0x02, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x81, 0xfa, 0x30, 0x81, 0xf7, 0x30 // 0...........0..0
            , 0x81, 0xf4, 0xa0, 0x81, 0xf1, 0x04, 0x81, 0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00 // ........NTLMSSP.
            , 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x89, 0xe2 // ........8...5...
            , 0x01, 0x05, 0x03, 0x5c, 0x69, 0x17, 0x57, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 // ....i.W.........
            , 0xa6, 0x00, 0xa6, 0x00, 0x48, 0x00, 0x00, 0x00, 0x06, 0x03, 0x80, 0x25, 0x00, 0x00, 0x00, 0x0f // ....H......%....
            , 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00 // P.R.O.X.Y.K.D.C.
            , 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00 // ....P.R.O.X.Y.K.
            , 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00 // D.C.....W.I.N.K.
            , 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00 // D.C.2.0.1.2.....
            , 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00 // p.r.o.x.y.k.d.c.
            , 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00 // ..l.a.b.....W.I.
            , 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00 // N.K.D.C.2.0.1.2.
            , 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00 // ..p.r.o.x.y.k.d.
            , 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00 // c...l.a.b.....p.
            , 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00 // r.o.x.y.k.d.c...
            , 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62 // l.a.b..........b
            , 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00                                                             // ......
        };


        //Client Authentication : Receiving Authentication Token
        // negoTokens contains Challenge Message
        auto ts_req = recvTSRequest(answerTSRequest, true);
        U8Array expected_negoTokens = {
             /* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,  // NTLMSSP.........
             /* 0010 */ 0x38, 0x00, 0x00, 0x00, 0x35, 0x82, 0x89, 0xe2, 0x01, 0x05, 0x03, 0x5c, 0x69, 0x17, 0x57, 0x89,  // 8...5.......i.W.
             /* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x00, 0xa6, 0x00, 0x48, 0x00, 0x00, 0x00,  // ............H...
             /* 0030 */ 0x06, 0x03, 0x80, 0x25, 0x00, 0x00, 0x00, 0x0f, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00,  // ...%....P.R.O.X.
             /* 0040 */ 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52, 0x00,  // Y.K.D.C.....P.R.
             /* 0050 */ 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14, 0x00,  // O.X.Y.K.D.C.....
             /* 0060 */ 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30, 0x00,  // W.I.N.K.D.C.2.0.
             /* 0070 */ 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00,  // 1.2.....p.r.o.x.
             /* 0080 */ 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,  // y.k.d.c...l.a.b.
             /* 0090 */ 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // ....W.I.N.K.D.C.
             /* 00a0 */ 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00,  // 2.0.1.2...p.r.o.
             /* 00b0 */ 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00,  // x.y.k.d.c...l.a.
             /* 00c0 */ 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // b.....p.r.o.x.y.
             /* 00d0 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00,  // k.d.c...l.a.b...
             /* 00e0 */ 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00,              // .......b......
        };
        U8Array expected_authInfo = {};
        U8Array expected_pubKeyAuth = {};
        U8Array expected_clientNonce = {};

        RED_CHECK_EQUAL(6,                         ts_req.version);
        RED_CHECK_EQUAL(expected_negoTokens.av(),  ts_req.negoTokens);
        RED_CHECK_EQUAL(expected_authInfo.av(),    ts_req.authInfo);
        RED_CHECK_EQUAL(expected_pubKeyAuth.av(),  ts_req.pubKeyAuth);
        RED_CHECK_EQUAL(0,                         ts_req.error_code);
        RED_CHECK_EQUAL(expected_clientNonce.av(), ts_req.clientNonce.clientNonce);
    }


    // Credssp contains NTLM Authenticate response message
    {
        uint32_t version = 6;
        U8Array negoTokens = {                              // .0...........NTL
        0x4e, 0x54, 0x4c,
        /* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
        /* 0030 */ 0x00, 0xd6, 0x00, 0xd6, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x01, 0x00,  // .....p.......F..
        /* 0040 */ 0x00, 0x34, 0x00, 0x34, 0x00, 0x46, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x7a, 0x01, 0x00,  // .4.4.F.......z..
        /* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x86, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .........5......
        /* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x33, 0xf3, 0x6f, 0x74, 0xf6, 0xfd, 0xa4, 0x3f, 0x34, 0xef, 0x0a,  // .....3.ot...?4..
        /* 0070 */ 0x3e, 0xe3, 0x2c, 0x35, 0x1c, 0xac, 0xac, 0x50, 0x8b, 0x9e, 0x64, 0x06, 0xa2, 0x68, 0x8b, 0xf7,  // >.,5...P..d..h..
        /* 0080 */ 0xe5, 0x19, 0x9f, 0x6d, 0xe4, 0xff, 0x26, 0x7f, 0xac, 0x08, 0xe5, 0xc9, 0x19, 0x3c, 0x44, 0x18,  // ...m..&......<D.
        /* 0090 */ 0x87, 0xde, 0x60, 0x73, 0x3e, 0x0f, 0x50, 0x3b, 0xd9, 0x90, 0x75, 0x01, 0xd7, 0x01, 0x01, 0x00,  // ..`s>.P;..u.....
        /* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x6f, 0x0d, 0x00, 0x92, 0x6b, 0x6e, 0x5d, 0xff, 0x26, 0x7f,  // ......o...kn].&.
        /* 00b0 */ 0xac, 0x08, 0xe5, 0xc9, 0x19, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52,  // .............P.R
        /* 00c0 */ 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14,  // .O.X.Y.K.D.C....
        /* 00d0 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30,  // .W.I.N.K.D.C.2.0
        /* 00e0 */ 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78,  // .1.2.....p.r.o.x
        /* 00f0 */ 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62,  // .y.k.d.c...l.a.b
        /* 0100 */ 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43,  // .....W.I.N.K.D.C
        /* 0110 */ 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f,  // .2.0.1.2...p.r.o
        /* 0120 */ 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61,  // .x.y.k.d.c...l.a
        /* 0130 */ 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79,  // .b.....p.r.o.x.y
        /* 0140 */ 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07,  // .k.d.c...l.a.b..
        /* 0150 */ 0x00, 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........b.......
        /* 0160 */ 0x00, 0x00, 0x00, 0x41, 0x00, 0x64, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x73,  // ...A.d.m.i.n.i.s
        /* 0170 */ 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x40, 0x00, 0x70,  // .t.r.a.t.o.r.@.p
        /* 0180 */ 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e,  // .r.o.x.y.k.d.c..
        /* 0190 */ 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x67, 0x00, 0x72, 0x00, 0x74, 0x00, 0x68,  // .l.a.b.c.g.r.t.h
        /* 01a0 */ 0x00, 0x63, 0x00, 0x30, 0xbc, 0x1c, 0xba, 0x74, 0x8d, 0x07, 0x2f, 0x38, 0x82, 0x34, 0x5c, 0xbb,  // .c.0...t../8.4..
        /* 01b0 */ 0xf7, 0xa8, 0x39,
        };
        U8Array authInfo = {};
        U8Array pubKeyAuth = {
          0x01, 0x00, 0x00, 0x00, 0x40, 0x3a, 0x2a, 0xe6, 0xc6, 0xeb, 0x71, 0x91, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x35, 0x42, 0x55, 0x66, 0xe6, 0x54, 0x7a, 0x57, 0xa0, 0xa6, 0x06, 0xa9, 0xcf, 0xf1, 0x1e,
          0x36, 0xca, 0x53, 0xea, 0x91, 0x5a, 0xc1, 0x00, 0xf5, 0xf3, 0x4a, 0xdd, 0x87, 0x0c, 0x34, 0x00,
        };
        uint32_t error_code = 0;
        U8Array clientNonce = {
            /* 0000 */ 0x08, 0x6f, 0xa9, 0xd9, 0xd9, 0xaf, 0x3f, 0xc0, 0x42, 0x41, 0x7e, 0x78, 0x70, 0x7e, 0x52, 0x20,  // .o....?.BA~xp~R
            /* 0010 */ 0xd1, 0x94, 0x00, 0x96, 0x44, 0xd3, 0x2a, 0x59, 0xc2, 0x0d, 0x19, 0xf8, 0x7a, 0xbf, 0x36, 0xaf,  // ....D.*Y....z.6.
        };

        auto result = emitTSRequest(version, negoTokens, authInfo, pubKeyAuth, error_code, clientNonce, true, true);

        U8Array expectedResult = {
        // ber TSRequest header
        /* 0000 */ 0x30, 0x82, 0x02, 0x07,
        // ber version Field (version = 6)
                                           0xa0, 0x03, 0x02, 0x01, 0x06,
        // ber negoToken header
                                                                         0xa1, 0x82, 0x01, 0xa6, 0x30, 0x82, 0x01,  // 0............0..
        /* 0010 */ 0xa2, 0x30, 0x82, 0x01, 0x9e, 0xa0, 0x82, 0x01, 0x9a, 0x04, 0x82, 0x01, 0x96,
        // negoTokens data
                                                                                                 0x4e, 0x54, 0x4c,  // .0...........NTL
        /* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
        /* 0030 */ 0x00, 0xd6, 0x00, 0xd6, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x01, 0x00,  // .....p.......F..
        /* 0040 */ 0x00, 0x34, 0x00, 0x34, 0x00, 0x46, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x7a, 0x01, 0x00,  // .4.4.F.......z..
        /* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x86, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .........5......
        /* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0x33, 0xf3, 0x6f, 0x74, 0xf6, 0xfd, 0xa4, 0x3f, 0x34, 0xef, 0x0a,  // .....3.ot...?4..
        /* 0070 */ 0x3e, 0xe3, 0x2c, 0x35, 0x1c, 0xac, 0xac, 0x50, 0x8b, 0x9e, 0x64, 0x06, 0xa2, 0x68, 0x8b, 0xf7,  // >.,5...P..d..h..
        /* 0080 */ 0xe5, 0x19, 0x9f, 0x6d, 0xe4, 0xff, 0x26, 0x7f, 0xac, 0x08, 0xe5, 0xc9, 0x19, 0x3c, 0x44, 0x18,  // ...m..&......<D.
        /* 0090 */ 0x87, 0xde, 0x60, 0x73, 0x3e, 0x0f, 0x50, 0x3b, 0xd9, 0x90, 0x75, 0x01, 0xd7, 0x01, 0x01, 0x00,  // ..`s>.P;..u.....
        /* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0xaa, 0x6f, 0x0d, 0x00, 0x92, 0x6b, 0x6e, 0x5d, 0xff, 0x26, 0x7f,  // ......o...kn].&.
        /* 00b0 */ 0xac, 0x08, 0xe5, 0xc9, 0x19, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52,  // .............P.R
        /* 00c0 */ 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x14,  // .O.X.Y.K.D.C....
        /* 00d0 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x32, 0x00, 0x30,  // .W.I.N.K.D.C.2.0
        /* 00e0 */ 0x00, 0x31, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78,  // .1.2.....p.r.o.x
        /* 00f0 */ 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62,  // .y.k.d.c...l.a.b
        /* 0100 */ 0x00, 0x03, 0x00, 0x2e, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43,  // .....W.I.N.K.D.C
        /* 0110 */ 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f,  // .2.0.1.2...p.r.o
        /* 0120 */ 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61,  // .x.y.k.d.c...l.a
        /* 0130 */ 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79,  // .b.....p.r.o.x.y
        /* 0140 */ 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07,  // .k.d.c...l.a.b..
        /* 0150 */ 0x00, 0x08, 0x00, 0xe5, 0xda, 0xa6, 0x1d, 0x5c, 0x62, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........b.......
        /* 0160 */ 0x00, 0x00, 0x00, 0x41, 0x00, 0x64, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x73,  // ...A.d.m.i.n.i.s
        /* 0170 */ 0x00, 0x74, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72, 0x00, 0x40, 0x00, 0x70,  // .t.r.a.t.o.r.@.p
        /* 0180 */ 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e,  // .r.o.x.y.k.d.c..
        /* 0190 */ 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x67, 0x00, 0x72, 0x00, 0x74, 0x00, 0x68,  // .l.a.b.c.g.r.t.h
        /* 01a0 */ 0x00, 0x63, 0x00, 0x30, 0xbc, 0x1c, 0xba, 0x74, 0x8d, 0x07, 0x2f, 0x38, 0x82, 0x34, 0x5c, 0xbb,  // .c.0...t../8.4..
        /* 01b0 */ 0xf7, 0xa8, 0x39,

        // optional authInfo field empty
        // ber pubkeyAuth header
                                     0xa3, 0x32, 0x04, 0x30,
        // pukeyAuth data
                                                             0x01, 0x00, 0x00, 0x00, 0x40, 0x3a, 0x2a, 0xe6, 0xc6,  // ..9.2.0....@:*..
        /* 01c0 */ 0xeb, 0x71, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x42, 0x55, 0x66, 0xe6, 0x54, 0x7a, 0x57,  // .q......5BUf.TzW
        /* 01d0 */ 0xa0, 0xa6, 0x06, 0xa9, 0xcf, 0xf1, 0x1e, 0x36, 0xca, 0x53, 0xea, 0x91, 0x5a, 0xc1, 0x00, 0xf5,  // .......6.S..Z...
        /* 01e0 */ 0xf3, 0x4a, 0xdd, 0x87, 0x0c, 0x34, 0x00,

        // error_code field empty (value is 0)
        // ber Nonce header
                                                             0xa5, 0x22, 0x04, 0x20,
        // clientNonce data
                                                                                     0x08, 0x6f, 0xa9, 0xd9, 0xd9,  // .J...4..". .o...
        /* 01f0 */ 0xaf, 0x3f, 0xc0, 0x42, 0x41, 0x7e, 0x78, 0x70, 0x7e, 0x52, 0x20, 0xd1, 0x94, 0x00, 0x96, 0x44,  // .?.BA~xp~R ....D
        /* 0200 */ 0xd3, 0x2a, 0x59, 0xc2, 0x0d, 0x19, 0xf8, 0x7a, 0xbf, 0x36, 0xaf,                                // .*Y....z.6.
        };

        //TSRequest nonce -----------------------------------
        ///* 0000 */ 0xa5, 0x22, 0x04, 0x20,                                                                          // .".

        RED_CHECK_EQUAL(expectedResult.av(), result);
    }


    {
        // Client Authentication : Receiving Encrypted PubKey + 1
        U8Array answerTSRequest = {
        // ber TSRequest header
        0x30, 0x39,
        // ber Field version Integer 6
        0xa0, 0x03, 0x02, 0x01, 0x06,
        // ber pubKeyAuth header
        0xa3, 0x32, 0x04, 0x30,
        // pubKeyAuth
        0x01, 0x00, 0x00, 0x00, 0x13, 0x36, 0x33, 0x44, 0x80, 0xf7, 0xe5, 0xe1, 0x00, 0x00, 0x00, 0x00,
        0x5b, 0x1d, 0xb6, 0xba, 0xc8, 0xdb, 0xda, 0xc5, 0xb6, 0xca, 0xfe, 0x3b, 0x80, 0x51, 0x09, 0x7c,
        0x3e, 0xc7, 0xa6, 0x52, 0xa7, 0x6a, 0xa4, 0xf6, 0x56, 0xb9, 0x45, 0x1c, 0x62, 0xdc, 0x8a, 0x80
        };

        //Client Authentication : Receiving Authentication Token
        // negoTokens contains Challenge Message
        auto ts_req = recvTSRequest(answerTSRequest, true);
        U8Array expected_negoTokens = {};
        U8Array expected_authInfo = {};
        U8Array expected_pubKeyAuth = {
        /* 0000 */ 0x01, 0x00, 0x00, 0x00, 0x13, 0x36, 0x33, 0x44, 0x80, 0xf7, 0xe5, 0xe1, 0x00, 0x00, 0x00, 0x00,  // .....63D........
        /* 0010 */ 0x5b, 0x1d, 0xb6, 0xba, 0xc8, 0xdb, 0xda, 0xc5, 0xb6, 0xca, 0xfe, 0x3b, 0x80, 0x51, 0x09, 0x7c,  // [..........;.Q.|
        /* 0020 */ 0x3e, 0xc7, 0xa6, 0x52, 0xa7, 0x6a, 0xa4, 0xf6, 0x56, 0xb9, 0x45, 0x1c, 0x62, 0xdc, 0x8a, 0x80,  // >..R.j..V.E.b...

        };
        U8Array expected_clientNonce = {};

        hexdump_d(ts_req.pubKeyAuth);

        RED_CHECK_EQUAL(6,                         ts_req.version);
        RED_CHECK_EQUAL(expected_negoTokens.av(),  ts_req.negoTokens);
        RED_CHECK_EQUAL(expected_authInfo.av(),    ts_req.authInfo);
        RED_CHECK_EQUAL(expected_pubKeyAuth.av(),  ts_req.pubKeyAuth);
        RED_CHECK_EQUAL(0,                         ts_req.error_code);
        RED_CHECK_EQUAL(expected_clientNonce.av(), ts_req.clientNonce.clientNonce);
    }

    {
        uint32_t version = 6;
        U8Array negoTokens = {};
        U8Array authInfo = {
        /* 0000 */ 0x01, 0x00, 0x00, 0x00, 0xe2, 0x09, 0x80, 0x28, 0x76, 0x33, 0x2d, 0xcc, 0x01, 0x00, 0x00, 0x00,  // .......(v3-.....
        /* 0010 */ 0x14, 0x67, 0x1b, 0x2f, 0x5e, 0x91, 0xde, 0x30, 0x48, 0x01, 0xe8, 0x47, 0xee, 0x75, 0xbc, 0xe2,  // .g./^..0H..G.u..
        /* 0020 */ 0xd7, 0x93, 0xc7, 0xe5, 0x63, 0x55, 0x86, 0x16, 0x61, 0xa1, 0x17, 0xe2, 0x6b, 0x75, 0x90, 0xe9,  // ....cU..a...ku..
        /* 0030 */ 0xc8, 0x59, 0xb3, 0x8f, 0x28, 0xfe, 0x3b, 0x8b, 0xbf, 0x29, 0x75, 0x69, 0x0a, 0x1b, 0xb1, 0x0a,  // .Y..(.;..)ui....
        /* 0040 */ 0x95, 0xae, 0x02, 0x75, 0x37, 0x58, 0x0b, 0x8a, 0xa1, 0xb2, 0x1d, 0xe3, 0x37, 0xfd, 0x58, 0x26,  // ...u7X......7.X&
        /* 0050 */ 0x4b, 0xa4, 0x34, 0xf5, 0x7a, 0x96, 0x9e, 0x49, 0xe4, 0x47, 0xfb, 0xdf, 0xcc, 0x62, 0x2b, 0x3b,  // K.4.z..I.G...b+;
        /* 0060 */ 0x6b, 0xe7, 0xfb, 0x0b, 0x3f, 0x4f, 0x0a, 0x97, 0x3b, 0xcd, 0x47, 0xef, 0x69, 0xd6, 0x35, 0xa7,  // k...?O..;.G.i.5.
        /* 0070 */ 0x7c, 0xd0, 0x5f, 0x95, 0x11, 0xa6, 0xe0,                                                        // |._....
        };
        U8Array pubKeyAuth = {
        };
        uint32_t error_code = 0;
        U8Array clientNonce = {
            /* 0000 */ 0x08, 0x6f, 0xa9, 0xd9, 0xd9, 0xaf, 0x3f, 0xc0, 0x42, 0x41, 0x7e, 0x78, 0x70, 0x7e, 0x52, 0x20,  // .o....?.BA~xp~R
            /* 0010 */ 0xd1, 0x94, 0x00, 0x96, 0x44, 0xd3, 0x2a, 0x59, 0xc2, 0x0d, 0x19, 0xf8, 0x7a, 0xbf, 0x36, 0xaf,  // ....D.*Y....z.6.
        };

        auto result = emitTSRequest(version, negoTokens, authInfo, pubKeyAuth, error_code, clientNonce, true, true);

        U8Array expectedResult = {
        // ber TSRequest header
        /* 0000 */ 0x30, 0x81, 0xa4,
        // ber version Field (version 6)
                                     0xa0, 0x03, 0x02, 0x01, 0x06,

        // authInfo ber header
                                                                   0xa2, 0x79, 0x04, 0x77,
        // authInfo data
                                                                                           0x01, 0x00, 0x00, 0x00,  // 0........y.w....
        /* 0010 */ 0xe2, 0x09, 0x80, 0x28, 0x76, 0x33, 0x2d, 0xcc, 0x01, 0x00, 0x00, 0x00, 0x14, 0x67, 0x1b, 0x2f,  // ...(v3-......g./
        /* 0020 */ 0x5e, 0x91, 0xde, 0x30, 0x48, 0x01, 0xe8, 0x47, 0xee, 0x75, 0xbc, 0xe2, 0xd7, 0x93, 0xc7, 0xe5,  // ^..0H..G.u......
        /* 0030 */ 0x63, 0x55, 0x86, 0x16, 0x61, 0xa1, 0x17, 0xe2, 0x6b, 0x75, 0x90, 0xe9, 0xc8, 0x59, 0xb3, 0x8f,  // cU..a...ku...Y..
        /* 0040 */ 0x28, 0xfe, 0x3b, 0x8b, 0xbf, 0x29, 0x75, 0x69, 0x0a, 0x1b, 0xb1, 0x0a, 0x95, 0xae, 0x02, 0x75,  // (.;..)ui.......u
        /* 0050 */ 0x37, 0x58, 0x0b, 0x8a, 0xa1, 0xb2, 0x1d, 0xe3, 0x37, 0xfd, 0x58, 0x26, 0x4b, 0xa4, 0x34, 0xf5,  // 7X......7.X&K.4.
        /* 0060 */ 0x7a, 0x96, 0x9e, 0x49, 0xe4, 0x47, 0xfb, 0xdf, 0xcc, 0x62, 0x2b, 0x3b, 0x6b, 0xe7, 0xfb, 0x0b,  // z..I.G...b+;k...
        /* 0070 */ 0x3f, 0x4f, 0x0a, 0x97, 0x3b, 0xcd, 0x47, 0xef, 0x69, 0xd6, 0x35, 0xa7, 0x7c, 0xd0, 0x5f, 0x95,  // ?O..;.G.i.5.|._.
        /* 0080 */ 0x11, 0xa6, 0xe0,
        // Nonce ber header
                                     0xa5, 0x22, 0x04, 0x20,
        // client Nonce Data
                                                             0x08, 0x6f, 0xa9, 0xd9, 0xd9, 0xaf, 0x3f, 0xc0, 0x42,  // ....". .o....?.B
        /* 0090 */ 0x41, 0x7e, 0x78, 0x70, 0x7e, 0x52, 0x20, 0xd1, 0x94, 0x00, 0x96, 0x44, 0xd3, 0x2a, 0x59, 0xc2,  // A~xp~R ....D.*Y.
        /* 00a0 */ 0x0d, 0x19, 0xf8, 0x7a, 0xbf, 0x36, 0xaf,                                                        // ...z.6.

        };

        RED_CHECK_EQUAL(expectedResult.av(), result);
    }
}
//dpproxy: WARNING (3129/3129) -- AclSerializer::start_session_log: failed to extract date
//rdpproxy: INFO (3129/3129) -- ModuleManager::Creation of new mod 'RDP'
//rdpproxy: [rdpproxy] psid="15688045563129" user="u" type="TARGET_CONNECTION" target="PROXYKDC\hercule" host="WIN10CGR.proxykdc.lab" port="3389"
//rdpproxy: INFO (3129/3129) -- connecting to WIN10CGR.proxykdc.lab:3389
//rdpproxy: INFO (3129/3129) -- connection to WIN10CGR.proxykdc.lab:3389 (10.10.43.9) succeeded : socket 7
//rdpproxy: INFO (3129/3129) -- SocketTransport: recv_timeout=1000
//rdpproxy: INFO (3129/3129) -- Remote RDP Server domain="PROXYKDC" login="hercule" host="cgrthc"
//rdpproxy: INFO (3129/3129) -- RdpNego: TLS=Enabled NLA=Enabled adminMode=Disabled
//rdpproxy: INFO (3129/3129) -- Server key layout is 409
//rdpproxy: INFO (3129/3129) -- ModuleManager::Creation of new mod 'RDP' suceeded
//rdpproxy: INFO (3129/3129) -- RdpNego::NEGO_STATE_INITIAL
//rdpproxy: INFO (3129/3129) -- RdpNego::send_x224_connection_request_pdu
//rdpproxy: INFO (3129/3129) -- Send cookie:
//rdpproxy: INFO (3129/3129) -- /* 0000 */ "\x43\x6f\x6f\x6b\x69\x65\x3a\x20\x6d\x73\x74\x73\x68\x61\x73\x68" // Cookie: mstshash
//rdpproxy: INFO (3129/3129) -- /* 0010 */ "\x3d\x50\x52\x4f\x58\x59\x4b\x44\x43\x5c\x68\x65\x72\x63\x75\x6c" // =PROXYKDC.hercul
//rdpproxy: INFO (3129/3129) -- /* 0020 */ "\x65\x0d\x0a"                                                     // e..
//rdpproxy: INFO (3129/3129) -- RdpNego::send_x224_connection_request_pdu done
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_next_data::Negociate
//rdpproxy: INFO (3129/3129) -- nego->state=RdpNego::NEGO_STATE_NEGOCIATE
//rdpproxy: INFO (3129/3129) -- RdpNego::NEGO_STATE_NLA
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_connection_confirm
//rdpproxy: INFO (3129/3129) -- NEG_RSP_TYPE=2 NEG_RSP_FLAGS=31 NEG_RSP_LENGTH=8 NEG_RSP_SELECTED_PROTOCOL=2
//rdpproxy: INFO (3129/3129) -- CC Recv: PROTOCOL HYBRID
//rdpproxy: INFO (3129/3129) -- activating TLS (HYBRID)
//rdpproxy: INFO (3129/3129) -- RdpNego::activate_ssl_hybrid
//rdpproxy: INFO (3129/3129) -- Client TLS start
//rdpproxy: INFO (3129/3129) -- SSL_connect()
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_next_data::SslHybrid
//rdpproxy: INFO (3129/3129) -- RdpNego::activate_ssl_hybrid
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_next_data::SslHybrid
//rdpproxy: INFO (3129/3129) -- RdpNego::activate_ssl_hybrid
//rdpproxy: INFO (3129/3129) -- SSL_get_peer_certificate()
//rdpproxy: INFO (3129/3129) -- certificate directory is: '/etc/rdpproxy/cert/0000'
//rdpproxy: INFO (3129/3129) -- certificate file is: '/etc/rdpproxy/cert/0000/rdp,WIN10CGR.proxykdc.lab,3389,X509.pem'
//rdpproxy: INFO (3129/3129) -- nb1=1078 nb2=1078
//rdpproxy: INFO (3129/3129) -- TLS::X509 existing::issuer=CN = WIN10CGR.proxykdc.lab
//rdpproxy: INFO (3129/3129) -- TLS::X509 existing::subject=CN = WIN10CGR.proxykdc.lab
//rdpproxy: INFO (3129/3129) -- TLS::X509 existing::fingerprint=10:1b:f8:64:d4:31:1e:95:fa:db:d0:ac:5e:85:0e:4d:23:ec:f6:8b
//rdpproxy: [RDP Session] session_id="SESSIONID-0000" client_ip="10.10.43.12" target_ip="WIN10CGR.proxykdc.lab" user="u" device="win10" service="rdp" account="PROXYKDC\\hercule" type="SERVER_CERTIFICATE_MATCH_SUCCESS" description="X.509 server certificate match"
//rdpproxy: [RDP Session] session_id="SESSIONID-0000" client_ip="10.10.43.12" target_ip="WIN10CGR.proxykdc.lab" user="u" device="win10" service="rdp" account="PROXYKDC\\hercule" type="CERTIFICATE_CHECK_SUCCESS" description="Connexion to server allowed"
//rdpproxy: INFO (3129/3129) -- TLS::X509::issuer=CN = WIN10CGR.proxykdc.lab
//rdpproxy: INFO (3129/3129) -- TLS::X509::subject=CN = WIN10CGR.proxykdc.lab
//rdpproxy: INFO (3129/3129) -- TLS::X509::fingerprint=10:1b:f8:64:d4:31:1e:95:fa:db:d0:ac:5e:85:0e:4d:23:ec:f6:8b
//rdpproxy: INFO (3129/3129) -- TLSContext::X509_get_pubkey()
//rdpproxy: INFO (3129/3129) -- TLSContext::i2d_PublicKey()
//rdpproxy: INFO (3129/3129) -- Connected to target using TLS version TLSv1.2
//rdpproxy: INFO (3129/3129) -- SocketTransport::enable_client_tls() done
//rdpproxy: INFO (3129/3129) -- activating CREDSSP
//rdpproxy: INFO (3129/3129) -- Credssp: NTLM Authentication
//rdpproxy: INFO (3129/3129) -- NTLM Send Negotiate
//rdpproxy: INFO (3129/3129) -- rdpCredssp - Client Authentication : Sending Authentication Token
//rdpproxy: INFO (3129/3129) -- TSRequest hexdump ---------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version 6 ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest negoTokens ------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08, 0xe2,  // NTLMSSP.........
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,  // ....(.......(...
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                                  // ........
//rdpproxy: INFO (3129/3129) -- TSRequest authInfo --------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest pubkeyAuth ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest error_code 0 ---------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest clientNonce -----------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest ts_request_header -----------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version_field ---------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa0, 0x03, 0x02, 0x01, 0x06,                                                                    // .....
//rdpproxy: INFO (3129/3129) -- TSRequest nego_tokens_header ----------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04, 0x28,                                      // .00.0,.*.(
//rdpproxy: INFO (3129/3129) -- TSRequest auth_info_header ------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest pub_key_auth_header ---------------------
//rdpproxy: INFO (3129/3129) -- TSRequest error_code field ------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest nonce -----------------------------------
//rdpproxy: INFO (3129/3129) -- emit TSRequest full dump--------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x30, 0x37, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0xa0, 0x2a, 0x04,  // 07......00.0,.*.
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb7, 0x82, 0x08,  // (NTLMSSP........
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0xe2, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00,  // .....(.......(..
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x00, 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f,                                            // .........
//rdpproxy: INFO (3129/3129) -- emit TSRequest hexdump -DONE----------------------------
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_next_data::Credssp
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_credssp
//rdpproxy: INFO (3129/3129) -- Client Authentication : Receiving Authentication Token - Challenge
//rdpproxy: INFO (3129/3129) -- recv TSRequest full dump--------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ "\x30\x81\xfa\xa0\x03\x02\x01\x06\xa1\x81\xf2\x30\x81\xef\x30\x81" // 0..........0..0.
//rdpproxy: INFO (3129/3129) -- /* 0010 */ "\xec\xa0\x81\xe9\x04\x81\xe6\x4e\x54\x4c\x4d\x53\x53\x50\x00\x02" // .......NTLMSSP..
//rdpproxy: INFO (3129/3129) -- /* 0020 */ "\x00\x00\x00\x10\x00\x10\x00\x38\x00\x00\x00\x35\x82\x89\xe2\x1f" // .......8...5....
//rdpproxy: INFO (3129/3129) -- /* 0030 */ "\x4b\xf2\xc3\x8d\x1a\x03\x09\x00\x00\x00\x00\x00\x00\x00\x00\x9e" // K...............
//rdpproxy: INFO (3129/3129) -- /* 0040 */ "\x00\x9e\x00\x48\x00\x00\x00\x0a\x00\x63\x45\x00\x00\x00\x0f\x50" // ...H.....cE....P
//rdpproxy: INFO (3129/3129) -- /* 0050 */ "\x00\x52\x00\x4f\x00\x58\x00\x59\x00\x4b\x00\x44\x00\x43\x00\x02" // .R.O.X.Y.K.D.C..
//rdpproxy: INFO (3129/3129) -- /* 0060 */ "\x00\x10\x00\x50\x00\x52\x00\x4f\x00\x58\x00\x59\x00\x4b\x00\x44" // ...P.R.O.X.Y.K.D
//rdpproxy: INFO (3129/3129) -- /* 0070 */ "\x00\x43\x00\x01\x00\x10\x00\x57\x00\x49\x00\x4e\x00\x31\x00\x30" // .C.....W.I.N.1.0
//rdpproxy: INFO (3129/3129) -- /* 0080 */ "\x00\x43\x00\x47\x00\x52\x00\x04\x00\x18\x00\x70\x00\x72\x00\x6f" // .C.G.R.....p.r.o
//rdpproxy: INFO (3129/3129) -- /* 0090 */ "\x00\x78\x00\x79\x00\x6b\x00\x64\x00\x63\x00\x2e\x00\x6c\x00\x61" // .x.y.k.d.c...l.a
//rdpproxy: INFO (3129/3129) -- /* 00a0 */ "\x00\x62\x00\x03\x00\x2a\x00\x57\x00\x49\x00\x4e\x00\x31\x00\x30" // .b...*.W.I.N.1.0
//rdpproxy: INFO (3129/3129) -- /* 00b0 */ "\x00\x43\x00\x47\x00\x52\x00\x2e\x00\x70\x00\x72\x00\x6f\x00\x78" // .C.G.R...p.r.o.x
//rdpproxy: INFO (3129/3129) -- /* 00c0 */ "\x00\x79\x00\x6b\x00\x64\x00\x63\x00\x2e\x00\x6c\x00\x61\x00\x62" // .y.k.d.c...l.a.b
//rdpproxy: INFO (3129/3129) -- /* 00d0 */ "\x00\x05\x00\x18\x00\x70\x00\x72\x00\x6f\x00\x78\x00\x79\x00\x6b" // .....p.r.o.x.y.k
//rdpproxy: INFO (3129/3129) -- /* 00e0 */ "\x00\x64\x00\x63\x00\x2e\x00\x6c\x00\x61\x00\x62\x00\x07\x00\x08" // .d.c...l.a.b....
//rdpproxy: INFO (3129/3129) -- /* 00f0 */ "\x00\x15\xee\x19\x94\x10\x6e\xd5\x01\x00\x00\x00\x00"             // ......n......
//rdpproxy: INFO (3129/3129) -- recv TSRequest hexdump - START PARSING DATA-------------
//rdpproxy: INFO (3129/3129) -- Credssp recvTSRequest() Remote Version 6, Negotiated version 6
//rdpproxy: INFO (3129/3129) -- NTLMContextClient Compute response from challenge
//rdpproxy: INFO (3129/3129) -- using /dev/urandom as random source
//rdpproxy: INFO (3129/3129) -- NTLMContextClient Compute response: SessionBaseKey
//rdpproxy: INFO (3129/3129) -- using /dev/urandom as random source
//rdpproxy: INFO (3129/3129) -- Field LmChallengeResponse, len: 24
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x43, 0x75, 0xc5, 0xf7, 0x38, 0xef, 0x91, 0x19, 0xfe, 0xcc, 0xeb, 0xae, 0x4e, 0x4d, 0x4d, 0x9d,  // Cu..8.......NMM.
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf,                                                  // J17.....
//rdpproxy: INFO (3129/3129) -- Field NtChallengeResponse, len: 206
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x0f, 0x3b, 0xaf, 0xbd, 0x9f, 0xeb, 0x6a, 0x41, 0x2c, 0x76, 0x1a, 0x4d, 0x37, 0x8b, 0xb2, 0xe0,  // .;....jA,v.M7...
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xc7, 0x0a, 0x00, 0xce, 0x0e, 0x82, 0x5d,  // ...............]
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00,  // J17.............
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x01, 0x00, 0x10, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ....W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0x47, 0x00, 0x52, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00,  // G.R.....p.r.o.x.
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,  // y.k.d.c...l.a.b.
//rdpproxy: INFO (3129/3129) -- /* 0070 */ 0x03, 0x00, 0x2a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ..*.W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 0080 */ 0x47, 0x00, 0x52, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // G.R...p.r.o.x.y.
//rdpproxy: INFO (3129/3129) -- /* 0090 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00,  // k.d.c...l.a.b...
//rdpproxy: INFO (3129/3129) -- /* 00a0 */ 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00,  // ..p.r.o.x.y.k.d.
//rdpproxy: INFO (3129/3129) -- /* 00b0 */ 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x15, 0xee,  // c...l.a.b.......
//rdpproxy: INFO (3129/3129) -- /* 00c0 */ 0x19, 0x94, 0x10, 0x6e, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,              // ...n..........
//rdpproxy: INFO (3129/3129) -- Field DomainName, len: 16
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
//rdpproxy: INFO (3129/3129) -- Field UserName, len: 14
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00,              // h.e.r.c.u.l.e.
//rdpproxy: INFO (3129/3129) -- Field Workstation, len: 12
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x63, 0x00, 0x67, 0x00, 0x72, 0x00, 0x74, 0x00, 0x68, 0x00, 0x63, 0x00,                          // c.g.r.t.h.c.
//rdpproxy: INFO (3129/3129) -- Field EncryptedRandomSessionKey, len: 16
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x1f, 0xb6, 0xf2, 0x8a, 0x99, 0xb0, 0x10, 0x5e, 0xff, 0x27, 0x6f, 0x88, 0x3d, 0x24, 0x27, 0xe4,  // .......^.'o.=$'.
//rdpproxy: INFO (3129/3129) -- negotiateFlags "0xE288A235"{
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_56, // (31)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_KEY_EXCH, // (30)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_128, // (29)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_VERSION, // (25)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_TARGET_INFO, // (23)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_EXTENDED_SESSION_SECURITY, // (19)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_ALWAYS_SIGN, // (15)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_WORKSTATION_SUPPLIED, // (13)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_NTLM, // (9)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_SEAL, // (5)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_SIGN, // (4)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_REQUEST_TARGET, // (2)
//rdpproxy: INFO (3129/3129) --     |NTLMSSP_NEGOTIATE_UNICODE, // (0)
//rdpproxy: INFO (3129/3129) -- }
//rdpproxy: INFO (3129/3129) -- VERSION = {
//rdpproxy: INFO (3129/3129) -- 	ProductMajorVersion: 6
//rdpproxy: INFO (3129/3129) -- 	ProductMinorVersion: 1
//rdpproxy: INFO (3129/3129) -- 	ProductBuild: 7601
//rdpproxy: INFO (3129/3129) -- 	NTLMRevisionCurrent: 0x0F
//rdpproxy: INFO (3129/3129) -- }
//rdpproxy: INFO (3129/3129) -- Field MIC, len: 16
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xc3, 0x32, 0x0f, 0x06, 0xcc, 0x49, 0xa6, 0xc7, 0xab, 0x62, 0x8d, 0x37, 0x39, 0x67, 0xcd, 0x85,  // .2...I...b.79g..
//rdpproxy: INFO (3129/3129) -- Full NTLMAuthenticate Dump, len: 376
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,  // NTLMSSP.........
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x58, 0x00, 0x00, 0x00, 0xce, 0x00, 0xce, 0x00, 0x70, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,  // X.......p.......
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x3e, 0x01, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,  // >.......N.......
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x5c, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x68, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2,  // ........h...5...
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f, 0xc3, 0x32, 0x0f, 0x06, 0xcc, 0x49, 0xa6, 0xc7,  // .........2...I..
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0xab, 0x62, 0x8d, 0x37, 0x39, 0x67, 0xcd, 0x85, 0x43, 0x75, 0xc5, 0xf7, 0x38, 0xef, 0x91, 0x19,  // .b.79g..Cu..8...
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0xfe, 0xcc, 0xeb, 0xae, 0x4e, 0x4d, 0x4d, 0x9d, 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf,  // ....NMM.J17.....
//rdpproxy: INFO (3129/3129) -- /* 0070 */ 0x0f, 0x3b, 0xaf, 0xbd, 0x9f, 0xeb, 0x6a, 0x41, 0x2c, 0x76, 0x1a, 0x4d, 0x37, 0x8b, 0xb2, 0xe0,  // .;....jA,v.M7...
//rdpproxy: INFO (3129/3129) -- /* 0080 */ 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xc7, 0x0a, 0x00, 0xce, 0x0e, 0x82, 0x5d,  // ...............]
//rdpproxy: INFO (3129/3129) -- /* 0090 */ 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00,  // J17.............
//rdpproxy: INFO (3129/3129) -- /* 00a0 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
//rdpproxy: INFO (3129/3129) -- /* 00b0 */ 0x01, 0x00, 0x10, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ....W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 00c0 */ 0x47, 0x00, 0x52, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00,  // G.R.....p.r.o.x.
//rdpproxy: INFO (3129/3129) -- /* 00d0 */ 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,  // y.k.d.c...l.a.b.
//rdpproxy: INFO (3129/3129) -- /* 00e0 */ 0x03, 0x00, 0x2a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ..*.W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 00f0 */ 0x47, 0x00, 0x52, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // G.R...p.r.o.x.y.
//rdpproxy: INFO (3129/3129) -- /* 0100 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00,  // k.d.c...l.a.b...
//rdpproxy: INFO (3129/3129) -- /* 0110 */ 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00,  // ..p.r.o.x.y.k.d.
//rdpproxy: INFO (3129/3129) -- /* 0120 */ 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x15, 0xee,  // c...l.a.b.......
//rdpproxy: INFO (3129/3129) -- /* 0130 */ 0x19, 0x94, 0x10, 0x6e, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00,  // ...n..........P.
//rdpproxy: INFO (3129/3129) -- /* 0140 */ 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x68, 0x00,  // R.O.X.Y.K.D.C.h.
//rdpproxy: INFO (3129/3129) -- /* 0150 */ 0x65, 0x00, 0x72, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x67, 0x00,  // e.r.c.u.l.e.c.g.
//rdpproxy: INFO (3129/3129) -- /* 0160 */ 0x72, 0x00, 0x74, 0x00, 0x68, 0x00, 0x63, 0x00, 0x1f, 0xb6, 0xf2, 0x8a, 0x99, 0xb0, 0x10, 0x5e,  // r.t.h.c........^
//rdpproxy: INFO (3129/3129) -- /* 0170 */ 0xff, 0x27, 0x6f, 0x88, 0x3d, 0x24, 0x27, 0xe4,                                                  // .'o.=$'.
//rdpproxy: INFO (3129/3129) -- rdpClientNTLM::encrypt_public_key_echo
//rdpproxy: INFO (3129/3129) -- using /dev/urandom as random source
//rdpproxy: INFO (3129/3129) -- TSRequest hexdump ---------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version 6 ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest negoTokens ------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,  // NTLMSSP.........
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x58, 0x00, 0x00, 0x00, 0xce, 0x00, 0xce, 0x00, 0x70, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,  // X.......p.......
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x3e, 0x01, 0x00, 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00,  // >.......N.......
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x5c, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x68, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2,  // ........h...5...
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x06, 0x01, 0xb1, 0x1d, 0x00, 0x00, 0x00, 0x0f, 0xc3, 0x32, 0x0f, 0x06, 0xcc, 0x49, 0xa6, 0xc7,  // .........2...I..
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0xab, 0x62, 0x8d, 0x37, 0x39, 0x67, 0xcd, 0x85, 0x43, 0x75, 0xc5, 0xf7, 0x38, 0xef, 0x91, 0x19,  // .b.79g..Cu..8...
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0xfe, 0xcc, 0xeb, 0xae, 0x4e, 0x4d, 0x4d, 0x9d, 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf,  // ....NMM.J17.....
//rdpproxy: INFO (3129/3129) -- /* 0070 */ 0x0f, 0x3b, 0xaf, 0xbd, 0x9f, 0xeb, 0x6a, 0x41, 0x2c, 0x76, 0x1a, 0x4d, 0x37, 0x8b, 0xb2, 0xe0,  // .;....jA,v.M7...
//rdpproxy: INFO (3129/3129) -- /* 0080 */ 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xc7, 0x0a, 0x00, 0xce, 0x0e, 0x82, 0x5d,  // ...............]
//rdpproxy: INFO (3129/3129) -- /* 0090 */ 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00,  // J17.............
//rdpproxy: INFO (3129/3129) -- /* 00a0 */ 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00,  // P.R.O.X.Y.K.D.C.
//rdpproxy: INFO (3129/3129) -- /* 00b0 */ 0x01, 0x00, 0x10, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ....W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 00c0 */ 0x47, 0x00, 0x52, 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00,  // G.R.....p.r.o.x.
//rdpproxy: INFO (3129/3129) -- /* 00d0 */ 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,  // y.k.d.c...l.a.b.
//rdpproxy: INFO (3129/3129) -- /* 00e0 */ 0x03, 0x00, 0x2a, 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00,  // ..*.W.I.N.1.0.C.
//rdpproxy: INFO (3129/3129) -- /* 00f0 */ 0x47, 0x00, 0x52, 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00,  // G.R...p.r.o.x.y.
//rdpproxy: INFO (3129/3129) -- /* 0100 */ 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00,  // k.d.c...l.a.b...
//rdpproxy: INFO (3129/3129) -- /* 0110 */ 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00,  // ..p.r.o.x.y.k.d.
//rdpproxy: INFO (3129/3129) -- /* 0120 */ 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x15, 0xee,  // c...l.a.b.......
//rdpproxy: INFO (3129/3129) -- /* 0130 */ 0x19, 0x94, 0x10, 0x6e, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00,  // ...n..........P.
//rdpproxy: INFO (3129/3129) -- /* 0140 */ 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x68, 0x00,  // R.O.X.Y.K.D.C.h.
//rdpproxy: INFO (3129/3129) -- /* 0150 */ 0x65, 0x00, 0x72, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x67, 0x00,  // e.r.c.u.l.e.c.g.
//rdpproxy: INFO (3129/3129) -- /* 0160 */ 0x72, 0x00, 0x74, 0x00, 0x68, 0x00, 0x63, 0x00, 0x1f, 0xb6, 0xf2, 0x8a, 0x99, 0xb0, 0x10, 0x5e,  // r.t.h.c........^
//rdpproxy: INFO (3129/3129) -- /* 0170 */ 0xff, 0x27, 0x6f, 0x88, 0x3d, 0x24, 0x27, 0xe4,                                                  // .'o.=$'.
//rdpproxy: INFO (3129/3129) -- TSRequest authInfo --------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest pubkeyAuth ------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x01, 0x00, 0x00, 0x00, 0x59, 0x3f, 0xf3, 0xb6, 0x68, 0x70, 0x6e, 0x3d, 0x00, 0x00, 0x00, 0x00,  // ....Y?..hpn=....
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0xfa, 0x60, 0xb4, 0x9c, 0x26, 0xba, 0x36, 0xae, 0x0c, 0x7e, 0x0a, 0xfb, 0x12, 0x76, 0xf8, 0x9f,  // .`..&.6..~...v..
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0xde, 0x15, 0x25, 0xfd, 0x82, 0x71, 0x75, 0x7b, 0x55, 0x73, 0x15, 0x5d, 0xb2, 0xe0, 0xaa, 0x34,  // ..%..qu{Us.]...4
//rdpproxy: INFO (3129/3129) -- TSRequest error_code 0 ---------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest clientNonce -----------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x82, 0x58, 0x35, 0x22, 0xda, 0x44, 0xdd, 0x6a, 0x09, 0xca, 0xb2, 0x8c, 0xcf, 0xa3, 0x32, 0x76,  // .X5".D.j......2v
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x7c, 0x0c, 0x00, 0x2a, 0x39, 0x2b, 0x0d, 0x74, 0x88, 0x8c, 0xdc, 0xb2, 0x54, 0x52, 0x82, 0xc7,  // |..*9+.t....TR..
//rdpproxy: INFO (3129/3129) -- TSRequest ts_request_header -----------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version_field ---------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa0, 0x03, 0x02, 0x01, 0x06,                                                                    // .....
//rdpproxy: INFO (3129/3129) -- TSRequest nego_tokens_header ----------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa1, 0x82, 0x01, 0x88, 0x30, 0x82, 0x01, 0x84, 0x30, 0x82, 0x01, 0x80, 0xa0, 0x82, 0x01, 0x7c,  // ....0...0......|
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x04, 0x82, 0x01, 0x78,                                                                          // ...x
//rdpproxy: INFO (3129/3129) -- TSRequest auth_info_header ------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest pub_key_auth_header ---------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa3, 0x32, 0x04, 0x30,                                                                          // .2.0
//rdpproxy: INFO (3129/3129) -- TSRequest error_code field ------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest nonce -----------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa5, 0x22, 0x04, 0x20,                                                                          // .".
//rdpproxy: INFO (3129/3129) -- emit TSRequest full dump--------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x30, 0x82, 0x01, 0xe9, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa1, 0x82, 0x01, 0x88, 0x30, 0x82, 0x01,  // 0............0..
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x84, 0x30, 0x82, 0x01, 0x80, 0xa0, 0x82, 0x01, 0x7c, 0x04, 0x82, 0x01, 0x78, 0x4e, 0x54, 0x4c,  // .0......|...xNTL
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x4d, 0x53, 0x53, 0x50, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x58, 0x00, 0x00,  // MSSP.........X..
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x00, 0xce, 0x00, 0xce, 0x00, 0x70, 0x00, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00, 0x3e, 0x01, 0x00,  // .....p.......>..
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x00, 0x0e, 0x00, 0x0e, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x00, 0x5c, 0x01, 0x00,  // .....N..........
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0x00, 0x10, 0x00, 0x10, 0x00, 0x68, 0x01, 0x00, 0x00, 0x35, 0xa2, 0x88, 0xe2, 0x06, 0x01, 0xb1,  // .....h...5......
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0x1d, 0x00, 0x00, 0x00, 0x0f, 0xc3, 0x32, 0x0f, 0x06, 0xcc, 0x49, 0xa6, 0xc7, 0xab, 0x62, 0x8d,  // ......2...I...b.
//rdpproxy: INFO (3129/3129) -- /* 0070 */ 0x37, 0x39, 0x67, 0xcd, 0x85, 0x43, 0x75, 0xc5, 0xf7, 0x38, 0xef, 0x91, 0x19, 0xfe, 0xcc, 0xeb,  // 79g..Cu..8......
//rdpproxy: INFO (3129/3129) -- /* 0080 */ 0xae, 0x4e, 0x4d, 0x4d, 0x9d, 0x4a, 0x31, 0x37, 0xbf, 0xde, 0xf8, 0xe9, 0xaf, 0x0f, 0x3b, 0xaf,  // .NMM.J17......;.
//rdpproxy: INFO (3129/3129) -- /* 0090 */ 0xbd, 0x9f, 0xeb, 0x6a, 0x41, 0x2c, 0x76, 0x1a, 0x4d, 0x37, 0x8b, 0xb2, 0xe0, 0x01, 0x01, 0x00,  // ...jA,v.M7......
//rdpproxy: INFO (3129/3129) -- /* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0xc7, 0x0a, 0x00, 0xce, 0x0e, 0x82, 0x5d, 0x4a, 0x31, 0x37,  // ............]J17
//rdpproxy: INFO (3129/3129) -- /* 00b0 */ 0xbf, 0xde, 0xf8, 0xe9, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x50, 0x00, 0x52,  // .............P.R
//rdpproxy: INFO (3129/3129) -- /* 00c0 */ 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x01, 0x00, 0x10,  // .O.X.Y.K.D.C....
//rdpproxy: INFO (3129/3129) -- /* 00d0 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52,  // .W.I.N.1.0.C.G.R
//rdpproxy: INFO (3129/3129) -- /* 00e0 */ 0x00, 0x04, 0x00, 0x18, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b,  // .....p.r.o.x.y.k
//rdpproxy: INFO (3129/3129) -- /* 00f0 */ 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x03, 0x00, 0x2a,  // .d.c...l.a.b...*
//rdpproxy: INFO (3129/3129) -- /* 0100 */ 0x00, 0x57, 0x00, 0x49, 0x00, 0x4e, 0x00, 0x31, 0x00, 0x30, 0x00, 0x43, 0x00, 0x47, 0x00, 0x52,  // .W.I.N.1.0.C.G.R
//rdpproxy: INFO (3129/3129) -- /* 0110 */ 0x00, 0x2e, 0x00, 0x70, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64,  // ...p.r.o.x.y.k.d
//rdpproxy: INFO (3129/3129) -- /* 0120 */ 0x00, 0x63, 0x00, 0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x05, 0x00, 0x18, 0x00, 0x70,  // .c...l.a.b.....p
//rdpproxy: INFO (3129/3129) -- /* 0130 */ 0x00, 0x72, 0x00, 0x6f, 0x00, 0x78, 0x00, 0x79, 0x00, 0x6b, 0x00, 0x64, 0x00, 0x63, 0x00, 0x2e,  // .r.o.x.y.k.d.c..
//rdpproxy: INFO (3129/3129) -- /* 0140 */ 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00, 0x07, 0x00, 0x08, 0x00, 0x15, 0xee, 0x19, 0x94, 0x10,  // .l.a.b..........
//rdpproxy: INFO (3129/3129) -- /* 0150 */ 0x6e, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x52, 0x00, 0x4f,  // n..........P.R.O
//rdpproxy: INFO (3129/3129) -- /* 0160 */ 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72,  // .X.Y.K.D.C.h.e.r
//rdpproxy: INFO (3129/3129) -- /* 0170 */ 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x63, 0x00, 0x67, 0x00, 0x72, 0x00, 0x74,  // .c.u.l.e.c.g.r.t
//rdpproxy: INFO (3129/3129) -- /* 0180 */ 0x00, 0x68, 0x00, 0x63, 0x00, 0x1f, 0xb6, 0xf2, 0x8a, 0x99, 0xb0, 0x10, 0x5e, 0xff, 0x27, 0x6f,  // .h.c........^.'o
//rdpproxy: INFO (3129/3129) -- /* 0190 */ 0x88, 0x3d, 0x24, 0x27, 0xe4, 0xa3, 0x32, 0x04, 0x30, 0x01, 0x00, 0x00, 0x00, 0x59, 0x3f, 0xf3,  // .=$'..2.0....Y?.
//rdpproxy: INFO (3129/3129) -- /* 01a0 */ 0xb6, 0x68, 0x70, 0x6e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x60, 0xb4, 0x9c, 0x26, 0xba, 0x36,  // .hpn=.....`..&.6
//rdpproxy: INFO (3129/3129) -- /* 01b0 */ 0xae, 0x0c, 0x7e, 0x0a, 0xfb, 0x12, 0x76, 0xf8, 0x9f, 0xde, 0x15, 0x25, 0xfd, 0x82, 0x71, 0x75,  // ..~...v....%..qu
//rdpproxy: INFO (3129/3129) -- /* 01c0 */ 0x7b, 0x55, 0x73, 0x15, 0x5d, 0xb2, 0xe0, 0xaa, 0x34, 0xa5, 0x22, 0x04, 0x20, 0x82, 0x58, 0x35,  // {Us.]...4.". .X5
//rdpproxy: INFO (3129/3129) -- /* 01d0 */ 0x22, 0xda, 0x44, 0xdd, 0x6a, 0x09, 0xca, 0xb2, 0x8c, 0xcf, 0xa3, 0x32, 0x76, 0x7c, 0x0c, 0x00,  // ".D.j......2v|..
//rdpproxy: INFO (3129/3129) -- /* 01e0 */ 0x2a, 0x39, 0x2b, 0x0d, 0x74, 0x88, 0x8c, 0xdc, 0xb2, 0x54, 0x52, 0x82, 0xc7,                    // *9+.t....TR..
//rdpproxy: INFO (3129/3129) -- emit TSRequest hexdump -DONE----------------------------
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_next_data::Credssp
//rdpproxy: INFO (3129/3129) -- RdpNego::recv_credssp
//rdpproxy: INFO (3129/3129) -- Client Authentication : Receiving Encrypted PubKey + 1
//rdpproxy: INFO (3129/3129) -- recv TSRequest full dump--------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ "\x30\x39\xa0\x03\x02\x01\x06\xa3\x32\x04\x30\x01\x00\x00\x00\x81" // 09......2.0.....
//rdpproxy: INFO (3129/3129) -- /* 0010 */ "\xff\x22\x2c\xe9\x58\xa2\x52\x00\x00\x00\x00\xe8\xfc\x2a\x49\xef" // .",.X.R......*I.
//rdpproxy: INFO (3129/3129) -- /* 0020 */ "\xc0\xfa\x8a\x1c\xf0\x2a\x18\xc5\xa4\xb0\x8e\xbf\x86\xb1\x9a\x34" // .....*.........4
//rdpproxy: INFO (3129/3129) -- /* 0030 */ "\x97\x46\xa5\x45\x06\x40\x77\xed\x71\x33\xc1"                     // .F.E.@w.q3.
//rdpproxy: INFO (3129/3129) -- recv TSRequest hexdump - START PARSING DATA-------------
//rdpproxy: INFO (3129/3129) -- Credssp recvTSRequest() Remote Version 6, Negotiated version 6
//rdpproxy: INFO (3129/3129) -- rdpClientNTLM::encrypt_ts_credentials
//rdpproxy: INFO (3129/3129) -- TSCredentialsPassword: Domain User Password
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x30, 0x51, 0xa0, 0x03, 0x02, 0x01, 0x01, 0xa1, 0x4a, 0x04, 0x48, 0x30, 0x46, 0xa0, 0x12, 0x04,  // 0Q......J.H0F...
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x10, 0x50, 0x00, 0x52, 0x00, 0x4f, 0x00, 0x58, 0x00, 0x59, 0x00, 0x4b, 0x00, 0x44, 0x00, 0x43,  // .P.R.O.X.Y.K.D.C
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x00, 0xa1, 0x10, 0x04, 0x0e, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6c,  // .....h.e.r.c.u.l
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x00, 0x65, 0x00, 0xa2, 0x1e, 0x04, 0x1c, 0x53, 0x00, 0x65, 0x00, 0x63, 0x00, 0x75, 0x00, 0x72,  // .e.....S.e.c.u.r
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x00, 0x65, 0x00, 0x4c, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x75, 0x00, 0x78, 0x00, 0x24, 0x00, 0x34,  // .e.L.i.n.u.x.$.4
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0x00, 0x32, 0x00,                                                                                // .2.
//rdpproxy: INFO (3129/3129) -- TSRequest hexdump ---------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version 6 ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest negoTokens ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest authInfo --------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x01, 0x00, 0x00, 0x00, 0xb2, 0x64, 0x06, 0x56, 0x16, 0xdc, 0x02, 0x18, 0x01, 0x00, 0x00, 0x00,  // .....d.V........
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x83, 0x8c, 0xb0, 0x36, 0xae, 0x56, 0x7f, 0xc1, 0xc0, 0xc0, 0x80, 0x31, 0xa3, 0x3b, 0xa3, 0xec,  // ...6.V.....1.;..
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0x13, 0xd2, 0x82, 0xcd, 0x47, 0xdc, 0xee, 0xd1, 0xec, 0x91, 0xd6, 0x63, 0xcf, 0xba, 0x8b, 0xd6,  // ....G......c....
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x2e, 0x5b, 0x09, 0x1c, 0xc0, 0xbb, 0xda, 0x2e, 0x49, 0x34, 0xe2, 0x33, 0x38, 0x24, 0x8e, 0xc9,  // .[......I4.38$..
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0x01, 0x6d, 0x65, 0x6b, 0xce, 0x18, 0xd2, 0xc5, 0x0f, 0xe6, 0xfa, 0x5f, 0x90, 0x15, 0xa6, 0xcd,  // .mek......._....
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0x76, 0xd6, 0x8b, 0xe9, 0x4d, 0x56, 0x36, 0xdb, 0x90, 0x2b, 0xd6, 0x75, 0xbc, 0xff, 0xae, 0xa3,  // v...MV6..+.u....
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0xa4, 0xba, 0x02,                                                                                // ...
//rdpproxy: INFO (3129/3129) -- TSRequest pubkeyAuth ------------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest error_code 0 ---------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest clientNonce -----------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x82, 0x58, 0x35, 0x22, 0xda, 0x44, 0xdd, 0x6a, 0x09, 0xca, 0xb2, 0x8c, 0xcf, 0xa3, 0x32, 0x76,  // .X5".D.j......2v
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0x7c, 0x0c, 0x00, 0x2a, 0x39, 0x2b, 0x0d, 0x74, 0x88, 0x8c, 0xdc, 0xb2, 0x54, 0x52, 0x82, 0xc7,  // |..*9+.t....TR..
//rdpproxy: INFO (3129/3129) -- TSRequest ts_request_header -----------------------
//rdpproxy: INFO (3129/3129) -- TSRequest version_field ---------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa0, 0x03, 0x02, 0x01, 0x06,                                                                    // .....
//rdpproxy: INFO (3129/3129) -- TSRequest nego_tokens_header ----------------------
//rdpproxy: INFO (3129/3129) -- TSRequest auth_info_header ------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa2, 0x65, 0x04, 0x63,                                                                          // .e.c
//rdpproxy: INFO (3129/3129) -- TSRequest pub_key_auth_header ---------------------
//rdpproxy: INFO (3129/3129) -- TSRequest error_code field ------------------------
//rdpproxy: INFO (3129/3129) -- TSRequest nonce -----------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xa5, 0x22, 0x04, 0x20,                                                                          // .".
//rdpproxy: INFO (3129/3129) -- emit TSRequest full dump--------------------------------
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0x30, 0x81, 0x90, 0xa0, 0x03, 0x02, 0x01, 0x06, 0xa2, 0x65, 0x04, 0x63, 0x01, 0x00, 0x00, 0x00,  // 0........e.c....
//rdpproxy: INFO (3129/3129) -- /* 0010 */ 0xb2, 0x64, 0x06, 0x56, 0x16, 0xdc, 0x02, 0x18, 0x01, 0x00, 0x00, 0x00, 0x83, 0x8c, 0xb0, 0x36,  // .d.V...........6
//rdpproxy: INFO (3129/3129) -- /* 0020 */ 0xae, 0x56, 0x7f, 0xc1, 0xc0, 0xc0, 0x80, 0x31, 0xa3, 0x3b, 0xa3, 0xec, 0x13, 0xd2, 0x82, 0xcd,  // .V.....1.;......
//rdpproxy: INFO (3129/3129) -- /* 0030 */ 0x47, 0xdc, 0xee, 0xd1, 0xec, 0x91, 0xd6, 0x63, 0xcf, 0xba, 0x8b, 0xd6, 0x2e, 0x5b, 0x09, 0x1c,  // G......c.....[..
//rdpproxy: INFO (3129/3129) -- /* 0040 */ 0xc0, 0xbb, 0xda, 0x2e, 0x49, 0x34, 0xe2, 0x33, 0x38, 0x24, 0x8e, 0xc9, 0x01, 0x6d, 0x65, 0x6b,  // ....I4.38$...mek
//rdpproxy: INFO (3129/3129) -- /* 0050 */ 0xce, 0x18, 0xd2, 0xc5, 0x0f, 0xe6, 0xfa, 0x5f, 0x90, 0x15, 0xa6, 0xcd, 0x76, 0xd6, 0x8b, 0xe9,  // ......._....v...
//rdpproxy: INFO (3129/3129) -- /* 0060 */ 0x4d, 0x56, 0x36, 0xdb, 0x90, 0x2b, 0xd6, 0x75, 0xbc, 0xff, 0xae, 0xa3, 0xa4, 0xba, 0x02, 0xa5,  // MV6..+.u........
//rdpproxy: INFO (3129/3129) -- /* 0070 */ 0x22, 0x04, 0x20, 0x82, 0x58, 0x35, 0x22, 0xda, 0x44, 0xdd, 0x6a, 0x09, 0xca, 0xb2, 0x8c, 0xcf,  // ". .X5".D.j.....
//rdpproxy: INFO (3129/3129) -- /* 0080 */ 0xa3, 0x32, 0x76, 0x7c, 0x0c, 0x00, 0x2a, 0x39, 0x2b, 0x0d, 0x74, 0x88, 0x8c, 0xdc, 0xb2, 0x54,  // .2v|..*9+.t....T
//rdpproxy: INFO (3129/3129) -- /* 0090 */ 0x52, 0x82, 0xc7,                                                                                // R..
//rdpproxy: INFO (3129/3129) -- emit TSRequest hexdump -DONE----------------------------
//rdpproxy: INFO (3129/3129) -- CS_Cluster: Server Redirection Supported
//rdpproxy: INFO (3129/3129) -- GCC::UserData tag=0c01 length=16
//rdpproxy: INFO (3129/3129) -- GCC::UserData tag=0c03 length=16
//rdpproxy: INFO (3129/3129) -- GCC::UserData tag=0c02 length=12
//rdpproxy: INFO (3129/3129) -- =================== SC_SECURITY =============
//rdpproxy: INFO (3129/3129) -- No encryption
//rdpproxy: INFO (3129/3129) -- send extended login info (RDP5-style) 107fb PROXYKDC:hercule
//rdpproxy: INFO (3129/3129) -- Rdp::Get license: username="hercule@PROXYKDC"
//rdpproxy: INFO (3129/3129) -- RdpNegociation::get_license LIC::RecvFactory::flic.tag=255
//rdpproxy: INFO (3129/3129) -- /* 0000 */ 0xff, 0x03, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,  // ................
//rdpproxy: INFO (3129/3129) -- use rdp5
//rdpproxy: INFO (3129/3129) -- mod_rdp::send_input_fastpath: Synchronize Event toggleFlags=0x0
//rdpproxy: INFO (3129/3129) -- Rdp::receiving the server-to-client Monitor Layout PDU MonitorLayoutPDU monitorCount=1 ((left=0, top=0, right=1023, bottom=767, primary=yes(0x1)))
//rdpproxy: INFO (3129/3129) -- Resizing to 1024x768x16
//rdpproxy: [RDP Session] session_id="SESSIONID-0000" client_ip="10.10.43.12" target_ip="WIN10CGR.proxykdc.lab" user="u" device="win10" service="rdp" account="PROXYKDC\\hercule" type="SESSION_ESTABLISHED_SUCCESSFULLY"
//rdpproxy: INFO (3129/3129) -- mod_rdp::send_input_fastpath: Synchronize Event toggleFlags=0x0
//rdpproxy: INFO (3129/3129) -- Front::can_be_start_capture: Capture is not necessary
//rdpproxy: INFO (3129/3129) -- process save session info : Logon long
//rdpproxy: INFO (3129/3129) -- Logon Info Version 2 (data): Domain="PROXYKDC" UserName="hercule" SessionId=2
//rdpproxy: INFO (3129/3129) -- process save session info : Logon extended info
//rdpproxy: INFO (3129/3129) -- process save session info : Auto-reconnect cookie
//rdpproxy: INFO (3129/3129) -- ServerAutoReconnectPacket: Version=1 LogonId=2
//rdpproxy: INFO (3129/3129) -- 0000 90 c2 62 1b 68 2b db 4f c1 18 ed b0 86 fa 57 59  ..b.h+.O......WY
//rdpproxy: INFO (3129/3129) -- Front::incoming: (Fast-Path) Synchronize Event toggleFlags=0x0
//rdpproxy: INFO (3129/3129) -- mod_rdp::send_input_fastpath: Synchronize Event toggleFlags=0x0
