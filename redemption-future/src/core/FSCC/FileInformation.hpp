/*
    This program is free software; you can redistribute it and/or modify it
     under the terms of the GNU General Public License as published by the
     Free Software Foundation; either version 2 of the License, or (at your
     option) any later version.

    This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
     Public License for more details.

    You should have received a copy of the GNU General Public License along
     with this program; if not, write to the Free Software Foundation, Inc.,
     675 Mass Ave, Cambridge, MA 02139, USA.

    Product name: redemption, a FLOSS RDP proxy
    Copyright (C) Wallix 2015
    Author(s): Christophe Grosjean, Raphael Zhou, Cl√©ment Moroldo
*/

#pragma once

#include "core/error.hpp"

#include "utils/log.hpp"
#include "utils/sugar/cast.hpp"
#include "utils/sugar/array_view.hpp"
#include "utils/stream.hpp"
#include "utils/hexdump.hpp"
#include "utils/utf.hpp"
#include "core/ERREF/ntstatus.hpp"
#include "core/stream_throw_helpers.hpp"

#include <string>
#include <cinttypes>


namespace fscc {

// [MS-FSCC] - 2.1.8 Boolean
// =========================

// A Boolean data type is a primitive that has one of two possible values:
//  TRUE and FALSE, which are defined as follows:

//  TRUE: A sender MUST use any nonzero value to denote a TRUE. A receiver
//   MUST interpret any nonzero value as TRUE.<9>

//  FALSE: A sender MUST use a zero value to denote a FALSE. A receiver MUST
//   interpret a zero value as FALSE.

// [MS-FSCC] - 2.2 Status Codes
// ============================

// This specification uses NTSTATUS status codes, as specified in [MS-ERREF]
//  section 2.3. The format of a status code MUST be as specified in
//  [MS-ERREF].

// The reply message for each FSCTL lists the error codes that are directly
//  generated by the function that implements the specified FSCTL. Error
//  codes also may be generated by code below the file system (such as RAID
//  drivers or disk drivers) or above the file system (such as virus
//  scanners).

// A server SHOULD return a status of STATUS_INVALID_DEVICE_REQUEST when an
//  FSCTL is not supported remotely or is not supported on the file system on
//  which the file or directory handle specified by the FSCTL exists.<10><11>

// STATUS_BUFFER_OVERFLOW is a warning code and not an error code. This
//  warning means that the given output buffer is not large enough to contain
//  all of the requested information. Unless otherwise noted, a given
//  operation SHOULD attempt to return as much data as it reasonably can.

// [MS-FSCC] - 2.3 FSCTL Structures
// ================================

// A process invokes an FSCTL on a handle to perform an action against the
//  file or directory associated with the handle. When a server receives an
//  FSCTL request, it SHOULD use the information in the request, which
//  includes a handle and, optionally, an input data buffer, to perform the
//  requested action. How a server performs the action requested by an FSCTL
//  is implementation-dependent.<12>

// The following table specifies the system-defined generic FSCTLs that are
//  permitted to be invoked across the network. Generic FSCTLs are used by
//  the local file systems or by multiple components within the system. Any
//  application, service, or driver may define private FSCTLs. Most private
//  FSCTLs are used locally in the internal driver stacks and do not flow
//  over the wire. However, if a component allows its private FSCTLs to flow
//  over the wire, that component is responsible for ensuring the FSCTLs and
//  associated data structures are documented. Examples of such private
//  FSCTLs can be found in [MS-SMB2] and [MS-DFSC].

//  +-----------------------------------------+-----------------------+
//  | FSCTL name                              | FSCTL function number |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_CREATE_OR_GET_OBJECT_ID           | 0x900c0               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_DELETE_OBJECT_ID                  | 0x900a0               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_DELETE_REPARSE_POINT              | 0x900ac               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_FILE_LEVEL_TRIM                   | 0x98208               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_FILESYSTEM_GET_STATISTICS         | 0x90060               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_FIND_FILES_BY_SID                 | 0x9008f               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_COMPRESSION                   | 0x9003c               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_INTEGRITY_INFORMATION         | 0x9027c               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_NTFS_VOLUME_DATA              | 0x90064               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_REFS_VOLUME_DATA              | 0x902D8               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_OBJECT_ID                     | 0x9009c               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_REPARSE_POINT                 | 0x900a8               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_GET_RETRIEVAL_POINTERS            | 0x90073               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_IS_PATHNAME_VALID                 | 0x9002c               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_LMR_SET_LINK_TRACKING_INFORMATION | 0x1400ec              |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_OFFLOAD_READ                      | 0x94264               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_OFFLOAD_WRITE                     | 0x98268               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_PIPE_PEEK                         | 0x11400c              |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_PIPE_TRANSCEIVE                   | 0x11c017              |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_PIPE_WAIT                         | 0x110018              |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_QUERY_ALLOCATED_RANGES            | 0x940cf               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_QUERY_FAT_BPB                     | 0x90058               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_QUERY_FILE_REGIONS                | 0x90284               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_QUERY_ON_DISK_VOLUME_INFO         | 0x9013c               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_QUERY_SPARING_INFO                | 0x90138               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_READ_FILE_USN_DATA                | 0x900eb               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_RECALL_FILE                       | 0x90117               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_COMPRESSION                   | 0x9c040               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_DEFECT_MANAGEMENT             | 0x98134               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_ENCRYPTION                    | 0x900D7               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_INTEGRITY_INFORMATION         | 0x9C280               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_OBJECT_ID                     | 0x90098               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_OBJECT_ID_EXTENDED            | 0x900bc               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_REPARSE_POINT                 | 0x900a4               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_SPARSE                        | 0x900c4               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_ZERO_DATA                     | 0x980c8               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SET_ZERO_ON_DEALLOCATION          | 0x90194               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_SIS_COPYFILE                      | 0x90100               |
//  +-----------------------------------------+-----------------------+
//  | FSCTL_WRITE_USN_CLOSE_RECORD            | 0x900ef               |
//  +-----------------------------------------+-----------------------+

enum {
      FSCTL_CREATE_OR_GET_OBJECT_ID           = 0x900c0
    , FSCTL_DELETE_OBJECT_ID                  = 0x900a0
    , FSCTL_DELETE_REPARSE_POINT              = 0x900ac
    , FSCTL_FILE_LEVEL_TRIM                   = 0x98208
    , FSCTL_FILESYSTEM_GET_STATISTICS         = 0x90060
    , FSCTL_FIND_FILES_BY_SID                 = 0x9008f
    , FSCTL_GET_COMPRESSION                   = 0x9003c
    , FSCTL_GET_INTEGRITY_INFORMATION         = 0x9027c
    , FSCTL_GET_NTFS_VOLUME_DATA              = 0x90064
    , FSCTL_GET_REFS_VOLUME_DATA              = 0x902D8
    , FSCTL_GET_OBJECT_ID                     = 0x9009c
    , FSCTL_GET_REPARSE_POINT                 = 0x900a8
    , FSCTL_GET_RETRIEVAL_POINTERS            = 0x90073
    , FSCTL_IS_PATHNAME_VALID                 = 0x9002c
    , FSCTL_LMR_SET_LINK_TRACKING_INFORMATION = 0x1400ec
    , FSCTL_OFFLOAD_READ                      = 0x94264
    , FSCTL_OFFLOAD_WRITE                     = 0x98268
    , FSCTL_PIPE_PEEK                         = 0x11400c
    , FSCTL_PIPE_TRANSCEIVE                   = 0x11c017
    , FSCTL_PIPE_WAIT                         = 0x110018
    , FSCTL_QUERY_ALLOCATED_RANGES            = 0x940cf
    , FSCTL_QUERY_FAT_BPB                     = 0x90058
    , FSCTL_QUERY_FILE_REGIONS                = 0x90284
    , FSCTL_QUERY_ON_DISK_VOLUME_INFO         = 0x9013c
    , FSCTL_QUERY_SPARING_INFO                = 0x90138
    , FSCTL_READ_FILE_USN_DATA                = 0x900eb
    , FSCTL_RECALL_FILE                       = 0x90117
    , FSCTL_SET_COMPRESSION                   = 0x9c040
    , FSCTL_SET_DEFECT_MANAGEMENT             = 0x98134
    , FSCTL_SET_ENCRYPTION                    = 0x900D7
    , FSCTL_SET_INTEGRITY_INFORMATION         = 0x9C280
    , FSCTL_SET_OBJECT_ID                     = 0x90098
    , FSCTL_SET_OBJECT_ID_EXTENDED            = 0x900bc
    , FSCTL_SET_REPARSE_POINT                 = 0x900a4
    , FSCTL_SET_SPARSE                        = 0x900c4
    , FSCTL_SET_ZERO_DATA                     = 0x980c8
    , FSCTL_SET_ZERO_ON_DEALLOCATION          = 0x90194
    , FSCTL_SIS_COPYFILE                      = 0x90100
    , FSCTL_WRITE_USN_CLOSE_RECORD            = 0x900ef
};

inline static const char * get_FSCTLStructures(uint32_t FSCTLStructures) {
    switch (FSCTLStructures) {
        case FSCTL_CREATE_OR_GET_OBJECT_ID: return "FSCTL_CREATE_OR_GET_OBJECT_ID";
        case FSCTL_DELETE_OBJECT_ID:        return "FSCTL_DELETE_OBJECT_ID";
        case FSCTL_GET_OBJECT_ID:           return "FSCTL_GET_OBJECT_ID";
    }

    return "unknown";
}

// [MS-FSCC]: File System Control Codes

// 2.6 File Attributes

// The following attributes are defined for files and directories. They can be used in any combination unless noted in the description of the attribute's meaning. There is no file attribute with the value 0x00000000 because a value of 0x00000000 in the FileAttributes field means that the file attributes for this file MUST NOT be changed when setting basic information for the file.

//  +------------------------------------+-----------------------------------------------+
//  | Value                              | Meaning                                       |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_ARCHIVE             | A file or directory that is an archive file   |
//  | 0x00000020                         | or directory. Applications typically use this |
//  |                                    | attribute to mark files for backup or         |
//  |                                    | removal.                                      |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_COMPRESSED          | A file or directory that is compressed.       |
//  | 0x00000800                         | For a file, all of the data in the file is    |
//  |                                    | compressed. For a directory, compression is   |
//  |                                    | the default for newly created files and       |
//  |                                    | subdirectories.                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_DIRECTORY           | Identifies a directory.                       |
//  | 0x00000010                         |                                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_ENCRYPTED           | A file or directory that is encrypted.        |
//  | 0x00004000                         | For a file, all data streams in the file are  |
//  |                                    | encrypted. For a directory, encryption is     |
//  |                                    | default for newly created files and           |
//  |                                    | subdirectories.                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_HIDDEN              | A file or directory is hidden. It is not      |
//  | 0x00000002                         | included in an ordinary directory listing.    |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_NORMAL              | A file that does not have other attributes    |
//  | 0x00000080                         | set. set. This flag is used to clear all      |
//  |                                    | other flags by specifying it with no other    |
//  |                                    | flags set.                                    |
//  |                                    | This flag MUST be ignored if other flags are  |
//  |                                    | set.<163>                                     |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_NOT_CONTENT_INDEXED | A file or directory that is not indexed by    |
//  | 0x00002000                         | the content indexing service.                 |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_OFFLINE             | The data in this file is not available        |
//  | 0x00001000                         | immediately. This attribute indicates that    |
//  |                                    | the file data is physically moved to offline  |
//  |                                    | storage. This attribute is used by Remote     |
//  |                                    | Storage, which is hierarchical storage        |
//  |                                    | management software.                          |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_READONLY            | A file or directory that is read-only. For a  |
//  | 0x00000001                         | file, applications can read the file but      |
//  |                                    | cannot write to it or delete it. For a        |
//  |                                    | directory, applications cannot delete it, but |
//  |                                    | applications can create and delete files from |
//  |                                    | that directory.                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_REPARSE_POINT       | A file or directory that has an associated    |
//  | 0x00000400                         | reparse point.                                |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_SPARSE_FILE         | A file that is a sparse file.                 |
//  | 0x00000200                         |                                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_SYSTEM              | A file or directory that the operating system |
//  | 0x00000004                         | uses a part of, or uses exclusively.          |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_TEMPORARY           | A file or directory that is configured with   |
//  | 0x00000100                         | integrity support. For a file, all data       |
//  |                                    | streams in the file have integrity support.   |
//  |                                    | For a directory, integrity support is the     |
//  |                                    | default for newly created files and           |
//  |                                    | subdirectories, unless the caller specifies   |
//  |                                    | otherwise.<164>                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_INTEGRITY_STREAM    | A file or directory that is configured with   |
//  | 0x00008000                         | integrity support. For a file, all data       |
//  |                                    | streams in the file have integrity support.   |
//  |                                    | For a directory, integrity support is the     |
//  |                                    | default for newly created files and           |
//  |                                    | subdirectories, unless the caller specifies   |
//  |                                    | otherwise.<164>                               |
//  +------------------------------------+-----------------------------------------------+
//  | FILE_ATTRIBUTE_NO_SCRUB_DATA       | A file or directory that is configured to be  |
//  | 0x00020000                         | excluded from the data integrity scan. For a  |
//  |                                    | directory configured with                     |
//  |                                    | FILE_ATTRIBUTE_NO_SCRUB_DATA, the default for |
//  |                                    | newly created files and subdirectories is to  |
//  |                                    | inherit the FILE_ATTRIBUTE_NO_SCRUB_DATA      |
//  |                                    | attribute.<165>                               |
//  +------------------------------------+-----------------------------------------------+

// TODO enum class FileAttribute:uint32_t{None, Readonly, ...}
enum : uint32_t {
    FILE_ATTRIBUTE_NONE                = 0,
    FILE_ATTRIBUTE_READONLY            = 0x00000001,
    FILE_ATTRIBUTE_HIDDEN              = 0x00000002,
    FILE_ATTRIBUTE_SYSTEM              = 0x00000004,
    FILE_ATTRIBUTE_DIRECTORY           = 0x00000010,
    FILE_ATTRIBUTE_ARCHIVE             = 0x00000020,
    FILE_ATTRIBUTE_NORMAL              = 0x00000080,
    FILE_ATTRIBUTE_TEMPORARY           = 0x00000100,
    FILE_ATTRIBUTE_SPARSE_FILE         = 0x00000200,
    FILE_ATTRIBUTE_REPARSE_POINT       = 0x00000400,
    FILE_ATTRIBUTE_OFFLINE             = 0x00001000,
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000,
    FILE_ATTRIBUTE_ENCRYPTED           = 0x00004000,
    FILE_ATTRIBUTE_COMPRESSED          = 0x00000800,
    FILE_ATTRIBUTE_INTEGRITY_STREAM    = 0x00008000,
    FILE_ATTRIBUTE_NO_SCRUB_DATA       = 0x00020000
};

static inline
void log_file_attributes(uint32_t fileAttributes)
{
#define ASTR(f) (fileAttributes & f) ? " " #f : ""
    LOG(LOG_INFO, "          * FileAttributes = 0x%08x "
        "(4 bytes):%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
        fileAttributes,
        ASTR(FILE_ATTRIBUTE_READONLY),
        ASTR(FILE_ATTRIBUTE_HIDDEN),
        ASTR(FILE_ATTRIBUTE_SYSTEM),
        ASTR(FILE_ATTRIBUTE_DIRECTORY),
        ASTR(FILE_ATTRIBUTE_ARCHIVE),
        ASTR(FILE_ATTRIBUTE_NORMAL),
        ASTR(FILE_ATTRIBUTE_TEMPORARY),
        ASTR(FILE_ATTRIBUTE_SPARSE_FILE),
        ASTR(FILE_ATTRIBUTE_REPARSE_POINT),
        ASTR(FILE_ATTRIBUTE_OFFLINE),
        ASTR(FILE_ATTRIBUTE_NOT_CONTENT_INDEXED),
        ASTR(FILE_ATTRIBUTE_ENCRYPTED),
        ASTR(FILE_ATTRIBUTE_COMPRESSED),
        ASTR(FILE_ATTRIBUTE_INTEGRITY_STREAM),
        ASTR(FILE_ATTRIBUTE_NO_SCRUB_DATA)
      );
#undef ASTR
}




// 2.1.3.1 FILE_OBJECTID_BUFFER Type 1

// The first possible structure for the FILE_OBJECTID_BUFFER data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                      ObjectId (16 bytes)                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                    BirthVolumeId (16 bytes)                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                    BirthObjectId (16 bytes)                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                      DomainId (16 bytes)                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// ObjectId (16 bytes): A 16-byte GUID that uniquely identifies the file or directory within the volume on which it resides. Specifically, the same object ID can be assigned to another file or directory on a different volume, but it MUST NOT be assigned to another file or directory on the same volume.

// BirthVolumeId (16 bytes): A 16-byte GUID that uniquely identifies the volume on which the object resided when the object identifier was created, or zero if the volume had no object identifier at that time. After copy operations, move operations, or other file operations, this value is potentially different from the object identifier of the volume on which the object presently resides.

// BirthObjectId (16 bytes): A 16-byte GUID value containing the object identifier of the object at the time it was created. Copy operations, move operations, or other file operations MAY change the value of the ObjectId member. Therefore, the BirthObjectId is potentially different from the ObjectId member at present. Specifically, the same object ID MAY be assigned to another file or directory on a different volume, but it MUST NOT be assigned to another file or directory on the same volume. The object ID is assigned at file creation time.<5>

// DomainId (16 bytes): A 16-byte GUID value containing the domain identifier. This value is unused; it SHOULD be zero, and MUST be ignored.<6>

enum : uint32_t {
    GUID_SIZE = 16
};

struct FileObjectBuffer_Type1 {                             // FSCTL_CREATE_OR_GET_OBJECT_ID Reply struct

    uint8_t ObjectId[GUID_SIZE] = { 0 };
    uint8_t BirthVolumeId[GUID_SIZE] = { 0 };
    uint8_t BirthObjectId[GUID_SIZE] = { 0 };
    uint8_t DomainId[GUID_SIZE] = { 0 };


    explicit FileObjectBuffer_Type1() = default;

    explicit FileObjectBuffer_Type1(uint8_t const * ObjectId, uint8_t const * BirthVolumeId, uint8_t const * BirthObjectId)
    {
        for (size_t i = 0; i < GUID_SIZE; i++) {
            this->ObjectId[i] = ObjectId[i];
            this->BirthVolumeId[i] = BirthVolumeId[i];
            this->BirthObjectId[i] = BirthObjectId[i];
        }
    }

    inline static size_t size() {
        return 64;   /* ObjectId(16) + BirthVolumeId(16) + */
    }                /* BirthObjectId(16) + DomainId(16)*/

    void emit(OutStream & stream) const {
        stream.out_copy_bytes(this->ObjectId, GUID_SIZE);
        stream.out_copy_bytes(this->BirthVolumeId, GUID_SIZE);
        stream.out_copy_bytes(this->BirthObjectId, GUID_SIZE);
        stream.out_copy_bytes(this->DomainId, GUID_SIZE);
    }

    void receive(InStream & stream) {
        // ObjectId(16) + BirthVolumeId(16) + BirthObjectId(16) + DomainId(16)
        ::check_throw(stream, 4 * GUID_SIZE, "FileObjectBuffer_Type1", ERR_FSCC_DATA_TRUNCATED);

        stream.in_copy_bytes(this->ObjectId, GUID_SIZE);
        stream.in_copy_bytes(this->BirthVolumeId, GUID_SIZE);
        stream.in_copy_bytes(this->BirthObjectId, GUID_SIZE);
        stream.in_copy_bytes(this->DomainId, GUID_SIZE);
    }

    void log() const {
        LOG(LOG_INFO, "     File Object Buffer Type1:");
        LOG(LOG_INFO, "          * ObjectId       (16 bytes):");
        hexdump_c(this->ObjectId,  GUID_SIZE);
        LOG(LOG_INFO, "          * BirthVolumeId  (16 bytes):");
        hexdump_c(this->BirthVolumeId,  GUID_SIZE);
        LOG(LOG_INFO, "          * BirthObjectId  (16 bytes):");
        hexdump_c(this->BirthObjectId,  GUID_SIZE);
        LOG(LOG_INFO, "          * DomainId - (16 bytes) NOT USED");
    }
};



// 2.1.3.2 FILE_OBJECTID_BUFFER Type 2

// The second possible structure for the FILE_OBJECTID_BUFFER data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                      ObjectId (16 bytes)                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                     ExtendedInfo (48 bytes)                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// ObjectId (16 bytes): A 16-byte GUID that uniquely identifies the file or directory within the volume on which it resides. Specifically, the same object ID can be assigned to another file or directory on a different volume, but it MUST NOT be assigned to another file or directory on the same volume.

// ExtendedInfo (48 bytes): A 48-byte value containing extended data that was set with the FSCTL_SET_OBJECT_ID_EXTENDED request. This field contains application-specific data.<7>

struct FileObjectBuffer_Type2 {                             // FSCTL_CREATE_OR_GET_OBJECT_ID Reply struct

    uint8_t ObjectId[GUID_SIZE] = { 0 };
    uint8_t ExtendedInfo[48] = { 0 };


    const size_t ExtendedInfo_SIZE = 48;

    explicit FileObjectBuffer_Type2() = default;

    explicit FileObjectBuffer_Type2(uint8_t const * ObjectId, uint8_t const * ExtendedInfo)
    {
        for (size_t i = 0; i < GUID_SIZE; i++) {
            this->ObjectId[i] = ObjectId[i];
        }

        for (size_t i = 0; i < this->ExtendedInfo_SIZE; i++) {
            this->ExtendedInfo[i] = ExtendedInfo[i];
        }
    }

    inline static size_t size() {
        return 64;   /* ObjectId(16) + ExtendedInfo(48)*/
    }

    void emit(OutStream & stream) const {
        stream.out_copy_bytes(this->ObjectId, GUID_SIZE);
        stream.out_copy_bytes(this->ExtendedInfo, this->ExtendedInfo_SIZE);
    }

    void receive(InStream & stream) {
        //  ObjectId(16) + ExtendedInfo(48)
        ::check_throw(stream, GUID_SIZE + this->ExtendedInfo_SIZE, "FileObjectBuffer_Type1", ERR_FSCC_DATA_TRUNCATED);

        stream.in_copy_bytes(this->ObjectId, GUID_SIZE);
        stream.in_copy_bytes(this->ExtendedInfo, this->ExtendedInfo_SIZE);
    }

    void log() const {
        LOG(LOG_INFO, "     File Object Buffer Type2:");
        LOG(LOG_INFO, "          * ObjectId     (16 bytes):");
        hexdump_c(this->ObjectId,  GUID_SIZE);
        LOG(LOG_INFO, "          * ExtendedInfo (48 bytes):");
        hexdump_c(this->ExtendedInfo,  this->ExtendedInfo_SIZE);
    }
};




// 2.3.5 FSCTL_DELETE_REPARSE_POINT Request
//
// This message requests that the server delete the reparse point from the file or directory associated with the handle on which this FSCTL was invoked. The underlying file or directory MUST NOT be deleted.
//
// The message MUST contain a REPARSE_GUID_DATA_BUFFER or a REPARSE_DATA_BUFFER (including subtypes) data element. Both the REPARSE_GUID_DATA_BUFFER and the REPARSE_DATA_BUFFER structures begin with a ReparseTag field. The ReparseTag value uniquely identifies the filter driver that creates/uses the reparse point, and the application's filter driver processes the reparse point data as either a REPARSE_GUID_DATA_BUFFER or a REPARSE_DATA_BUFFER, depending on the structure implemented by the filter driver for that type of reparse point.
//
// This message MUST only be sent for a file or directory handle.


// 2.1.2.3 REPARSE_GUID_DATA_BUFFER
//
// The REPARSE_GUID_DATA_BUFFER data element stores data for a reparse point and associates a GUID with the reparse tag. This reparse data buffer MUST be used only with reparse tag values whose high bit is set to 0.
//
// Reparse point GUIDs are assigned by the independent software vendor (ISV). An ISV MUST link one GUID to each assigned reparse point tag, and MUST always use that GUID with that tag.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                           ReparseTag                          |
// +-------------------------------+-------------------------------+
// |       ReparseDataLength       |           Reserved            |
// +-------------------------------+-------------------------------+
// |                     ReparseGuid (16 bytes)                    |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                     DataBuffer (variable)                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// ReparseTag (4 bytes): A 32-bit unsigned integer value containing the reparse point tag that uniquely identifies the owner of the reparse point.
//
// ReparseDataLength (2 bytes): A 16-bit unsigned integer value containing the size, in bytes, of the reparse data in the DataBuffer member.
//
// Reserved (2 bytes): A 16-bit field. This field SHOULD be set to 0 by the client, and MUST be ignored by the server.
//
// ReparseGuid (16 bytes): A 16-byte GUID that uniquely identifies the owner of the reparse point. Reparse point GUIDs are not assigned by Microsoft. A reparse point implementer MUST select one GUID to be used with their assigned reparse point tag to uniquely identify that reparse point. For more information, see [REPARSE].
//
// DataBuffer (variable): The content of this buffer is opaque to the file system. On receipt, its content MUST be preserved and properly returned to the caller.

struct ReparseGUIDDataBuffer {

  uint32_t ReparseTag = 0;
  uint16_t ReparseDataLength = 0;
  uint8_t ReparseGuid[GUID_SIZE] = { 0 };

  uint8_t DataBuffer[65536];

  explicit ReparseGUIDDataBuffer() = default;

  explicit ReparseGUIDDataBuffer(uint32_t ReparseTag, uint16_t ReparseDataLength, uint8_t * ReparseGuid, uint8_t * DataBuffer)
    : ReparseTag(ReparseTag)
    , ReparseDataLength(ReparseDataLength)
    {
        std::memcpy(this->ReparseGuid, ReparseGuid, GUID_SIZE);
        std::memcpy(this->DataBuffer, DataBuffer, ReparseDataLength);
    }

    inline size_t size() const {
        return 22 + this->ReparseDataLength;   /* ReparseTag(4) + ReparseDataLength(2) + */
    }                /* ReparseGuid(16)*/

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->ReparseTag);
        stream.out_uint16_le(this->ReparseDataLength);
        stream.out_clear_bytes(2);
        stream.out_copy_bytes(this->ReparseGuid, GUID_SIZE);
        stream.out_copy_bytes(this->DataBuffer, this->ReparseDataLength);
    }

    void receive(InStream & stream) {
        //  ReparseTag(4) + ReparseDataLength(2) + unused(2) + ReparseGuid(16)
        ::check_throw(stream, 26, "FileObjectBuffer_Type1 (3)", ERR_FSCC_DATA_TRUNCATED);

        this->ReparseTag = stream.in_uint32_le();
        this->ReparseDataLength = stream.in_uint16_le();
        stream.in_skip_bytes(2);
        stream.in_copy_bytes(this->ReparseGuid, GUID_SIZE);

        ::check_throw(stream, this->ReparseDataLength, "FileObjectBuffer_Type1 (4)", ERR_FSCC_DATA_TRUNCATED);
        stream.in_copy_bytes(this->DataBuffer, this->ReparseDataLength);
    }

    void log() const {
        LOG(LOG_INFO, "     Reparse GUID Data Buffer:");
        LOG(LOG_INFO, "          * ReparseTag        = 0x%08x (4 bytes)", this->ReparseTag);
        LOG(LOG_INFO, "          * ReparseDataLength = %d (4 bytes)", int(this->ReparseDataLength));
        LOG(LOG_INFO, "          * Reserved - (2 bytes) NOT USED");
        LOG(LOG_INFO, "          * ReparseGuid (16 bytes):");
        hexdump_c(this->ReparseGuid,  GUID_SIZE);
        LOG(LOG_INFO, "          * DataBuffer (%d bytes):", int(this->ReparseDataLength));
        hexdump_c(this->DataBuffer,  this->ReparseDataLength);
    }
};






// [MS-FSCC] - 2.4.4 FileAllocationInformation
// ===========================================

// This information class is used to set but not to query the allocation size
//  for a file. The file system is passed a 64-bit signed integer containing
//  the file allocation size, in bytes. The file system rounds the requested
//  allocation size up to an integer multiple of the cluster size for
//  nonresident files, or an implementation-defined multiple for resident
//  files.<86><87> All unused allocation (beyond EOF) is freed on the last
//  handle close.

// A FILE_ALLOCATION_INFORMATION data element, defined as follows, is
//  provided by the client.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                         AllocationSize                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// AllocationSize (8 bytes): A 64-bit signed integer that contains the
//  desired allocation to be used by the given file.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INVALID_PARAMETER    | The handle is for a directory and not a    |
//  | 0xC000000D                  | file, or the allocation is greater than    |
//  |                             | the maximum file size allowed.             |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_ACCESS_DENIED        | The handle was not opened to write file    |
//  | 0xC0000022                  | data or file attributes.                   |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_DISK_FULL            | The disk is full.                          |
//  | 0xC000007F                  |                                            |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

struct FileAllocationInformation {
    uint64_t AllocationSize = 0;

    explicit FileAllocationInformation() = default;

    explicit FileAllocationInformation(uint64_t AllocationSize)
    : AllocationSize(AllocationSize) {}

    void emit(OutStream & stream) const {
        stream.out_uint64_le(this->AllocationSize);
    }

    void receive(InStream & stream) {
        // AllocationSize(4)
        ::check_throw(stream, 4, "FileAllocationInformation", ERR_FSCC_DATA_TRUNCATED);

        this->AllocationSize = stream.in_uint64_le();
    }

    void log() const {
        LOG(LOG_INFO, "     File Allocation Information:");
        LOG(LOG_INFO, "          * VolumeCreationTime = 0x%" PRIu64 " (8 bytes)", this->AllocationSize);
    }
};



// [MS-FSCC] - 2.4.6 FileAttributeTagInformation
// =============================================

// This information class is used to query for attribute and reparse tag
//  information for a file.

// A FILE_ATTRIBUTE_TAG_INFORMATION data element, defined as follows, is
//  returned by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                         FileAttributes                        |
// +---------------------------------------------------------------+
// |                           ReparseTag                          |
// +---------------------------------------------------------------+

// FileAttributes (4 bytes): A 32-bit unsigned integer that contains the file
//  attributes. Valid file attributes are as specified in section 2.6.

// ReparseTag (4 bytes): A 32-bit unsigned integer that specifies the reparse
//  point tag. If the FileAttributes member includes the
//  FILE_ATTRIBUTE_REPARSE_POINT attribute flag, this member specifies the
//  reparse tag. Otherwise, this member SHOULD be set to 0, and MUST be
//  ignored. Section 2.1.2.1 contains more details on reparse tags.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_ACCESS_DENIED        | The handle was not opened to read file     |
//  | 0xC0000022                  | data or file attributes.                   |
//  +-----------------------------+--------------------------------------------+

class FileAttributeTagInformation {

public:
    uint32_t FileAttributes = 0;
    uint32_t ReparseTag     = 0;


    explicit FileAttributeTagInformation() = default;

    explicit FileAttributeTagInformation(uint32_t FileAttributes, uint32_t ReparseTag)
    : FileAttributes(FileAttributes)
    , ReparseTag(ReparseTag) {}

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->FileAttributes);
        stream.out_uint32_le(this->ReparseTag);
    }

    void receive(InStream & stream) {
        // FileAttributes(4) + ReparseTag(4)
        ::check_throw(stream, 8, "FileAttributeTagInformation", ERR_FSCC_DATA_TRUNCATED);

        this->FileAttributes = stream.in_uint32_le();
        this->ReparseTag     = stream.in_uint32_le();
    }

    static size_t size() {
        return 8;   /* FileAttributes(4) + ReparseTag(4) */
    }

private:
    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileAttributeTagInformation: FileAttributes=0x%X ReparseTag=%u",
            this->FileAttributes, this->ReparseTag);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Attribute Tag Information:");
        log_file_attributes(this->FileAttributes);
        LOG(LOG_INFO, "          * ReparseTag     = 0x%08x (4 bytes)", this->ReparseTag);
    }
};



// [MS-FSCC] - 2.4.7 FileBasicInformation
// ======================================

// This information class is used to query or set file information.

// A FILE_BASIC_INFORMATION data element, defined as follows, is returned by
//  the server or provided by the client.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                          CreationTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastAccessTime                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastWriteTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           ChangeTime                          |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         FileAttributes                        |
// +---------------------------------------------------------------+
// |                            Reserved                           |
// +---------------------------------------------------------------+

// CreationTime (8 bytes): The time when the file was created; see section
//  2.1.1. A valid time for this field is an integer greater than or equal to
//  0. When setting file attributes, a value of 0 indicates to the server
//  that it MUST NOT change this attribute. When setting file attributes, a
//  value of -1 indicates to the server that it MUST NOT change this
//  attribute for all subsequent operations on the same file handle. This
//  field MUST NOT be set to a value less than -1.

// LastAccessTime (8 bytes): The last time the file was accessed; see section
//  2.1.1. A valid time for this field is an integer greater than or equal to
//  0. When setting file attributes, a value of 0 indicates to the server
//  that it MUST NOT change this attribute. When setting file attributes, a
//  value of -1 indicates to the server that it MUST NOT change this
//  attribute for all subsequent operations on the same file handle. This
//  field MUST NOT be set to a value less than -1.<89>

// LastWriteTime (8 bytes): The last time information was written to the
//  file; see section 2.1.1. A valid time for this field is an integer
//  greater than or equal to 0. When setting file attributes, a value of 0
//  indicates to the server that it MUST NOT change this attribute. When
//  setting file attributes, a value of -1 indicates to the server that it
//  MUST NOT change this attribute for all subsequent operations on the same
//  file handle. This field MUST NOT be set to a value less than -1.<90>

// ChangeTime (8 bytes): The last time the file was changed; see section
//  2.1.1. A valid time for this field is an integer greater than or equal to
//  0. When setting file attributes, a value of 0 indicates to the server
//  that it MUST NOT change this attribute. When setting file attributes, a
//  value of -1 indicates to the server that it MUST NOT change this
//  attribute for all subsequent operations on the same file handle. This
//  field MUST NOT be set to a value less than -1.<91>

// FileAttributes (4 bytes): A 32-bit unsigned integer that contains the file
//  attributes. Valid file attributes are specified in section 2.6.

// Reserved (4 bytes): A 32-bit field. This field is reserved. This field can
//  be set to any value, and MUST be ignored.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_ACCESS_DENIED        | The handle was not opened to read file     |
//  | 0xC0000022                  | data or file attributes.                   |
//  +-----------------------------+--------------------------------------------+

class FileBasicInformation {
    uint64_t CreationTime_   = 0;
    uint64_t LastAccessTime_ = 0;
    uint64_t LastWriteTime_  = 0;
    uint64_t ChangeTime_     = 0;
    uint32_t FileAttributes_ = 0;

public:
    explicit FileBasicInformation() = default;

    explicit FileBasicInformation(uint64_t CreationTime, uint64_t LastAccessTime,
                         uint64_t LastWriteTime, uint64_t ChangeTime,
                         uint32_t FileAttributes)
    : CreationTime_(CreationTime)
    , LastAccessTime_(LastAccessTime)
    , LastWriteTime_(LastWriteTime)
    , ChangeTime_(ChangeTime)
    , FileAttributes_(FileAttributes) {}

    void emit(OutStream & stream) const {
        stream.out_uint64_le(this->CreationTime_);
        stream.out_uint64_le(this->LastAccessTime_);
        stream.out_uint64_le(this->LastWriteTime_);
        stream.out_uint64_le(this->ChangeTime_);

        stream.out_uint32_le(this->FileAttributes_);

        // Reserved(4), MUST NOT be transmitted.
    }

    void receive(InStream & stream) {
        // CreationTime(8) + LastAccessTime(8) + LastWriteTime(8) + ChangeTime(8) + FileAttributes(4)
        ::check_throw(stream, 36, "FileBasicInformation", ERR_FSCC_DATA_TRUNCATED);

        this->CreationTime_   = stream.in_uint64_le();
        this->LastAccessTime_ = stream.in_uint64_le();
        this->LastWriteTime_  = stream.in_uint64_le();
        this->ChangeTime_     = stream.in_uint64_le();
        this->FileAttributes_ = stream.in_uint32_le();

        // Reserved(4), MUST NOT be transmitted.
    }

    [[nodiscard]] uint32_t FileAttributes() const { return this->FileAttributes_; }

    [[nodiscard]] uint64_t LastAccessTime() const { return this->LastAccessTime_; }

    [[nodiscard]] uint64_t LastWriteTime() const { return this->LastWriteTime_; }

    [[nodiscard]] uint64_t ChangeTime() const { return this->ChangeTime_; }

    [[nodiscard]] uint64_t CreationTime() const { return this->CreationTime_; }

    static size_t size() {
        return 36;  /* CreationTime(8) + LastAccessTime(8) + LastWriteTime(8) + ChangeTime(8) + FileAttributes(4) */
    }

private:
    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileBasicInformation: CreationTime=%" PRIu64 " LastAccessTime=%" PRIu64
                " LastWriteTime=%" PRIu64 " ChangeTime=%" PRIu64 " FileAttributes=0x%X",
            this->CreationTime_, this->LastAccessTime_, this->LastWriteTime_,
            this->ChangeTime_, this->FileAttributes_);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Basic Information:");
        LOG(LOG_INFO, "          * CreationTime   = 0x%" PRIx64 " (8 bytes)", this->CreationTime_);
        LOG(LOG_INFO, "          * LastAccessTime = 0x%" PRIx64 " (8 bytes)", this->LastAccessTime_);
        LOG(LOG_INFO, "          * LastWriteTime  = 0x%" PRIx64 " (8 bytes)", this->LastWriteTime_);
        LOG(LOG_INFO, "          * ChangeTime     = 0x%" PRIx64 " (8 bytes)", this->ChangeTime_);
        log_file_attributes(this->FileAttributes_);
    }
};  // FileBasicInformation



// [MS-FSCC] - 2.4.8 FileBothDirectoryInformation
// ==============================================

// This information class is used in directory enumeration to return detailed
//  information about the contents of a directory.

// This information class returns a list that contains a
//  FILE_BOTH_DIR_INFORMATION data element for each file or directory within
//  the target directory. This list MUST reflect the presence of a
//  subdirectory named "." (synonymous with the target directory itself)
//  within the target directory and one named ".." (synonymous with the
//  parent directory of the target directory). For more details, see section
//  2.1.5.1.

// This information class differs from FileDirectoryInformation (section
//  2.4.10) in that it includes short names in the returns list.

// When multiple FILE_BOTH_DIR_INFORMATION data elements are present in the
//  buffer, each MUST be aligned on an 8-byte boundary. Any bytes inserted
//  for alignment SHOULD be set to zero, and the receiver MUST ignore them.
//  No padding is required following the last data element.

// A FILE_BOTH_DIR_INFORMATION data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        NextEntryOffset                        |
// +---------------------------------------------------------------+
// |                           FileIndex                           |
// +---------------------------------------------------------------+
// |                          CreationTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastAccessTime                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastWriteTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           ChangeTime                          |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           EndOfFile                           |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         AllocationSize                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         FileAttributes                        |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                             EaSize                            |
// +---------------+---------------+-------------------------------+
// |ShortNameLength|    Reserved   |           ShortName           |
// +---------------+---------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +-------------------------------+-------------------------------+
// |              ...              |      FileName (variable)      |
// +-------------------------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// NextEntryOffset (4 bytes): A 32-bit unsigned integer that contains the
//  byte offset from the beginning of this entry, at which the next
//  FILE_BOTH_DIR_INFORMATION entry is located, if multiple entries are
//  present in a buffer. This member is zero if no other entries follow this
//  one. An implementation MUST use this value to determine the location of
//  the next entry (if multiple entries are present in a buffer).

// FileIndex (4 bytes): A 32-bit unsigned integer that contains the byte
//  offset of the file within the parent directory. For file systems in which
//  the position of a file within the parent directory is not fixed and can
//  be changed at any time to maintain sort order, this field SHOULD be set
//  to 0x00000000 and MUST be ignored.<92>

// CreationTime (8 bytes): The time when the file was created; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// LastAccessTime (8 bytes): The last time the file was accessed; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// LastWriteTime (8 bytes): The last time information was written to the
//  file; see section 2.1.1. This value MUST be greater than or equal to 0.

// ChangeTime (8 bytes): The last time the file was changed; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// EndOfFile (8 bytes): A 64-bit signed integer that contains the absolute
//  new end-of-file position as a byte offset from the start of the file.
//  EndOfFile specifies the offset to the byte immediately following the last
//  valid byte in the file. Because this value is zero-based, it actually
//  refers to the first free byte in the file. That is, it is the offset from
//  the beginning of the file at which new bytes appended to the file will be
//  written. The value of this field MUST be greater than or equal to 0.

// AllocationSize (8 bytes): A 64-bit signed integer that contains the file
//  allocation size, in bytes. The value of this field MUST be an integer
//  multiple of the cluster size.

// FileAttributes (4 bytes): A 32-bit unsigned integer that contains the file
//  attributes. Valid file attributes are specified in section 2.6.

// FileNameLength (4 bytes): A 32-bit unsigned integer that specifies the
//  length, in bytes, of the file name contained within the FileName member.

// EaSize (4 bytes): A 32-bit unsigned integer that contains the combined
//  length, in bytes, of the extended attributes (EA) for the file.

// ShortNameLength (1 byte): An 8-bit signed integer that specifies the
//  length, in bytes, of the file name contained in the ShortName member.
//  This value MUST be greater than or equal to 0.

// Reserved (1 byte): Reserved for alignment. This field can contain any
//  value and MUST be ignored.

// ShortName (24 bytes): A sequence of Unicode characters containing the
//  short (8.3) file name. When working with this field, use ShortNameLength
//  to determine the length of the file name rather than assuming the
//  presence of a trailing null delimiter.

// FileName (variable): A sequence of Unicode characters containing the file
//  name. When working with this field, use FileNameLength to determine the
//  length of the file name rather than assuming the presence of a trailing
//  null delimiter. Dot directory names are valid for this field. For more
//  details, see section 2.1.5.1.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileBothDirectoryInformation {
    uint32_t NextEntryOffset = 0;
    uint32_t FileIndex       = 0;
    uint64_t CreationTime    = 0;
    uint64_t LastAccessTime  = 0;
    uint64_t LastWriteTime   = 0;
    uint64_t ChangeTime      = 0;
    int64_t  EndOfFile       = 0;
    int64_t  AllocationSize  = 0;
    uint32_t FileAttributes  = 0;
    uint32_t FileNameLength  = 0;
    uint32_t EaSize          = 0;
    uint8_t  ShortNameLength = 0;

    uint8_t short_name_UTF16[24]   = { 0 };
    uint8_t file_name_UTF16[65536] = { 0 };

public:
    explicit FileBothDirectoryInformation() = default;

    explicit FileBothDirectoryInformation(uint64_t CreationTime,
                                 uint64_t LastAccessTime,
                                 uint64_t LastWriteTime, uint64_t ChangeTime,
                                 int64_t EndOfFile, int64_t AllocationSize,
                                 uint32_t FileAttributes,
                                 chars_view file_name)
    : CreationTime(CreationTime)
    , LastAccessTime(LastAccessTime)
    , LastWriteTime(LastWriteTime)
    , ChangeTime(ChangeTime)
    , EndOfFile(EndOfFile)
    , AllocationSize(AllocationSize)
    , FileAttributes(FileAttributes)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->NextEntryOffset);
        stream.out_uint32_le(this->FileIndex);

        stream.out_uint64_le(this->CreationTime);
        stream.out_uint64_le(this->LastAccessTime);
        stream.out_uint64_le(this->LastWriteTime);
        stream.out_uint64_le(this->ChangeTime);

        stream.out_sint64_le(this->EndOfFile);
        stream.out_sint64_le(this->AllocationSize);

        stream.out_uint32_le(this->FileAttributes);
        stream.out_uint32_le(this->FileNameLength);
        stream.out_uint32_le(this->EaSize);
        stream.out_uint8(this->ShortNameLength);

        // Reserved(1), MUST NOT be transmitted.

        stream.out_copy_bytes(this->short_name_UTF16, this->ShortNameLength);
        // ShortName(24)
        if (this->ShortNameLength < 24) {
            stream.out_clear_bytes(24 - this->ShortNameLength);
        }

        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {
        // NextEntryOffset(4) + FileIndex(4) +
        //     CreationTime(8) + LastAccessTime(8) +
        //     LastWriteTime(8) + ChangeTime(8) +
        //     EndOfFile(8) + AllocationSize(8) +
        //     FileAttributes(4) + FileNameLength(4) +
        //     EaSize(4) + ShortNameLength(1) +
        //     ShortName(24)
        ::check_throw(stream, 93, "FileBothDirectoryInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->NextEntryOffset = stream.in_uint32_le();
        this->FileIndex       = stream.in_uint32_le();
        this->CreationTime    = stream.in_uint64_le();
        this->LastAccessTime  = stream.in_uint64_le();
        this->LastWriteTime   = stream.in_uint64_le();
        this->ChangeTime      = stream.in_uint64_le();
        this->EndOfFile       = stream.in_sint64_le();
        this->AllocationSize  = stream.in_sint64_le();
        this->FileAttributes  = stream.in_uint32_le();
        this->FileNameLength  = stream.in_uint32_le();
        this->EaSize = stream.in_uint32_le();
        this->ShortNameLength = stream.in_sint8();

        // Reserved(1), MUST NOT be transmitted.

        stream.in_copy_bytes(this->short_name_UTF16, this->ShortNameLength);
        // ShortName(24)
        if (this->ShortNameLength < 24) {
            stream.in_skip_bytes(24 - this->ShortNameLength);
        }

        // FileName(FileNameLength)
        ::check_throw(stream, this->FileNameLength, "FileBothDirectoryInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileBothDirectoryInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    [[nodiscard]] size_t size() const
    {
        const size_t size = 93; // NextEntryOffset(4) + FileIndex(4) +
                                //     CreationTime(8) + LastAccessTime(8) +
                                //     LastWriteTime(8) + ChangeTime(8) +
                                //     EndOfFile(8) + AllocationSize(8) +
                                //     FileAttributes(4) + FileNameLength(4) +
                                //     EaSize(4) + ShortNameLength(1) +
                                //     ShortName(24)

        // Reserved(1), MUST NOT be transmitted.

        return size + this->FileNameLength;
    }

private:
    size_t str(char * buffer, size_t size) const {
        uint8_t short_name_UTF8[128];
        const size_t short_name_UTF8_length = ::UTF16toUTF8(
            this->short_name_UTF16,
            this->ShortNameLength,
            short_name_UTF8,
            sizeof(short_name_UTF8) - 1);
        short_name_UTF8[short_name_UTF8_length] = 0;

        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        size_t length = ::snprintf(buffer, size,
            "FileBothDirectoryInformation: NextEntryOffset=%u FileIndex=%u CreationTime=%" PRIu64
                " LastAccessTime=%" PRIu64 " LastWriteTime=%" PRIu64 " ChangeTime=%" PRIu64
                " EndOfFile=%" PRId64 " AllocationSize=%" PRId64 " FileAttributes=0x%X "
                "EaSize=%u ShortName=\"%s\" FileName=\"%s\"",
            this->NextEntryOffset, this->FileIndex,
            this->CreationTime, this->LastAccessTime, this->LastWriteTime,
            this->ChangeTime, this->EndOfFile, this->AllocationSize, this->FileAttributes,
            this->EaSize, short_name_UTF8, file_name_UTF8);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[65536+2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        uint8_t short_name_UTF8[128];
        const size_t short_name_UTF8_length = ::UTF16toUTF8(
            this->short_name_UTF16,
            this->ShortNameLength,
            short_name_UTF8,
            sizeof(short_name_UTF8) - 1);
        short_name_UTF8[short_name_UTF8_length] = 0;

        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Both Directory Information:");
        LOG(LOG_INFO, "          * NextEntryOffset = 0x%08x (4 bytes)", this->NextEntryOffset);
        LOG(LOG_INFO, "          * FileIndex       = 0x%08x (4 bytes)", this->FileIndex);
        LOG(LOG_INFO, "          * CreationTime    = 0x%" PRIx64 " (8 bytes)", this->CreationTime);
        LOG(LOG_INFO, "          * LastAccessTime  = 0x%" PRIx64 " (8 bytes)", this->LastAccessTime);
        LOG(LOG_INFO, "          * LastWriteTime   = 0x%" PRIx64 " (8 bytes)", this->LastWriteTime);
        LOG(LOG_INFO, "          * ChangeTime      = 0x%" PRIx64 " (8 bytes)", this->ChangeTime);
        LOG(LOG_INFO, "          * EndOfFile       = 0x%" PRId64 " (8 bytes)", this->EndOfFile);
        LOG(LOG_INFO, "          * AllocationSize  = 0x%" PRId64 " (8 bytes)", this->AllocationSize);
        log_file_attributes(this->FileAttributes);
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * EaSize          = %u (4 bytes)", this->EaSize);
        LOG(LOG_INFO, "          * ShortNameLength = %u (1 byte)", this->ShortNameLength);
        //LOG(LOG_INFO, "          * Reserved - (1 byte) NOT USED");
        LOG(LOG_INFO, "          * short_name      = \"%s\" (24 bytes)", short_name_UTF8);
        LOG(LOG_INFO, "          * FileName        = \"%s\" (%u byte(s))", file_name_UTF8, this->FileNameLength);
    }
};  // FileBothDirectoryInformation



// 2.4.10 FileDirectoryInformation

// This information class is used in directory enumeration to return detailed information about the contents of a directory.

// This information class returns a list that contains a FILE_DIRECTORY_INFORMATION data element for each file or directory within the target directory. This list MUST reflect the presence of a subdirectory named "." (synonymous with the target directory itself) within the target directory and one named ".." (synonymous with the parent directory of the target directory). For more details, see section 2.1.5.1.

// When multiple FILE_DIRECTORY_INFORMATION data elements are present in the buffer, each MUST be aligned on an 8-byte boundary. Any bytes inserted for alignment SHOULD be set to zero, and the receiver MUST ignore them. No padding is required following the last data element.

// A FILE_DIRECTORY_INFORMATION data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        NextEntryOffset                        |
// +---------------------------------------------------------------+
// |                           FileIndex                           |
// +---------------------------------------------------------------+
// |                          CreationTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastAccessTime                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastWriteTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           ChangeTime                          |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           EndOfFile                           |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         AllocationSize                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         FileAttributes                        |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                       FileName (variable)                     |
// +---------------+---------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// NextEntryOffset (4 bytes):  A 32-bit unsigned integer that contains the byte offset from the beginning of this entry, at which the next FILE_DIRECTORY_INFORMATION entry is located, if multiple entries are present in a buffer. This member MUST be zero if no other entries follow this one. An implementation MUST use this value to determine the location of the next entry (if multiple entries are present in a buffer).

// FileIndex (4 bytes):  A 32-bit unsigned integer that contains the byte offset of the file within the parent directory. For file systems in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order, this field SHOULD be set to 0 and MUST be ignored.<100>

// CreationTime (8 bytes):  The time when the file was created; see section 2.1.1. This value MUST be greater than or equal to 0.

// LastAccessTime (8 bytes):  The last time the file was accessed; see section 2.1.1. This value MUST be greater than or equal to 0.

// LastWriteTime (8 bytes):  The last time information was written to the file; see section 2.1.1. This value MUST be greater than or equal to 0.

// ChangeTime (8 bytes):  The last time the file was changed; see section 2.1.1. This value MUST be greater than or equal to 0.

// EndOfFile (8 bytes):  A 64-bit signed integer that contains the absolute new end-of-file position as a byte offset from the start of the file. EndOfFile specifies the offset to the byte immediately following the last valid byte in the file. Because this value is zero-based, it actually refers to the first free byte in the file. That is, it is the offset from the beginning of the file at which new bytes appended to the file will be written. The value of this field MUST be greater than or equal to 0.

// AllocationSize (8 bytes):  A 64-bit signed integer that contains the file allocation size, in bytes. The value of this field MUST be an integer multiple of the cluster size.

// FileAttributes (4 bytes):  A 32-bit unsigned integer that contains the file attributes. Valid attributes are as specified in section 2.6.

// FileNameLength (4 bytes):  A 32-bit unsigned integer that specifies the length, in bytes, of the file name contained within the FileName member.

// FileName (variable): A sequence of Unicode characters containing the file name. When working with this field, use FileNameLength to determine the length of the file name rather than assuming the presence of a trailing null delimiter. Dot directory names are valid for this field. For more details, see section 2.1.5.1.

// This operation returns a status code, as specified in [MS-ERREF] section 2.3. The status code returned directly by the function that processes this file information class MUST be STATUS_SUCCESS or one of the following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileDirectoryInformation {
    uint32_t NextEntryOffset = 0;
    uint32_t FileIndex       = 0;
    uint64_t CreationTime    = 0;
    uint64_t LastAccessTime_ = 0;
    uint64_t LastWriteTime_  = 0;
    uint64_t ChangeTime      = 0;
    uint64_t EndOfFile       = 0;
    uint64_t AllocationSize  = 0;
    uint32_t FileAttributes_ = 0;
    uint32_t FileNameLength  = 0;

    uint8_t file_name_UTF16[65536] = { 0 };

public:
    explicit FileDirectoryInformation() = default;

    explicit FileDirectoryInformation(uint32_t NextEntryOffset, uint32_t FileIndex,
                             uint64_t CreationTime, uint64_t LastAccessTime,
                             uint64_t LastWriteTime, uint64_t ChangeTime,
                             uint32_t FileAttributes, chars_view file_name)
    : NextEntryOffset(NextEntryOffset)
    , FileIndex(FileIndex)
    , CreationTime(CreationTime)
    , LastAccessTime_(LastAccessTime)
    , LastWriteTime_(LastWriteTime)
    , ChangeTime(ChangeTime)
    , FileAttributes_(FileAttributes)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->NextEntryOffset);
        stream.out_uint32_le(this->FileIndex);

        stream.out_uint64_le(this->CreationTime);
        stream.out_uint64_le(this->LastAccessTime_);
        stream.out_uint64_le(this->LastWriteTime_);
        stream.out_uint64_le(this->ChangeTime);
        stream.out_uint64_le(this->EndOfFile);
        stream.out_uint64_le(this->AllocationSize);
        stream.out_uint32_le(this->FileAttributes_);
        stream.out_uint32_le(this->FileNameLength);

        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {

        // NextEntryOffset(4) + FileIndex(4) +
        //     CreationTime(8) + LastAccessTime(8) +
        //     LastWriteTime(8) + ChangeTime(8) +
        //     EndOfFile(8) + AllocationSize(8) +
        //     FileAttributes(4) + FileNameLength(4)
        ::check_throw(stream, 64, "FileDirectoryInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->NextEntryOffset = stream.in_uint32_le();
        this->FileIndex       = stream.in_uint32_le();

        this->CreationTime    = stream.in_uint64_le();
        this->LastAccessTime_ = stream.in_uint64_le();
        this->LastWriteTime_  = stream.in_uint64_le();
        this->ChangeTime      = stream.in_uint64_le();

        this->EndOfFile       = stream.in_uint64_le();
        this->AllocationSize  = stream.in_uint64_le();

        this->FileAttributes_ = stream.in_uint32_le();
        this->FileNameLength  = stream.in_uint32_le();

        // FileName(variable = FileNameLength)
        ::check_throw(stream, this->FileNameLength, "FileDirectoryInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileBothDirectoryInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    [[nodiscard]] uint64_t FileAttributes() const { return this->FileAttributes_; }

    [[nodiscard]] uint64_t LastAccessTime() const { return this->LastAccessTime_; }

    [[nodiscard]] uint64_t LastWriteTime() const { return this->LastWriteTime_; }

    uint32_t size() const
    {
        const uint32_t size = 64;   // NextEntryOffset(4) + FileIndex(4) +
                                    //     CreationTime(8) + LastAccessTime(8) +
                                    //     LastWriteTime(8) + ChangeTime(8) +
                                    //     EndOfFile(8) + AllocationSize(8) +
                                    //     FileAttributes(4) + FileNameLength(4)

        return size + this->FileNameLength;
    }

    void log() const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Directory Information:");
        LOG(LOG_INFO, "          * NextEntryOffset = 0x%08x (4 bytes)", this->NextEntryOffset);
        LOG(LOG_INFO, "          * FileIndex       = 0x%08x (4 bytes)", this->FileIndex);
        LOG(LOG_INFO, "          * CreationTime    = 0x%" PRIx64 " (8 bytes)", this->CreationTime);
        LOG(LOG_INFO, "          * LastAccessTime  = 0x%" PRIx64 " (8 bytes)", this->LastAccessTime_);
        LOG(LOG_INFO, "          * LastWriteTime   = 0x%" PRIx64 " (8 bytes)", this->LastWriteTime_);
        LOG(LOG_INFO, "          * ChangeTime      = 0x%" PRIx64 " (8 bytes)", this->ChangeTime);
        log_file_attributes(this->FileAttributes_);
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * FileName        = \"%s\" (%u byte(s))", file_name_UTF8, this->FileNameLength);
    }
};  //FileDirectoryInformation



// [MS-FSCC] - 2.4.11 FileDispositionInformation
// =============================================

// This information class is used to mark a file for deletion.

// A FILE_DISPOSITION_INFORMATION data element, defined as follows, is
//  provided by the client.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | DeletePending |
// +---------------+

// DeletePending (1 byte): An 8-bit field that is set to 1 to indicate that a
//  file SHOULD be deleted when it is closed; otherwise, 0.<98>

// For a discussion of file deletion semantics, see [FSBO].

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_ACCESS_DENIED        | The handle was not opened with delete      |
//  | 0xC0000022                  | access.                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

struct FileDispositionInformation {
    uint8_t DeletePending = 0;

    explicit FileDispositionInformation() = default;

    explicit FileDispositionInformation( uint64_t DeletePending)
    : DeletePending(DeletePending) {}

    void emit(OutStream & stream) const {
        stream.out_uint8(this->DeletePending);
    }

    void receive(InStream & stream) {
        // DeletePending(1)
        ::check_throw(stream, 1, "FileDispositionInformation (0)", ERR_FSCC_DATA_TRUNCATED);
        this->DeletePending = stream.in_uint8();
    }

    static size_t size() {
        return 1;  // DeletePending(1)
    }

    void log() const {
        LOG(LOG_INFO, "     File Disposition Information:");
        LOG(LOG_INFO, "          * DeletePending = 0x%02x (1 byte)", this->DeletePending);
    }
};

// [MS-FSCC] - 2.4.13 FileEndOfFileInformation
// ===========================================

// This information class is used to set end-of-file information for a file.

// A FILE_END_OF_FILE_INFORMATION data element, defined as follows, is
//  provided by the client.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                           EndOfFile                           |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// EndOfFile (8 bytes): A 64-bit signed integer that contains the absolute
//  new end of file position as a byte offset from the start of the file.
//  EndOfFile specifies the offset from the beginning of the file of the byte
//  following the last byte in the file. That is, it is the offset from the
//  beginning of the file at which new bytes appended to the file will be
//  written. The value of this field MUST be greater than or equal to 0.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INVALID_PARAMETER    | The handle was for a directory and not a   |
//  | 0xC000000D                  | file, or the allocation is greater than    |
//  |                             | the maximum file size allowed.             |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_ACCESS_DENIED        | The handle was not opened to read file     |
//  | 0xC0000022                  | data or file attributes.                   |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_DISK_FULL            | The disk is full.                          |
//  | 0xC000007F                  |                                            |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

struct FileEndOfFileInformation {
    uint64_t EndOfFile = 0;

    explicit FileEndOfFileInformation() = default;

    explicit FileEndOfFileInformation( uint64_t EndOfFile)
    : EndOfFile(EndOfFile) {}

    void emit(OutStream & stream) const {
        stream.out_uint64_le(this->EndOfFile);
    }

    void receive(InStream & stream) {
        this->EndOfFile = stream.in_uint64_le();
    }

    void log() const {
        LOG(LOG_INFO, "     File EndOfFile Information:");
        LOG(LOG_INFO, "          * EndOfFile = 0x%" PRIx64 " (8 bytes)", this->EndOfFile);
    }
};



// 2.5.5 FileFsLabelInformation

// This information class is used locally to set the label for a file system volume.

// A FILE_FS_LABEL_INFORMATION data element, defined as follows, is provided by the caller.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                       VolumeLabelLength                       |
// +---------------------------------------------------------------+
// |                     VolumeLabel (variable)                    |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// VolumeLabelLength (4 bytes): A 32-bit unsigned integer that contains the length, in bytes, including the trailing null, if present, of the name for the volume.<150>

// VolumeLabel (variable): A variable-length Unicode field containing the name of the volume. The content of this field can be a null-terminated string, or it can be a string padded with the space character to be VolumeLabelLength bytes long.

// This operation returns a status code, as specified in [MS-ERREF] section 2.3. The status code returned directly by the function that processes this file information class MUST be STATUS_SUCCESS or one of the following.

//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

struct FileFsLabelInformation {
    uint32_t VolumeLabelLength = 0;

    uint8_t volume_label_UTF16[65536] = { 0 };

    explicit FileFsLabelInformation() = default;

    explicit FileFsLabelInformation(chars_view volume_label)
    {
        this->VolumeLabelLength =
            ::UTF8toUTF16(volume_label, this->volume_label_UTF16, sizeof(this->volume_label_UTF16) - sizeof(uint16_t));
        this->volume_label_UTF16[this->VolumeLabelLength    ] = 0;
        this->volume_label_UTF16[this->VolumeLabelLength + 1] = 0;
        this->VolumeLabelLength += 2;
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->VolumeLabelLength);
        stream.out_copy_bytes(this->volume_label_UTF16, this->VolumeLabelLength);
    }

    void receive(InStream & stream) {
        // VolumeLabelLength(4)
        ::check_throw(stream, 4, "FileFsLabelInformation (0)", ERR_RDPDR_PDU_TRUNCATED);
        this->VolumeLabelLength = stream.in_uint32_le();

        // VolumeLabel(variable = VolumeLabelLength)
        ::check_throw(stream, this->VolumeLabelLength, "FileFsLabelInformation (1)", ERR_RDPDR_PDU_TRUNCATED);

        // TODO: we may show the beginning of the name which is tool long ?
        if (this->VolumeLabelLength > sizeof(this->volume_label_UTF16)) {
            LOG(LOG_ERR,
                "FileFsVolumeInformation: FileName too long. Length=%u",
                this->VolumeLabelLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->volume_label_UTF16, this->VolumeLabelLength);
    }

    void log() const {
        uint8_t volume_label_UTF8[65536];
        const size_t volume_label_UTF8_length = ::UTF16toUTF8(
            this->volume_label_UTF16,
            this->VolumeLabelLength,
            volume_label_UTF8,
            sizeof(volume_label_UTF8) - 1);
        volume_label_UTF8[volume_label_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Fs Label Information:");
        LOG(LOG_INFO, "          * VolumeLabelLength = %u (4 bytes)", this->VolumeLabelLength);
        LOG(LOG_INFO, "          * VolumeLabel       = \"%s\" (%u byte(s))", volume_label_UTF8, this->VolumeLabelLength);
    }
};



// [MS-FSCC] - 2.4.14 FileFullDirectoryInformation
// ===============================================

// This information class is used in directory enumeration to return detailed
//  information about the contents of a directory.

// This information class returns a list that contains a
//  FILE_FULL_DIR_INFORMATION data element for each file or directory within
//  the target directory. This list MUST reflect the presence of a
//  subdirectory named "." (synonymous with the target directory itself)
//  within the target directory and one named ".." (synonymous with the
//  parent directory of the target directory). For more details, see section
//  2.1.5.1.

// When multiple FILE_FULL_DIR_INFORMATION data elements are present in the
//  buffer, each MUST be aligned on an 8-byte boundary; any bytes inserted
//  for alignment SHOULD be set to zero, and the receiver MUST ignore them.
//  No padding is required following the last data element.

// A FILE_FULL_DIR_INFORMATION data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        NextEntryOffset                        |
// +---------------------------------------------------------------+
// |                           FileIndex                           |
// +---------------------------------------------------------------+
// |                          CreationTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastAccessTime                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         LastWriteTime                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           ChangeTime                          |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           EndOfFile                           |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         AllocationSize                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         FileAttributes                        |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                             EaSize                            |
// +---------------------------------------------------------------+
// |                      FileName (variable)                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// NextEntryOffset (4 bytes): A 32-bit unsigned integer that contains the
//  byte offset from the beginning of this entry, at which the next
//  FILE_FULL_DIR_INFORMATION entry is located, if multiple entries are
//  present in a buffer. This member is zero if no other entries follow this
//  one. An implementation MUST use this value to determine the location of
//  the next entry (if multiple entries are present in a buffer).

// FileIndex (4 bytes): A 32-bit unsigned integer that contains the byte
//  offset of the file within the parent directory. For file systems such as
//  NTFS, in which the position of a file within the parent directory is not
//  fixed and can be changed at any time to maintain sort order, this field
//  SHOULD be set to 0, and MUST be ignored.<99>

// CreationTime (8 bytes): The time when the file was created; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// LastAccessTime (8 bytes): The last time the file was accessed; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// LastWriteTime (8 bytes): The last time information was written to the
//  file; see section 2.1.1. This value MUST be greater than or equal to 0.

// ChangeTime (8 bytes): The last time the file was changed; see section
//  2.1.1. This value MUST be greater than or equal to 0.

// EndOfFile (8 bytes): A 64-bit signed integer that contains the absolute
//  new end-of-file position as a byte offset from the start of the file.
//  EndOfFile specifies the offset to the byte immediately following the last
//  valid byte in the file. Because this value is zero-based, it actually
//  refers to the first free byte in the file. That is, it is the offset from
//  the beginning of the file at which new bytes appended to the file will be
//  written. The value of this field MUST be greater than or equal to 0.

// AllocationSize (8 bytes): A 64-bit signed integer that contains the file
//  allocation size, in bytes. The value of this field MUST be an integer
//  multiple of the cluster size.

// FileAttributes (4 bytes): A 32-bit unsigned integer that contains the file
//  attributes. For a list of valid file attributes, see section 2.6.

// FileNameLength (4 bytes): A 32-bit unsigned integer that specifies the
//  length, in bytes, of the file name contained within the FileName member.

// EaSize (4 bytes): A 32-bit unsigned integer that contains the combined
//  length, in bytes, of the extended attributes (EA) for the file.

// FileName (variable): A sequence of Unicode characters containing the file
//  name. When working with this field, use FileNameLength to determine the
//  length of the file name rather than assuming the presence of a trailing
//  null delimiter. Dot directory names are valid for this field. For more
//  details, see section 2.1.5.1.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+-----------------------------------------+
//  | Error code                  | Meaning                                 |
//  +-----------------------------+-----------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length |
//  | 0xC0000004                  | does not match the length that is       |
//  |                             | required for the specified information  |
//  |                             | class.                                  |
//  +-----------------------------+-----------------------------------------+

class FileFullDirectoryInformation {
    uint32_t NextEntryOffset = 0;
    uint32_t FileIndex       = 0;
    uint64_t CreationTime    = 0;
    uint64_t LastAccessTime  = 0;
    uint64_t LastWriteTime   = 0;
    uint64_t ChangeTime      = 0;
    int64_t  EndOfFile       = 0;
    int64_t  AllocationSize  = 0;
    uint32_t FileAttributes  = 0;
    uint32_t FileNameLength  = 0;
    uint32_t EaSize          = 0;

    uint8_t file_name_UTF16[65536] = { 0 };

public:
    explicit FileFullDirectoryInformation() = default;

    explicit FileFullDirectoryInformation(uint64_t CreationTime,
                                 uint64_t LastAccessTime,
                                 uint64_t LastWriteTime, uint64_t ChangeTime,
                                 int64_t EndOfFile, int64_t AllocationSize,
                                 uint32_t FileAttributes,
                                 chars_view file_name)
    : CreationTime(CreationTime)
    , LastAccessTime(LastAccessTime)
    , LastWriteTime(LastWriteTime)
    , ChangeTime(ChangeTime)
    , EndOfFile(EndOfFile)
    , AllocationSize(AllocationSize)
    , FileAttributes(FileAttributes)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->NextEntryOffset);
        stream.out_uint32_le(this->FileIndex);

        stream.out_uint64_le(this->CreationTime);
        stream.out_uint64_le(this->LastAccessTime);
        stream.out_uint64_le(this->LastWriteTime);
        stream.out_uint64_le(this->ChangeTime);

        stream.out_sint64_le(this->EndOfFile);
        stream.out_sint64_le(this->AllocationSize);

        stream.out_uint32_le(this->FileAttributes);

        stream.out_uint32_le(this->FileNameLength);

        stream.out_uint32_le(this->EaSize);

        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {

        // NextEntryOffset(4) + FileIndex(4) +
        //     CreationTime(8) + LastAccessTime(8) +
        //     LastWriteTime(8) + ChangeTime(8) +
        //     EndOfFile(8) + AllocationSize(8) +
        //     FileAttributes(4) + FileNameLength(4) +
        //     EaSize(4)
        ::check_throw(stream, 68, "FileFullDirectoryInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->NextEntryOffset = stream.in_uint32_le();
        this->FileIndex       = stream.in_uint32_le();
        this->CreationTime    = stream.in_uint64_le();
        this->LastAccessTime  = stream.in_uint64_le();
        this->LastWriteTime   = stream.in_uint64_le();
        this->ChangeTime      = stream.in_uint64_le();
        this->EndOfFile       = stream.in_sint64_le();
        this->AllocationSize  = stream.in_sint64_le();
        this->FileAttributes  = stream.in_uint32_le();

        this->FileNameLength = stream.in_uint32_le();

        this->EaSize = stream.in_uint32_le();

        // FileName(variable = FileNameLength)
        ::check_throw(stream, this->FileNameLength, "FileFullDirectoryInformation (1)", ERR_RDPDR_PDU_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileFullDirectoryInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    [[nodiscard]] size_t size() const {
        size_t size = 68;   // NextEntryOffset(4) + FileIndex(4) +
                            //     CreationTime(8) + LastAccessTime(8) +
                            //     LastWriteTime(8) + ChangeTime(8) +
                            //     EndOfFile(8) + AllocationSize(8) +
                            //     FileAttributes(4) + FileNameLength(4) +
                            //     EaSize(4)

        return size + this->FileNameLength;
    }

private:
    size_t str(char * buffer, size_t size) const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        size_t length = ::snprintf(buffer, size,
            "FileFullDirectoryInformation: NextEntryOffset=%u FileIndex=%u CreationTime=%" PRIu64
                " LastAccessTime=%" PRIu64 " LastWriteTime=%" PRIu64 " ChangeTime=%" PRIu64
                " EndOfFile=%" PRId64 " AllocationSize=%" PRId64 " FileAttributes=0x%X "
                "EaSize=%u FileName=\"%s\"",
            this->NextEntryOffset, this->FileIndex,
            this->CreationTime, this->LastAccessTime, this->LastWriteTime,
            this->ChangeTime, this->EndOfFile, this->AllocationSize, this->FileAttributes,
            this->EaSize, file_name_UTF8);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[65536+2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Full Directory Information:");
        LOG(LOG_INFO, "          * NextEntryOffset = 0x%08x (4 bytes)", this->NextEntryOffset);
        LOG(LOG_INFO, "          * FileIndex       = 0x%08x (4 bytes)", this->FileIndex);
        LOG(LOG_INFO, "          * CreationTime    = 0x%" PRIx64 " (8 bytes)", this->CreationTime);
        LOG(LOG_INFO, "          * LastAccessTime  = 0x%" PRIx64 " (8 bytes)", this->LastAccessTime);
        LOG(LOG_INFO, "          * LastWriteTime   = 0x%" PRIx64 " (8 bytes)", this->LastWriteTime);
        LOG(LOG_INFO, "          * ChangeTime      = 0x%" PRIx64 " (8 bytes)", this->ChangeTime);
        LOG(LOG_INFO, "          * EndOfFile       = 0x%" PRId64 " (8 bytes)", this->EndOfFile);
        LOG(LOG_INFO, "          * AllocationSize  = 0x%" PRId64 " (8 bytes)", this->AllocationSize);
        log_file_attributes(this->FileAttributes);
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * EaSize          = %u (4 bytes)", this->EaSize);
        LOG(LOG_INFO, "          * FileName        = \"%s\"", file_name_UTF8);
    }
};  // FileFullDirectoryInformation



// [MS-FSCC] - 2.4.26 FileNamesInformation
// =======================================

// This information class is used in directory enumeration to return detailed
//  information about the contents of a directory.

// This information class returns a list that contains a
//  FILE_NAMES_INFORMATION data element for each file or directory within the
//  target directory. This list MUST reflect the presence of a subdirectory
//  named "." (synonymous with the target directory itself) within the target
//  directory and one named ".." (synonymous with the parent directory of the
//  target directory). For more details, see section 2.1.5.1.

// When multiple FILE_NAMES_INFORMATION data elements are present in the
//  buffer, each MUST be aligned on an 8-byte boundary. Any bytes inserted
//  for alignment SHOULD be set to zero, and the receiver MUST ignore them.
//  No padding is required following the last data element.

// A FILE_NAMES_INFORMATION data element is as follows.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        NextEntryOffset                        |
// +---------------------------------------------------------------+
// |                           FileIndex                           |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                      FileName (variable)                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// NextEntryOffset (4 bytes): A 32-bit unsigned integer that contains the
//  byte offset from the beginning of this entry, at which the next
//  FILE_NAMES_INFORMATION entry is located, if multiple entries are present
//  in a buffer. This member MUST be zero if no other entries follow this
//  one. An implementation MUST use this value to determine the location of
//  the next entry (if multiple entries are present in a buffer).

// FileIndex (4 bytes): A 32-bit unsigned integer that contains the byte
//  offset of the file within the parent directory. For file systems in which
//  the position of a file within the parent directory is not fixed and can
//  be changed at any time to maintain sort order, this field SHOULD be set
//  to 0, and MUST be ignored.<111>

// FileNameLength (4 bytes): A 32-bit unsigned integer that specifies the
//  length, in bytes, of the file name contained within the FileName member.

// FileName (variable): A sequence of Unicode characters containing the file
//  name. When working with this field, use FileNameLength to determine the
//  length of the file name rather than assuming the presence of a trailing
//  null delimiter.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileNamesInformation {
    uint32_t NextEntryOffset = 0;
    uint32_t FileIndex       = 0;
    uint32_t FileNameLength  = 0;

    uint8_t file_name_UTF16[65536] = { 0 };

public:
    explicit FileNamesInformation() = default;

    explicit FileNamesInformation(chars_view file_name)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->NextEntryOffset);
        stream.out_uint32_le(this->FileIndex);
        stream.out_uint32_le(this->FileNameLength);
        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {
        // NextEntryOffset(4) + FileIndex(4) + FileNameLength(4)
        ::check_throw(stream, 12, "FileNamesInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->NextEntryOffset = stream.in_uint32_le();
        this->FileIndex       = stream.in_uint32_le();
        this->FileNameLength  = stream.in_uint32_le();

        // FileName(variable = FilenameLength)
        ::check_throw(stream, this->FileNameLength, "FileNamesInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileFullDirectoryInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    [[nodiscard]] size_t size() const {
        const size_t size = 12; // NextEntryOffset(4) + FileIndex(4) + FileNameLength(4)

        return size + this->FileNameLength;
    }

private:
    size_t str(char * buffer, size_t size) const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        size_t length = ::snprintf(buffer, size,
            "FileNamesInformation: NextEntryOffset=%u FileIndex=%u FileName=\"%s\"",
            this->NextEntryOffset, this->FileIndex, file_name_UTF8);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[65536+2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Directory Information:");
        LOG(LOG_INFO, "          * NextEntryOffset = 0x%08x (4 bytes)", this->NextEntryOffset);
        LOG(LOG_INFO, "          * FileIndex       = 0x%08x (4 bytes)", this->FileIndex);
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * FileName        = \"%s\" (%u byte(s))", file_name_UTF8, this->FileNameLength);
    }
};



// [MS-FSCC] - 2.4.34 FileRenameInformation
// ========================================

// This information class is used to rename a file. The data element provided
//  by the client takes one of two forms, depending on whether it is embedded
//  within SMB or SMB2. The structure definitions are as follows:

// ‚ñ™ FILE_RENAME_INFORMATION_TYPE_1 for the SMB protocol (section 2.4.34.1).

// ‚ñ™ FILE_RENAME_INFORMATION_TYPE_2 for the SMB2 protocol (section 2.4.34.2).

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +------------------------------+-------------------------------------------+
//  | Error code                   | Meaning                                   |
//  +------------------------------+-------------------------------------------+
//  | STATUS_INVALID_PARAMETER     | An invalid parameter was passed for       |
//  | 0xC000000D                   | FileName or FileNameLength, or the target |
//  |                              | file was open, or the RootDirectory field |
//  |                              | value was nonzero for a network           |
//  |                              | operation.                                |
//  +------------------------------+-------------------------------------------+
//  | STATUS_ACCESS_DENIED         | The handle was not opened with delete     |
//  | 0xC0000022                   | access.                                   |
//  +------------------------------+-------------------------------------------+
//  | STATUS_NOT_SAME_DEVICE       | The destination file of a rename request  |
//  | 0xC00000D4                   | is located on a different device than the |
//  |                              | source of the rename request.             |
//  +------------------------------+-------------------------------------------+
//  | STATUS_OBJECT_NAME_INVALID   | The object name is invalid for the target |
//  | 0xC0000033                   | file system.                              |
//  +------------------------------+-------------------------------------------+
//  | STATUS_OBJECT_NAME_COLLISION | The specified name already exists and     |
//  | 0xC0000035                   | ReplaceIfExists is zero.                  |
//  +------------------------------+-------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH  | The specified information record length   |
//  | 0xC0000004                   | does not match the length that is         |
//  |                              | required for the specified information    |
//  |                              | class.                                    |
//  +------------------------------+-------------------------------------------+

//  2.4.34.2 FileRenameInformation for SMB2

//  This information class is used to rename a file from within the SMB2 Protocol [MS-SMB2].

//  A FILE_RENAME_INFORMATION_TYPE_2 data element, defined as follows, is provided by the client.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |ReplaceIfExists|                    Reserved                   |
// +---------------+-----------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         RootDirectory                         |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                       FileName (variable)                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

//  ReplaceIfExists (1 byte):  A Boolean (section 2.1.8) value. Set to TRUE to indicate
// that if a file with the given name already exists, it SHOULD be replaced with the given
// file. Set to FALSE to indicate that the rename operation MUST fail if a file with the
// given name already exists.

//  Reserved (7 bytes): Reserved area for alignment. This field can contain any value
// and MUST be ignored.

//  RootDirectory (8 bytes): A 64-bit unsigned integer that contains the file handle for
// the directory to which the new name of the file is relative. For network operations,
// this value MUST always be zero.

//  FileNameLength (4 bytes):  A 32-bit unsigned integer that specifies the length, in
// bytes, of the file name contained within the FileName field.

//  FileName (variable):  A sequence of Unicode characters containing the new name of
// the file. When working with this field, use FileNameLength to determine the length
// of the file name rather than assuming the presence of a trailing null delimiter. If
// the RootDirectory field is zero, this member MUST specify a full pathname to be
// assigned to the file. For network operations, this pathname is relative to the root
// of the share. If the RootDirectory field is not zero, this field MUST specify a
// pathname, relative to RootDirectory, for the new name of the file.

struct FileRenameInformation {
    uint8_t  ReplaceIfExists = 0;
    uint64_t RootDirectory   = 0;
    uint32_t FileNameLength  = 0;

    uint8_t file_name_UTF16[65536] = { 0 };

    explicit FileRenameInformation() = default;

    explicit FileRenameInformation( uint8_t ReplaceIfExists
                         , uint64_t RootDirectory
                         , chars_view file_name)
      : ReplaceIfExists(ReplaceIfExists)
      , RootDirectory(RootDirectory)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint8(this->ReplaceIfExists);

        stream.out_clear_bytes(7);

        stream.out_uint64_le(this->RootDirectory);
        stream.out_uint32_le(this->FileNameLength);

        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {
        // ReplaceIfExists(1) + padding(7) + RootDirectory(4) + FileNameLength(2)
        ::check_throw(stream, 14, "FileNamesInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->ReplaceIfExists = stream.in_uint8();

        stream.in_skip_bytes(7);

        this->RootDirectory  = stream.in_uint64_le();
        this->FileNameLength = stream.in_uint32_le();

        // FileName(variable = FileNameLength)
        ::check_throw(stream, this->FileNameLength, "FileNamesInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileFullDirectoryInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void log() const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Rename Information:");
        LOG(LOG_INFO, "          * ReplaceIfExists = %02x (1 byte)", this->ReplaceIfExists);
        LOG(LOG_INFO, "          * Padding - (7 byte) NOT USED");
        LOG(LOG_INFO, "          * RootDirectory   = %" PRIx64 " (8 bytes)", this->RootDirectory);
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * VolumeLabel     = \"%s\" (%u byte(s)", file_name_UTF8, this->FileNameLength);
    }
};



// [MS-FSCC] - 2.4.38 FileStandardInformation
// ==========================================

// This information class is used to query file information.

// A FILE_STANDARD_INFORMATION data element, defined as follows, is returned
//  by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                         AllocationSize                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                           EndOfFile                           |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                         NumberOfLinks                         |
// +---------------+---------------+-------------------------------+
// | DeletePending |   Directory   |            Reserved           |
// +---------------+---------------+-------------------------------+

// AllocationSize (8 bytes): A 64-bit signed integer that contains the file
//  allocation size, in bytes. The value of this field MUST be an integer
//  multiple of the cluster size.

// EndOfFile (8 bytes): A 64-bit signed integer that contains the absolute
//  end-of-file position as a byte offset from the start of the file.
//  EndOfFile specifies the offset to the byte immediately following the last
//  valid byte in the file. Because this value is zero-based, it actually
//  refers to the first free byte in the file. That is, it is the offset from
//  the beginning of the file at which new bytes appended to the file will be
//  written. The value of this field MUST be greater than or equal to 0.

// NumberOfLinks (4 bytes): A 32-bit unsigned integer that contains the
//  number of non-deleted links to this file.

// DeletePending (1 byte): A Boolean (section 2.1.8) value. Set to TRUE to
//  indicate that a file deletion has been requested; set to FALSE otherwise.

// Directory (1 byte): A Boolean (section 2.1.8) value. Set to TRUE to
//  indicate that the file is a directory; set to FALSE otherwise.

// Reserved (2 bytes): A 16-bit field. This field is reserved. This field can
//  be set to any value, and MUST be ignored.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+-----------------------------------------+
//  | Error code                  | Meaning                                 |
//  +-----------------------------+-----------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length |
//  | 0xC0000004                  | does not match the length that is       |
//  |                             | required for the specified information  |
//  |                             | class.                                  |
//  +-----------------------------+-----------------------------------------+

class FileStandardInformation {

public:
    int64_t  AllocationSize = 0;
    int64_t  EndOfFile      = 0;
    uint32_t NumberOfLinks  = 0;
    uint8_t  DeletePending  = 0;
    uint8_t  Directory      = 0;


    explicit FileStandardInformation() = default;

    explicit FileStandardInformation(int64_t AllocationSize, int64_t EndOfFile,
                            uint32_t NumberOfLinks, uint8_t DeletePending,
                            uint8_t Directory)
    : AllocationSize(AllocationSize)
    , EndOfFile(EndOfFile)
    , NumberOfLinks(NumberOfLinks)
    , DeletePending(DeletePending)
    , Directory(Directory) {}

    void emit(OutStream & stream) const {
        stream.out_sint64_le(this->AllocationSize);
        stream.out_sint64_le(this->EndOfFile);
        stream.out_uint32_le(this->NumberOfLinks);
        stream.out_uint8(this->DeletePending);
        stream.out_uint8(this->Directory);

        // Reserved(1), MUST NOT be transmitted.
    }

    void receive(InStream & stream) {
        // AllocationSize(8) + EndOfFile(8) + NumberOfLinks(4)
        //  + DeletePending(1) + Directory(1)
        ::check_throw(stream, 22, "FileStandardInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->AllocationSize = stream.in_uint64_le();
        this->EndOfFile      = stream.in_uint64_le();
        this->NumberOfLinks  = stream.in_uint32_le();
        this->DeletePending  = stream.in_uint8();
        this->Directory      = stream.in_uint8();
    }

    static size_t size() {
        return 22;  // AllocationSize(8) + EndOfFile(8) +
                    //     NumberOfLinks(4) + DeletePending(1) +
                    //     Directory(1)
    }

private:
    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileStandardInformation: AllocationSize=%" PRId64
                " EndOfFile=%" PRId64 " NumberOfLinks=%" PRIu32 " "
                "DeletePending=%" PRId8 " Directory=%" PRId8,
            this->AllocationSize, this->EndOfFile, this->NumberOfLinks,
            this->DeletePending, this->Directory);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Standard Information:");
        LOG(LOG_INFO, "          * AllocationSize = 0x%" PRId64 " (8 bytes)", this->AllocationSize);
        LOG(LOG_INFO, "          * EndOfFile      = 0x%" PRId64 " (8 bytes)", this->EndOfFile);
        LOG(LOG_INFO, "          * NumberOfLinks  = 0x%08x (4 bytes)", this->NumberOfLinks);
        LOG(LOG_INFO, "          * DeletePending  = 0x%02x (1 byte)", this->DeletePending);
        LOG(LOG_INFO, "          * Directory      = 0x%02x (1 byte)", this->Directory);
        LOG(LOG_INFO, "          * Reserved - (2 bytes) Not Used");
    }
};  // FileStandardInformation



// [MS-FSCC] - 2.5.1 FileFsAttributeInformation
// ============================================

// This information class is used to query attribute information for a file
//  system.

// A FILE_FS_ATTRIBUTE_INFORMATION data element, defined as follows, is
//  returned by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                      FileSystemAttributes                     |
// +---------------------------------------------------------------+
// |                   MaximumComponentNameLength                  |
// +---------------------------------------------------------------+
// |                      FileSystemNameLength                     |
// +---------------------------------------------------------------+
// |                   FileSystemName (variable)                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// FileSystemAttributes (4 bytes): A 32-bit unsigned integer that contains a
//  bitmask of flags that specify attributes of the specified file system as
//  a combination of the following flags. The value of this field MUST be a
//  bitwise OR of zero or more of the following with the exception that
//  FILE_FILE_COMPRESSION and FILE_VOLUME_IS_COMPRESSED cannot both be set.
//  Any flag values not explicitly mentioned here can be set to any value,
//  and MUST be ignored.

//  +-----------------------------------+--------------------------------------+
//  | Value                             | Meaning                              |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_USN_JOURNAL         | The file system implements a USN     |
//  | 0x02000000                        | change journal.<126>                 |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_OPEN_BY_FILE_ID     | The file system supports opening a   |
//  | 0x01000000                        | file by FileID or ObjectID.<127>     |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_EXTENDED_ATTRIBUTES | The file system persistently stores  |
//  | 0x00800000                        | Extended Attribute information per   |
//  |                                   | file.<128>                           |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_HARD_LINKS          | The file system supports hard        |
//  | 0x00400000                        | linking files.<129>                  |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_TRANSACTIONS        | The volume supports                  |
//  | 0x00200000                        | transactions.<130>                   |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SEQUENTIAL_WRITE_ONCE        | The underlying volume is write once. |
//  | 0x00100000                        |                                      |
//  +-----------------------------------+--------------------------------------+
//  | FILE_READ_ONLY_VOLUME             | If set, the volume has been mounted  |
//  | 0x00080000                        | in read-only mode.<131>              |
//  +-----------------------------------+--------------------------------------+
//  | FILE_NAMED_STREAMS                | The file system supports named       |
//  | 0x00040000                        | streams.                             |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_ENCRYPTION          | The file system supports the         |
//  | 0x00020000                        | Encrypted File System (EFS).<132>    |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_OBJECT_IDS          | The file system supports object      |
//  | 0x00010000                        | identifiers.                         |
//  +-----------------------------------+--------------------------------------+
//  | FILE_VOLUME_IS_COMPRESSED         | The specified volume is a compressed |
//  | 0x00008000                        | volume. This flag is incompatible    |
//  |                                   | with the FILE_FILE_COMPRESSION flag. |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_REMOTE_STORAGE      | The file system supports remote      |
//  | 0x00000100                        | storage.<133>                        |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_REPARSE_POINTS      | The file system supports reparse     |
//  | 0x00000080                        | points.                              |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORTS_SPARSE_FILES        | The file system supports sparse      |
//  | 0x00000040                        | files.                               |
//  +-----------------------------------+--------------------------------------+
//  | FILE_VOLUME_QUOTAS                | The file system supports per-user    |
//  | 0x00000020                        | quotas.                              |
//  +-----------------------------------+--------------------------------------+
//  | FILE_FILE_COMPRESSION             | The file volume supports file-based  |
//  | 0x00000010                        | compression. This flag is            |
//  |                                   | incompatible with the                |
//  |                                   | FILE_VOLUME_IS_COMPRESSED flag.      |
//  +-----------------------------------+--------------------------------------+
//  | FILE_PERSISTENT_ACLS              | The file system preserves and        |
//  | 0x00000008                        | enforces access control lists        |
//  |                                   | (ACLs).                              |
//  +-----------------------------------+--------------------------------------+
//  | FILE_UNICODE_ON_DISK              | The file system supports Unicode in  |
//  | 0x00000004                        | file and directory names. This flag  |
//  |                                   | applies only to file and directory   |
//  |                                   | names; the file system neither       |
//  |                                   | restricts nor interprets the bytes   |
//  |                                   | of data within a file.               |
//  +-----------------------------------+--------------------------------------+
//  | FILE_CASE_PRESERVED_NAMES         | The file system preserves the case   |
//  | 0x00000002                        | of file names when it places a name  |
//  |                                   | on disk.                             |
//  +-----------------------------------+--------------------------------------+
//  | FILE_CASE_SENSITIVE_SEARCH        | The file system supports             |
//  | 0x00000001                        | case-sensitive file names when       |
//  |                                   | looking up (searching for) file      |
//  |                                   | names in a directory.                |
//  +-----------------------------------+--------------------------------------+
//  | FILE_SUPPORT_INTEGRITY_STREAMS    | The file system supports integrity   |
//  | 0x04000000                        | streams.<134>                        |
//  +-----------------------------------+--------------------------------------+

enum {
      FILE_SUPPORTS_USN_JOURNAL         = 0x02000000
    , FILE_SUPPORTS_OPEN_BY_FILE_ID     = 0x01000000
    , FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 0x00800000
    , FILE_SUPPORTS_HARD_LINKS          = 0x00400000
    , FILE_SUPPORTS_TRANSACTIONS        = 0x00200000
    , FILE_SEQUENTIAL_WRITE_ONCE        = 0x00100000
    , FILE_READ_ONLY_VOLUME             = 0x00080000
    , FILE_NAMED_STREAMS                = 0x00040000
    , FILE_SUPPORTS_ENCRYPTION          = 0x00020000
    , FILE_SUPPORTS_OBJECT_IDS          = 0x00010000
    , FILE_VOLUME_IS_COMPRESSED         = 0x00008000
    , FILE_SUPPORTS_REMOTE_STORAGE      = 0x00000100
    , FILE_SUPPORTS_REPARSE_POINTS      = 0x00000080
    , FILE_SUPPORTS_SPARSE_FILES        = 0x00000040
    , FILE_VOLUME_QUOTAS                = 0x00000020
    , FILE_FILE_COMPRESSION             = 0x00000010
    , FILE_PERSISTENT_ACLS              = 0x00000008
    , FILE_UNICODE_ON_DISK              = 0x00000004
    , FILE_CASE_PRESERVED_NAMES         = 0x00000002
    , FILE_CASE_SENSITIVE_SEARCH        = 0x00000001
    , FILE_SUPPORT_INTEGRITY_STREAMS    = 0x04000000
};

enum : uint32_t {
    NEW_FILE_ATTRIBUTES =  fscc::FILE_SUPPORTS_USN_JOURNAL | fscc::FILE_SUPPORTS_OPEN_BY_FILE_ID | fscc::FILE_SUPPORTS_EXTENDED_ATTRIBUTES | fscc::FILE_SUPPORTS_HARD_LINKS | fscc::FILE_SUPPORTS_TRANSACTIONS | fscc::FILE_NAMED_STREAMS | fscc::FILE_SUPPORTS_ENCRYPTION | fscc::FILE_SUPPORTS_OBJECT_IDS | fscc::FILE_SUPPORTS_REPARSE_POINTS | fscc::FILE_SUPPORTS_SPARSE_FILES | fscc::FILE_VOLUME_QUOTAS | fscc::FILE_FILE_COMPRESSION | fscc::FILE_PERSISTENT_ACLS | fscc::FILE_UNICODE_ON_DISK | fscc::FILE_CASE_PRESERVED_NAMES | fscc::FILE_CASE_SENSITIVE_SEARCH // = 0 x03e700ff
};



// MaximumComponentNameLength (4 bytes): A 32-bit signed integer that
//  contains the maximum file name component length, in bytes, supported by
//  the specified file system. The value of this field MUST be greater than
//  zero and MUST be no more than 510.<135>

// FileSystemNameLength (4 bytes): A 32-bit unsigned integer that contains
//  the length, in bytes, of the file system name in the FileSystemName
//  field. The value of this field MUST be greater than 0.

// FileSystemName (variable): A variable-length Unicode field containing the
//  name of the file system. This field is not null-terminated and MUST be
//  handled as a sequence of FileSystemNameLength bytes. This field is
//  intended to be informative only. A client SHOULD NOT infer file system
//  type specific behavior from this field.<136>

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_BUFFER_OVERFLOW      | The output buffer was filled before all of |
//  | 0x80000005                  | the file system information could be       |
//  |                             | returned; only a portion of the            |
//  |                             | FileSystemName field is returned.          |
//  +-----------------------------+--------------------------------------------+

class FileFsAttributeInformation {
    uint32_t FileSystemAttributes_      = 0;
    uint32_t MaximumComponentNameLength = 0;
    uint32_t FileSystemNameLength       = 0;

    uint8_t file_system_name_UTF16[65535] = { 0 };

public:
    explicit FileFsAttributeInformation() = default;

    explicit FileFsAttributeInformation(uint32_t FileSystemAttributes,
                               uint32_t MaximumComponentNameLength,
                               chars_view file_system_name)
    : FileSystemAttributes_(FileSystemAttributes)
    , MaximumComponentNameLength(MaximumComponentNameLength)
    {
        this->FileSystemNameLength =
            ::UTF8toUTF16(file_system_name, this->file_system_name_UTF16, sizeof(this->file_system_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->FileSystemAttributes_);
        stream.out_sint32_le(this->MaximumComponentNameLength);

        stream.out_uint32_le(this->FileSystemNameLength);

        stream.out_copy_bytes(this->file_system_name_UTF16,
            this->FileSystemNameLength);
    }

    void receive(InStream & stream) {
        // FileSystemAttributes(4) + MaximumComponentNameLength(4) +
        //     FileSystemNameLength(4)
        ::check_throw(stream, 12, "FileFsAttributeInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->FileSystemAttributes_      = stream.in_uint32_le();
        this->MaximumComponentNameLength = stream.in_sint32_le();

        this->FileSystemNameLength = stream.in_uint32_le();

        // FileSystemName(variable)
        ::check_throw(stream, this->FileSystemNameLength, "FileFsAttributeInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileSystemNameLength > sizeof(this->file_system_name_UTF16)) {
            LOG(LOG_ERR,
                "FileFullDirectoryInformation: FileSystemName too long. Length=%u",
                this->FileSystemNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_system_name_UTF16, this->FileSystemNameLength);
    }

    [[nodiscard]] size_t size() const {
        const size_t size = 12; // FileSystemAttributes(4) + MaximumComponentNameLength(4) +
                                //     FileSystemNameLength(4)

        return size + this->FileSystemNameLength;
    }

    [[nodiscard]] uint32_t FileSystemAttributes() const { return this->FileSystemAttributes_; }

    void set_FileSystemAttributes(uint32_t FileSystemAttributes) {
        this->FileSystemAttributes_ = FileSystemAttributes;
    }

private:
    size_t str(char * buffer, size_t size) const {
        uint8_t file_system_name_UTF8[65536];
        const size_t file_system_name_UTF8_length = ::UTF16toUTF8(
            this->file_system_name_UTF16,
            this->FileSystemNameLength,
            file_system_name_UTF8,
            sizeof(file_system_name_UTF8) - 1);
        file_system_name_UTF8[file_system_name_UTF8_length] = 0;

        size_t length = ::snprintf(buffer, size,
            "FileFsAttributeInformation: FileSystemAttributes=0x%X "
                " MaximumComponentNameLength=%u FileSystemName=\"%s\"",
            this->FileSystemAttributes_, this->MaximumComponentNameLength,
            file_system_name_UTF8);
        return ((length < size) ? length : size - 1);
    }

    void log_file_system_attributes() const
    {
#define ASTR(f) bool(this->FileSystemAttributes_ & f) ? " " #f : ""
        LOG(LOG_INFO, "          * FileSystemAttributes       = 0x%08x "
            "(4 bytes): %s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
            this->FileSystemAttributes_,
            ASTR(FILE_SUPPORTS_USN_JOURNAL),
            ASTR(FILE_SUPPORTS_OPEN_BY_FILE_ID),
            ASTR(FILE_SUPPORTS_EXTENDED_ATTRIBUTES),

            ASTR(FILE_SUPPORTS_HARD_LINKS),
            ASTR(FILE_SUPPORTS_TRANSACTIONS),
            ASTR(FILE_SEQUENTIAL_WRITE_ONCE),

            ASTR(FILE_READ_ONLY_VOLUME),
            ASTR(FILE_NAMED_STREAMS),
            ASTR(FILE_SUPPORTS_ENCRYPTION),

            ASTR(FILE_SUPPORTS_OBJECT_IDS),
            ASTR(FILE_VOLUME_IS_COMPRESSED),
            ASTR(FILE_SUPPORTS_REMOTE_STORAGE),

            ASTR(FILE_SUPPORTS_REPARSE_POINTS),
            ASTR(FILE_SUPPORTS_SPARSE_FILES),
            ASTR(FILE_VOLUME_QUOTAS),

            ASTR(FILE_FILE_COMPRESSION),
            ASTR(FILE_PERSISTENT_ACLS),
            ASTR(FILE_UNICODE_ON_DISK),

            ASTR(FILE_CASE_PRESERVED_NAMES),
            ASTR(FILE_CASE_SENSITIVE_SEARCH),
            ASTR(FILE_SUPPORT_INTEGRITY_STREAMS)
        );
#undef ASTR
    }

public:
    void log(int level) const {
        char buffer[65536+2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        uint8_t file_system_name_UTF8[65536];
        const size_t file_system_name_UTF8_length = ::UTF16toUTF8(
            this->file_system_name_UTF16,
            this->FileSystemNameLength,
            file_system_name_UTF8,
            sizeof(file_system_name_UTF8) - 1);
        file_system_name_UTF8[file_system_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Fs Attribute Information:");
        this->log_file_system_attributes();
        LOG(LOG_INFO, "          * MaximumComponentNameLength = %d (4 bytes)", int(this->MaximumComponentNameLength));
        LOG(LOG_INFO, "          * FileSystemNameLength       = %u (4 bytes)", this->FileSystemNameLength);
        LOG(LOG_INFO, "          * FileSystemName             = \"%s\" (%u byte(s))", file_system_name_UTF8, this->FileSystemNameLength);
    }
};  // FileFsAttributeInformation



// [MS-FSCC] - 2.5.4 FileFsFullSizeInformation
// ===========================================

// This information class is used to query sector size information for a file
//  system volume.

// A FILE_FS_FULL_SIZE_INFORMATION data element, defined as follows, is
//  returned by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                      TotalAllocationUnits                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                 CallerAvailableAllocationUnits                |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                 ActualAvailableAllocationUnits                |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                    SectorsPerAllocationUnit                   |
// +---------------------------------------------------------------+
// |                         BytesPerSector                        |
// +---------------------------------------------------------------+

// TotalAllocationUnits (8 bytes): A 64-bit signed integer that contains the
//  total number of allocation units on the volume that are available to the
//  user associated with the calling thread. The value of this field MUST be
//  greater than or equal to 0.<142>

// CallerAvailableAllocationUnits (8 bytes): A 64-bit signed integer that
//  contains the total number of free allocation units on the volume that are
//  available to the user associated with the calling thread. The value of
//  this field MUST be greater than or equal to 0.<143>

// ActualAvailableAllocationUnits (8 bytes): A 64-bit signed integer that
//  contains the total number of free allocation units on the volume. The
//  value of this field MUST be greater than or equal to 0.

// SectorsPerAllocationUnit (4 bytes): A 32-bit unsigned integer that
//  contains the number of sectors in each allocation unit.

// BytesPerSector (4 bytes): A 32-bit unsigned integer that contains the
//  number of bytes in each sector.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileFsFullSizeInformation {
    int64_t  TotalAllocationUnits           = 0;
    int64_t  CallerAvailableAllocationUnits = 0;
    int64_t  ActualAvailableAllocationUnits = 0;
    uint32_t SectorsPerAllocationUnit       = 0;
    uint32_t BytesPerSector                 = 0;

public:
    explicit FileFsFullSizeInformation() = default;

    explicit FileFsFullSizeInformation(int64_t TotalAllocationUnits,
                              int64_t CallerAvailableAllocationUnits,
                              int64_t ActualAvailableAllocationUnits,
                              uint32_t SectorsPerAllocationUnit,
                              uint32_t BytesPerSector)
    : TotalAllocationUnits(TotalAllocationUnits)
    , CallerAvailableAllocationUnits(CallerAvailableAllocationUnits)
    , ActualAvailableAllocationUnits(ActualAvailableAllocationUnits)
    , SectorsPerAllocationUnit(SectorsPerAllocationUnit)
    , BytesPerSector(BytesPerSector) {}

    void emit(OutStream & stream) const {
        stream.out_sint64_le(this->TotalAllocationUnits);
        stream.out_sint64_le(this->CallerAvailableAllocationUnits);
        stream.out_sint64_le(this->ActualAvailableAllocationUnits);
        stream.out_uint32_le(this->SectorsPerAllocationUnit);
        stream.out_uint32_le(this->BytesPerSector);
    }

    void receive(InStream & stream) {

        // TotalAllocationUnits(8)
        //   + CallerAvailableAllocationUnits(8)
        //   + ActualAvailableAllocationUnits(8)
        //   + SectorsPerAllocationUnit(4)
        //   + BytesPerSector(4)
        ::check_throw(stream, 32, "FileFsFullSizeInformation", ERR_FSCC_DATA_TRUNCATED);

        this->TotalAllocationUnits           = stream.in_sint64_le();
        this->CallerAvailableAllocationUnits = stream.in_sint64_le();
        this->ActualAvailableAllocationUnits = stream.in_sint64_le();
        this->SectorsPerAllocationUnit       = stream.in_uint32_le();
        this->BytesPerSector                 = stream.in_uint32_le();
    }

    [[nodiscard]] static constexpr size_t size() {
        return 32;  // TotalAllocationUnits(8) + CallerAvailableAllocationUnits(8) +
                    //     ActualAvailableAllocationUnits(8) + SectorsPerAllocationUnit(4) +
                    //     BytesPerSector(4)
    }

private:
    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileFsFullSizeInformation: TotalAllocationUnits=%" PRId64
                " CallerAvailableAllocationUnits=%" PRId64
                " ActualAvailableAllocationUnits=%" PRId64
                " SectorsPerAllocationUnit=%u BytesPerSector=%u",
            this->TotalAllocationUnits, this->CallerAvailableAllocationUnits,
            this->ActualAvailableAllocationUnits, this->SectorsPerAllocationUnit,
            this->BytesPerSector);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Fs Full Size Information:");
        LOG(LOG_INFO, "          * TotalAllocationUnits           = 0x%" PRId64 " (8 bytes)", this->TotalAllocationUnits);
        LOG(LOG_INFO, "          * CallerAvailableAllocationUnits = 0x%" PRId64 " (8 bytes)", this->CallerAvailableAllocationUnits);
        LOG(LOG_INFO, "          * ActualAvailableAllocationUnits = 0x%" PRId64 " (8 bytes)", this->ActualAvailableAllocationUnits);
        LOG(LOG_INFO, "          * SectorsPerAllocationUnit       = %u (4 bytes)", this->SectorsPerAllocationUnit);
        LOG(LOG_INFO, "          * BytesPerSector                 = %u (4 bytes)", this->BytesPerSector);
    }
};



// [MS-FSCC] - 2.5.8 FileFsSizeInformation
// =======================================

// This information class is used to query sector size information for a file
//  system volume.

// A FILE_FS_SIZE_INFORMATION data element, defined as follows, is returned
//  by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                      TotalAllocationUnits                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                    AvailableAllocationUnits                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                    SectorsPerAllocationUnit                   |
// +---------------------------------------------------------------+
// |                         BytesPerSector                        |
// +---------------------------------------------------------------+

// TotalAllocationUnits (8 bytes): A 64-bit signed integer that contains the
//  total number of allocation units on the volume that are available to the
//  user associated with the calling thread. This value MUST be greater than
//  or equal to 0.<152>

// AvailableAllocationUnits (8 bytes): A 64-bit signed integer that contains
//  the total number of free allocation units on the volume that are
//  available to the user associated with the calling thread. This value MUST
//  be greater than or equal to 0.<153>

// SectorsPerAllocationUnit (4 bytes): A 32-bit unsigned integer that
//  contains the number of sectors in each allocation unit.

// BytesPerSector (4 bytes): A 32-bit unsigned integer that contains the
//  number of bytes in each sector.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileFsSizeInformation {
    int64_t  TotalAllocationUnits     = 0;
    int64_t  AvailableAllocationUnits = 0;
    uint32_t SectorsPerAllocationUnit = 0;
    uint32_t BytesPerSector           = 0;

public:
    explicit FileFsSizeInformation() = default;

    explicit FileFsSizeInformation(int64_t TotalAllocationUnits,
                          int64_t AvailableAllocationUnits,
                          uint32_t SectorsPerAllocationUnit,
                          uint32_t BytesPerSector)
    : TotalAllocationUnits(TotalAllocationUnits)
    , AvailableAllocationUnits(AvailableAllocationUnits)
    , SectorsPerAllocationUnit(SectorsPerAllocationUnit)
    , BytesPerSector(BytesPerSector) {}

    void emit(OutStream & stream) const {
        stream.out_sint64_le(this->TotalAllocationUnits);
        stream.out_sint64_le(this->AvailableAllocationUnits);
        stream.out_uint32_le(this->SectorsPerAllocationUnit);
        stream.out_uint32_le(this->BytesPerSector);
    }

    void receive(InStream & stream) {

        // TotalAllocationUnits(8)
        //   + AvailableAllocationUnits(8)
        //   + SectorsPerAllocationUnit(4)
        //   + BytesPerSector(4)
        ::check_throw(stream, 24, "FileFsSizeInformation", ERR_FSCC_DATA_TRUNCATED);

        this->TotalAllocationUnits     = stream.in_sint64_le();
        this->AvailableAllocationUnits = stream.in_sint64_le();
        this->SectorsPerAllocationUnit = stream.in_uint32_le();
        this->BytesPerSector           = stream.in_uint32_le();
    }

    [[nodiscard]] static constexpr size_t size() {
        return 24;  // TotalAllocationUnits(8) + AvailableAllocationUnits(8) +
                    //     SectorsPerAllocationUnit(4) + BytesPerSector(4)
    }

private:
    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileFsSizeInformation: TotalAllocationUnits=%" PRId64
                " AvailableAllocationUnits=%" PRId64
                " SectorsPerAllocationUnit=%u BytesPerSector=%u",
            this->TotalAllocationUnits, this->AvailableAllocationUnits,
            this->SectorsPerAllocationUnit, this->BytesPerSector);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Fs Size Information:");
        LOG(LOG_INFO, "          * TotalAllocationUnits     = 0x%" PRId64 " (8 bytes)", this->TotalAllocationUnits);
        LOG(LOG_INFO, "          * AvailableAllocationUnits = 0x%" PRId64 " (8 bytes)", this->AvailableAllocationUnits);
        LOG(LOG_INFO, "          * SectorsPerAllocationUnit = 0x%08x (4 byte)", this->SectorsPerAllocationUnit);
        LOG(LOG_INFO, "          * BytesPerSector           = %u (4 bytes)", this->BytesPerSector);
    }
};



// [MS-FSCC] - 2.5.9 FileFsVolumeInformation
// =========================================

// This information class is used to query information on a volume on which a
//  file system is mounted. A FILE_FS_VOLUME_INFORMATION data element,
//  defined as follows, is returned by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                       VolumeCreationTime                      |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                       VolumeSerialNumber                      |
// +---------------------------------------------------------------+
// |                       VolumeLabelLength                       |
// +---------------+---------------+-------------------------------+
// |SupportsObjects|    Reserved   |     VolumeLabel (variable)    |
// +---------------+---------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// VolumeCreationTime (8 bytes): The time when the volume was created; see
//  section 2.1.1. The value of this field MUST be greater than or equal to
//  0.

// VolumeSerialNumber (4 bytes): A 32-bit unsigned integer that contains the
//  serial number of the volume. The serial number is an opaque value
//  generated by the file system at format time, and is not necessarily
//  related to any hardware serial number for the device on which the file
//  system is located. No specific format or content of this field is
//  required for protocol interoperation. This value is not required to be
//  unique.

// VolumeLabelLength (4 bytes): A 32-bit unsigned integer that contains the
//  length, in bytes, including the trailing null, if present, of the name of
//  the volume.<154>

// SupportsObjects (1 byte): A Boolean (section 2.1.8) value. Set to TRUE if
//  the file system supports object-oriented file system objects; set to
//  FALSE otherwise.<155>

// Reserved (1 byte): An 8-bit field. This field is reserved. This field MUST
//  be set to zero and MUST be ignored.

// VolumeLabel (variable): A variable-length Unicode field containing the
//  name of the volume. The content of this field can be a null-terminated
//  string or can be a string padded with the space character to be
//  VolumeLabelLength bytes long.

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_BUFFER_OVERFLOW      | The output buffer was filled before all of |
//  | 0x80000005                  | the volume information could be returned;  |
//  |                             | only a portion of the VolumeLabel field is |
//  |                             | returned.                                  |
//  +-----------------------------+--------------------------------------------+

class FileFsVolumeInformation {
    uint64_t VolumeCreationTime = 0;
    uint32_t VolumeSerialNumber = 0;
    uint32_t VolumeLabelLength  = 0;
    uint8_t  SupportsObjects    = 0;

    uint8_t volume_label_UTF16[65536] = { 0 };

public:
    explicit FileFsVolumeInformation() = default;

    explicit FileFsVolumeInformation(uint64_t VolumeCreationTime, uint32_t VolumeSerialNumber,
                         uint8_t SupportsObjects, chars_view volume_label)
    : VolumeCreationTime(VolumeCreationTime)
    , VolumeSerialNumber(VolumeSerialNumber)
    , SupportsObjects(SupportsObjects)
    {
        this->VolumeLabelLength =
            ::UTF8toUTF16(volume_label, this->volume_label_UTF16, sizeof(this->volume_label_UTF16) - sizeof(uint16_t));
        this->volume_label_UTF16[this->VolumeLabelLength    ] = 0;
        this->volume_label_UTF16[this->VolumeLabelLength + 1] = 0;
        this->VolumeLabelLength += 2;
    }

    void emit(OutStream & stream) const {
        stream.out_uint64_le(this->VolumeCreationTime);
        stream.out_uint32_le(this->VolumeSerialNumber);

        stream.out_uint32_le(this->VolumeLabelLength);

        stream.out_uint8(this->SupportsObjects);

        // Reserved(1), MUST NOT be transmitted.

        stream.out_copy_bytes(this->volume_label_UTF16, this->VolumeLabelLength);
    }

    void receive(InStream & stream) {

        // VolumeCreationTime(8) + VolumeSerialNumber(4)
        //   + VolumeLabelLength(4) + SupportsObjects(1)
        ::check_throw(stream, 17, "FileFsVolumeInformation", ERR_FSCC_DATA_TRUNCATED);

        this->VolumeCreationTime = stream.in_uint64_le();
        this->VolumeSerialNumber = stream.in_uint32_le();
        this->VolumeLabelLength  = stream.in_uint32_le();
        this->SupportsObjects    = stream.in_uint8();

        // Reserved(1), MUST NOT be transmitted.

        // VolumeLabel(variable)
        ::check_throw(stream, this->VolumeLabelLength, "FileFsVolumeInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->VolumeLabelLength > sizeof(this->volume_label_UTF16)) {
            LOG(LOG_ERR,
                "FileFsVolumeInformation: FileName too long. Length=%u",
                this->VolumeLabelLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->volume_label_UTF16, this->VolumeLabelLength);
    }

    [[nodiscard]] size_t size() const {
        const size_t size = 17; // VolumeCreationTime(8) + VolumeSerialNumber(4) +
                                //     VolumeLabelLength(4) + SupportsObjects(1)

        // Reserved(1), MUST NOT be transmitted.

        return size + this->VolumeLabelLength;
    }

private:
    size_t str(char * buffer, size_t size) const {
        uint8_t volume_label_UTF8[65536];
        const size_t volume_label_UTF8_length = ::UTF16toUTF8(
            this->volume_label_UTF16,
            this->VolumeLabelLength,
            volume_label_UTF8,
            sizeof(volume_label_UTF8) - 1);
        volume_label_UTF8[volume_label_UTF8_length] = 0;

        size_t length = ::snprintf(buffer, size,
            "FileFsVolumeInformation: VolumeCreationTime=%" PRIu64
                " VolumeSerialNumber=0x%X SupportsObjects=%" PRId8 " VolumeLabel=\"%s\"",
            this->VolumeCreationTime, this->VolumeSerialNumber,
            this->SupportsObjects, volume_label_UTF8);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[65536+2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        uint8_t volume_label_UTF8[65536];
        const size_t volume_label_UTF8_length = ::UTF16toUTF8(
            this->volume_label_UTF16,
            this->VolumeLabelLength,
            volume_label_UTF8,
            sizeof(volume_label_UTF8) - 1);
        volume_label_UTF8[volume_label_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Fs Volume Information:");
        LOG(LOG_INFO, "          * VolumeCreationTime = 0x%" PRIx64 " (8 bytes)", this->VolumeCreationTime);
        LOG(LOG_INFO, "          * VolumeSerialNumber = 0x%08x (4 bytes)", this->VolumeSerialNumber);
        LOG(LOG_INFO, "          * VolumeLabelLength  = %u (4 bytes)", this->VolumeLabelLength);
        LOG(LOG_INFO, "          * SupportsObjects    = 0x%02x (1 byte)", this->SupportsObjects);
        LOG(LOG_INFO, "          * VolumeLabel        = \"%s\" (%u byte(s))", volume_label_UTF8, this->VolumeLabelLength);
    }
};  // FileFsVolumeInformation



// [MS-FSCC] - 2.5.10 FileFsDeviceInformation
// ==========================================

// This information class is used to query device information associated with
//  a file system volume.

// A FILE_FS_DEVICE_INFORMATION data element, defined as follows, is returned
//  by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                           DeviceType                          |
// +---------------------------------------------------------------+
// |                        Characteristics                        |
// +---------------------------------------------------------------+

// DeviceType (4 bytes): This identifies the type of given volume. It MUST be
//  one of the following.

//  +--------------------+-----------------------------+
//  | Value              | Meaning                     |
//  +--------------------+-----------------------------+
//  | FILE_DEVICE_CD_ROM | Volume resides on a CD ROM. |
//  | 0x00000002         |                             |
//  +--------------------+-----------------------------+
//  | FILE_DEVICE_DISK   | Volume resides on a disk.   |
//  | 0x00000007         |                             |
//  +--------------------+-----------------------------+

enum {
      FILE_DEVICE_CD_ROM = 0x00000002
    , FILE_DEVICE_DISK   = 0x00000007
};

// Characteristics (4 bytes): A bit field which identifies various
//  characteristics about a given volume. The following are valid bit values.

//  +------------------------------------------+-------------------------------+
//  | Value                                    | Meaning                       |
//  +------------------------------------------+-------------------------------+
//  | FILE_REMOVABLE_MEDIA                     | Indicates that the storage    |
//  | 0x00000001                               | device supports removable     |
//  |                                          | media. Notice that this       |
//  |                                          | characteristic indicates      |
//  |                                          | removable media, not a        |
//  |                                          | removable device. For         |
//  |                                          | example, drivers for JAZ      |
//  |                                          | drive devices specify this    |
//  |                                          | characteristic, but drivers   |
//  |                                          | for PCMCIA flash disks do     |
//  |                                          | not.                          |
//  +------------------------------------------+-------------------------------+
//  | FILE_READ_ONLY_DEVICE                    | Indicates that the device     |
//  | 0x00000002                               | cannot be written to.         |
//  +------------------------------------------+-------------------------------+
//  | FILE_FLOPPY_DISKETTE                     | Indicates that the device is  |
//  | 0x00000004                               | a floppy disk device.         |
//  +------------------------------------------+-------------------------------+
//  | FILE_WRITE_ONCE_MEDIA                    | Indicates that the device     |
//  | 0x00000008                               | supports write-once media.    |
//  +------------------------------------------+-------------------------------+
//  | FILE_REMOTE_DEVICE                       | Indicates that the volume is  |
//  | 0x00000010                               | for a remote file system like |
//  |                                          | SMB or CIFS.                  |
//  +------------------------------------------+-------------------------------+
//  | FILE_DEVICE_IS_MOUNTED                   | Indicates that a file system  |
//  | 0x00000020                               | is mounted on the device.     |
//  +------------------------------------------+-------------------------------+
//  | FILE_VIRTUAL_VOLUME                      | Indicates that the volume     |
//  | 0x00000040                               | does not directly reside on   |
//  |                                          | storage media, but resides on |
//  |                                          | some other type of media      |
//  |                                          | (memory for example).         |
//  +------------------------------------------+-------------------------------+
//  | FILE_DEVICE_SECURE_OPEN                  | By default, volumes do not    |
//  | 0x00000100                               | check the ACL associated with |
//  |                                          | the volume, but instead use   |
//  |                                          | the ACLs associated with      |
//  |                                          | individual files on the       |
//  |                                          | volume. When this flag is set |
//  |                                          | the volume ACL is also        |
//  |                                          | checked.                      |
//  +------------------------------------------+-------------------------------+
//  | FILE_CHARACTERISTIC_TS_DEVICE            | Indicates that the device     |
//  | 0x00001000                               | object is part of a Terminal  |
//  |                                          | Services device stack. See    |
//  |                                          | [MS-RDPBCGR] for more         |
//  |                                          | information.                  |
//  +------------------------------------------+-------------------------------+
//  | FILE_CHARACTERISTIC_WEBDAV_DEVICE        | Indicates that a web-based    |
//  | 0x00002000                               | Distributed Authoring and     |
//  |                                          | Versioning (WebDAV) file      |
//  |                                          | system is mounted on the      |
//  |                                          | device. See [MS- WDVME] for   |
//  |                                          | more information.             |
//  +------------------------------------------+-------------------------------+
//  | FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL | The IO Manager performs a     |
//  | 0x00020000                               | full security check for       |
//  |                                          | traverse access if the client |
//  |                                          | is an appcontainer.<156>      |
//  +------------------------------------------+-------------------------------+

enum {
      FILE_REMOVABLE_MEDIA                      = 0x00000001
    , FILE_READ_ONLY_DEVICE                     = 0x00000002
    , FILE_FLOPPY_DISKETTE                      = 0x00000004
    , FILE_WRITE_ONCE_MEDIA                     = 0x00000008
    , FILE_REMOTE_DEVICE                        = 0x00000010
    , FILE_DEVICE_IS_MOUNTED                    = 0x00000020
    , FILE_VIRTUAL_VOLUME                       = 0x00000040
    , FILE_DEVICE_SECURE_OPEN                   = 0x00000100
    , FILE_CHARACTERISTIC_TS_DEVICE             = 0x00001000
    , FILE_CHARACTERISTIC_WEBDAV_DEVICE         = 0x00002000
    , FILE_DEVICE_ALLOW_APPCONTAINER_TRAVERSAL  = 0x00020000
};

// This operation returns a status code, as specified in [MS-ERREF] section
//  2.3. The status code returned directly by the function that processes
//  this file information class MUST be STATUS_SUCCESS or one of the
//  following.

//  +-----------------------------+--------------------------------------------+
//  | Error code                  | Meaning                                    |
//  +-----------------------------+--------------------------------------------+
//  | STATUS_INFO_LENGTH_MISMATCH | The specified information record length    |
//  | 0xC0000004                  | does not match the length that is required |
//  |                             | for the specified information class.       |
//  +-----------------------------+--------------------------------------------+

class FileFsDeviceInformation {
    uint32_t DeviceType      = 0;
    uint32_t Characteristics = 0;

public:
    explicit FileFsDeviceInformation() = default;

    explicit FileFsDeviceInformation(uint32_t DeviceType, uint32_t Characteristics)
    : DeviceType(DeviceType)
    , Characteristics(Characteristics) {}

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->DeviceType);
        stream.out_uint32_le(this->Characteristics);
    }

    void receive(InStream & stream) {
        // DeviceType(4) + Characteristics(4)
        ::check_throw(stream, 8, "FileFsDeviceInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->DeviceType      = stream.in_uint32_le();
        this->Characteristics = stream.in_uint32_le();
    }

    static size_t size() {
        return 8;   // DeviceType(4) + Characteristics(4)
    }

private:
    static const char * get_DeviceType_name(uint32_t DeviceType) {
        switch (DeviceType) {
            case FILE_DEVICE_CD_ROM: return "FILE_DEVICE_CD_ROM";
            case FILE_DEVICE_DISK:   return "FILE_DEVICE_DISK";
        }

        return "<unknown>";
    }

    size_t str(char * buffer, size_t size) const {
        size_t length = ::snprintf(buffer, size,
            "FileFsDeviceInformation: DeviceType=%s(0x%X) Characteristics=0x%X",
            this->get_DeviceType_name(this->DeviceType), this->DeviceType,
            this->Characteristics);
        return ((length < size) ? length : size - 1);
    }

public:
    void log(int level) const {
        char buffer[2048];
        this->str(buffer, sizeof(buffer));
        buffer[sizeof(buffer) - 1] = 0;
        LOG(level, "%s", buffer);
    }

    void log() const {
        LOG(LOG_INFO, "     File Fs Device Information:");
        LOG(LOG_INFO, "          * DeviceType      = 0x%08x (4 bytes): %s", this->DeviceType, this->get_DeviceType_name(this->DeviceType));
        LOG(LOG_INFO, "          * Characteristics = 0x%08x (4 bytes)", this->Characteristics);
    }
};



// 2.4.42 FileNotifyInformation

// The FILE_NOTIFY_INFORMATION structure contains the changes that the client is being notified of. The structure consists of the following:

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        NextEntryOffset                        |
// +---------------------------------------------------------------+
// |                             Action                            |
// +---------------------------------------------------------------+
// |                         FileNameLength                        |
// +---------------------------------------------------------------+
// |                       FileName (variable)                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// NextEntryOffset (4 bytes): The offset, in bytes, from the beginning of this structure to the subsequent FILE_NOTIFY_INFORMATION structure. If there are no subsequent structures, the NextEntryOffset field MUST be 0. NextEntryOffset MUST always be an integral multiple of 4. The FileName array MUST be padded to the next 4-byte boundary counted from the beginning of the structure.

// Action (4 bytes): The changes that occurred on the file. This field MUST contain one of the following values.

//  +------------------------------------+--------------------------------------------+
//  | Value                              | Meaning                                    |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_ADDED                  | The file was added to the directory.       |
//  | 0x00000001                         |                                            |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_REMOVED                | The file was removed from the              |
//  | 0x00000002                         | directory.                                 |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_MODIFIED               | The file was modified. This can be         |
//  | 0x00000003                         | a change to the data or attributes         |
//  |                                    | of the file.                               |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_RENAMED_OLD_NAME       | The file was renamed, and this is          |
//  | 0x00000004                         | the old name. If the new name              |
//  |                                    | resides within the directory being         |
//  |                                    | monitored, the client will also            |
//  |                                    | receive the                                |
//  |                                    | FILE_ACTION_RENAMED_NEW_NAME bit           |
//  |                                    | value as described in the next list        |
//  |                                    | item. If the new name resides              |
//  |                                    | outside of the directory being             |
//  |                                    | monitored, the client will not             |
//  |                                    | receive the                                |
//  |                                    | FILE_ACTION_RENAMED_NEW_NAME bit           |
//  |                                    | value.                                     |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_RENAMED_NEW_NAME       | The file was renamed, and this is the new  |
//  | 0x00000005                         | name. If the old name resides within the   |
//  |                                    | directory being monitored, the client will |
//  |                                    | also receive the                           |
//  |                                    | FILE_ACTION_RENAME_OLD_NAME bit value. If  |
//  |                                    | the old name resides outside of the        |
//  |                                    | directory being monitored, the client will |
//  |                                    | not receive the                            |
//  |                                    | FILE_ACTION_RENAME_OLD_NAME bit value.     |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_ADDED_STREAM           | The file was added to a named stream.      |
//  | 0x00000006                         |                                            |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_REMOVED_STREAM         | The file was removed from the named        |
//  | 0x00000007                         | stream.                                    |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_MODIFIED_STREAM        | The file was modified. This can be a       |
//  | 0x00000008                         | change to the data or attributes of the    |
//  |                                    | file.                                      |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_REMOVED_BY_DELETE      | An object ID was removed because the file  |
//  | 0x00000009                         | the object ID referred to was deleted.     |
//  |                                    |                                            |
//  |                                    | This notification is only sent when the    |
//  |                                    | directory being monitored is the special   |
//  |                                    | directory                                  |
//  |                                    | "\$Extend\$ObjId:$O:$INDEX_ALLOCATION".    |
//  |                                    | <125>                                      |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_ID_NOT_TUNNELLED       | An attempt to tunnel object ID information |
//  | 0x0000000A                         | to a file being created or renamed failed  |
//  |                                    | because the object ID is in use by another |
//  |                                    | file on the same volume.                   |
//  |                                    |                                            |
//  |                                    | This notification is only sent when the    |
//  |                                    | directory being monitored is the special   |
//  |                                    | directory                                  |
//  |                                    | "\$Extend\$ObjId:$O:$INDEX_ALLOCATION".    |
//  |                                    | <126>                                      |
//  +------------------------------------+--------------------------------------------+
//  | FILE_ACTION_TUNNELLED_ID_COLLISION | An attempt to tunnel object ID information |
//  | 0x0000000B                         | to a file being renamed failed because the |
//  |                                    | file already has an object ID.             |
//  |                                    |                                            |
//  |                                    | This notification is only sent when the    |
//  |                                    | directory being monitored is the special   |
//  |                                    | directory                                  |
//  |                                    | "\$Extend\$ObjId:$O:$INDEX_ALLOCATION".    |
//  |                                    | <127>                                      |
//  +------------------------------------+--------------------------------------------+

// If two or more files have been renamed, then the corresponding FILE_NOTIFY_INFORMATION entries for each file rename MUST be consecutive in this response, in order for the client to make the correct correspondence between old and new names.

// FileNameLength (4 bytes): The length, in bytes, of the file name in the FileName field.

// FileName (variable): A Unicode string with the name of the file that changed.

enum : uint32_t {

    FILE_ACTION_ADDED                  = 0x00000001,
    FILE_ACTION_REMOVED                = 0x00000002,
    FILE_ACTION_MODIFIED               = 0x00000003,
    FILE_ACTION_RENAMED_OLD_NAME       = 0x00000004,

    FILE_ACTION_RENAMED_NEW_NAME       = 0x00000005,
    FILE_ACTION_ADDED_STREAM           = 0x00000006,
    FILE_ACTION_REMOVED_STREAM         = 0x00000007,
    FILE_ACTION_MODIFIED_STREAM        = 0x00000008,
    FILE_ACTION_REMOVED_BY_DELETE      = 0x00000009,
    FILE_ACTION_ID_NOT_TUNNELLED       = 0x0000000A,
    FILE_ACTION_TUNNELLED_ID_COLLISION = 0x0000000B,
};

static inline
const char * get_Action_name(uint32_t action) {

    switch (action) {
        case FILE_ACTION_ADDED:                  return "FILE_ACTION_ADDED";
        case FILE_ACTION_REMOVED:                return "FILE_ACTION_REMOVED";
        case FILE_ACTION_MODIFIED:               return "FILE_ACTION_MODIFIED";
        case FILE_ACTION_RENAMED_OLD_NAME:       return "FILE_ACTION_RENAMED_OLD_NAME";
        case FILE_ACTION_RENAMED_NEW_NAME:       return "FILE_ACTION_RENAMED_NEW_NAME";
        case FILE_ACTION_ADDED_STREAM:           return "FILE_ACTION_ADDED_STREAM";
        case FILE_ACTION_REMOVED_STREAM:         return "FILE_ACTION_REMOVED_STREAM";
        case FILE_ACTION_MODIFIED_STREAM:        return "FILE_ACTION_MODIFIED_STREAM";
        case FILE_ACTION_REMOVED_BY_DELETE:      return "FILE_ACTION_REMOVED_BY_DELETE";
        case FILE_ACTION_ID_NOT_TUNNELLED:       return "FILE_ACTION_ID_NOT_TUNNELLED";
        case FILE_ACTION_TUNNELLED_ID_COLLISION: return "FILE_ACTION_TUNNELLED_ID_COLLISION";
    }

    return "<unknown>";
}

struct FileNotifyInformation {
    uint32_t NextEntryOffset = 0;
    uint32_t Action          = 0;
    uint32_t FileNameLength  = 0;

    uint8_t file_name_UTF16[65536] = { 0 };

    explicit FileNotifyInformation() = default;

    explicit FileNotifyInformation(uint32_t NextEntryOffset, uint32_t Action, chars_view file_name)
      : NextEntryOffset(NextEntryOffset)
      , Action(Action)
    {
        this->FileNameLength =
            ::UTF8toUTF16(file_name, this->file_name_UTF16, sizeof(this->file_name_UTF16));
    }

    void emit(OutStream & stream) const {
        stream.out_uint32_le(this->NextEntryOffset);
        stream.out_uint32_le(this->Action);
        stream.out_uint32_le(this->FileNameLength);

        stream.out_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void receive(InStream & stream) {
        // NextEntryOffset(4) + Action(4) +  FileNameLength(4)
        ::check_throw(stream, 12, "FileNotifyInformation (0)", ERR_FSCC_DATA_TRUNCATED);

        this->NextEntryOffset = stream.in_uint32_le();
        this->Action          = stream.in_uint32_le();
        this->FileNameLength  = stream.in_uint32_le();

        // FileName(variable)
        ::check_throw(stream, this->FileNameLength, "FileNotifyInformation (1)", ERR_FSCC_DATA_TRUNCATED);

        if (this->FileNameLength > sizeof(this->file_name_UTF16)) {
            LOG(LOG_ERR,
                "FileNotifyInformation: FileName too long. Length=%u",
                this->FileNameLength);
            throw Error(ERR_RDP_INTERNAL);
        }

        stream.in_copy_bytes(this->file_name_UTF16, this->FileNameLength);
    }

    void log() const {
        uint8_t file_name_UTF8[65536];
        const size_t file_name_UTF8_length = ::UTF16toUTF8(
            this->file_name_UTF16,
            this->FileNameLength,
            file_name_UTF8,
            sizeof(file_name_UTF8) - 1);
        file_name_UTF8[file_name_UTF8_length] = 0;

        LOG(LOG_INFO, "     File Notify Information:");
        LOG(LOG_INFO, "          * NextEntryOffset = 0x%08x (4 bytes)", this->NextEntryOffset);
        LOG(LOG_INFO, "          * Action          = 0x%08x (4 bytes): %s", this->Action, get_Action_name(this->Action));
        LOG(LOG_INFO, "          * FileNameLength  = %u (4 bytes)", this->FileNameLength);
        LOG(LOG_INFO, "          * FileName        = \"%s\"", file_name_UTF8);
    }
};

}   // namespace fscc
