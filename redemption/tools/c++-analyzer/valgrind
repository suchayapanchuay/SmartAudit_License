#!/bin/bash

cd "$(dirname "$0")"/../..

TEMP=`getopt -o hxqd: --long help -n "$0" -- "$@"`
(( $? != 0 )) && exit 1

eval set -- "$TEMP"

d=./bin/gcc/debug/
q=show_full_error

while true ; do
  case "$1" in
    -x) set -x ; shift 1 ;;
    -d) d="$2/" ; shift 2 ;;
    -q) q=show_resume_error ; shift 1 ;;
    -h|--help) echo "$0 [-d binary-directory] [-q] [testnames...]" ; exit 0 ;;
    --) shift ; break ;;
    *) echo "Unknow option $1" ; exit 2 ;;
  esac
done

show_resume_error ()
{
  while read f ; do
    echo "$f" >&2
    #--suppressions=./tools/valgrind-filter/valgrind-ignore-ssl-snappy
    outvalgrind=`valgrind \
        --max-stackframe=234425648 \
        --track-fds=yes \
        "$f" 2>&1 >/dev/null`
    error=`grep -E '^==[0-9]+== ERROR SUMMARY: [1-9]' -m1 <<< "$outvalgrind"` \
    && read a o <<<"$error" && echo "valgrind error: $f: $o"
    leak=`grep -E '^==[0-9]+==    definitely lost: [1-9]' -m1 <<< "$outvalgrind"` \
    && read a o <<<"$leak" && echo "valgrind leak: $f: $o"
    while read a o ; do
        echo "valgrind error: $f: $o"
    done < <(grep -E '^==[0-9]+== Open file descriptor ([3-9]:|[0-9][^:])' <<< "$outvalgrind")
  done
}

show_full_error ()
{
  local outfile="${TMPDIR:-tmp}"/valgrind_files_error.$$

  while read f ; do
    #--suppressions=./tools/valgrind-filter/valgrind-ignore-ssl-snappy
    outvalgrind=`valgrind \
        --leak-check=full \
        --max-stackframe=234425648 \
        --track-fds=yes \
        "$f" 2>&1`
    error=`grep -E '^==[0-9]+== ERROR SUMMARY' -m1 <<< "$outvalgrind"`
    read p e s n other <<< "$error"
    grep -E '^==[0-9]+== +at 0x[A-F0-9]+: ' -q <<< "$outvalgrind"
    if (( $? == 0 )) || (( $n != 0 )) ; then
        alloc=`grep -E '^==[0-9]+==   total heap usage:' -m1 <<< "$outvalgrind"`
        read p t h u n1 a n2 other <<< "$alloc"
        echo -n "$f"
        if [[ $n1 != $n2 ]] ; then
            echo -n -e "  \e[38;5;221;1m$n1 allocs, $n2 frees\e[0m"
        fi
        echo -e "  \e[38;5;221;1mfail\e[0m"
        echo "$outvalgrind"
        echo "$f (valgrind ${error#* })" >&2
        if [[ $n1 != $n2 ]] ; then
            echo "$f (leak: $n1 allocs, $n2 frees)" >&2
        fi
    else
        echo "$f  ok"
    fi
  done > "$outfile"

  echo
  cat "$outfile"
  exec rm "$outfile"
}

if [[ ! -z "$*" ]] ; then
  read -a files <<< "$@"
  ls "${files[@]/#/$d}"
else
  find "$d" -maxdepth 1 -mindepth 1 -name 'test_*' -executable
fi \
| $q
