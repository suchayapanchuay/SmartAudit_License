/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2013
   Author(s): Christophe Grosjean, Raphael Zhou
   Based on xrdp Copyright (C) Jay Sorg 2004-2010

   common slowpath layer at core module
*/


#pragma once

#include "core/error.hpp"
#include "utils/log.hpp"
#include "utils/stream.hpp"

namespace SlowPath {

// 2.2.8.1.1.3.1 Client Input Event PDU Data (TS_INPUT_PDU_DATA)
// =============================================================

// The TS_INPUT_PDU_DATA structure contains a collection of slow-path input
//  events generated by the client and intended to be processed by the server.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                         shareDataHeader                       |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |              ...              |           numEvents           |
// +-------------------------------+-------------------------------+
// |              ...              |           numEvents           |
// +-------------------------------+-------------------------------+
// |          pad2Octets           | slowPathInputEvents (variable)|
// +-------------------------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// shareDataHeader (18 bytes): Share Data Header (section 2.2.8.1.1.1.2)
//  containing information about the packet. The type subfield of the pduType
//  field of the Share Control Header (section 2.2.8.1.1.1.1) MUST be set to
//  PDUTYPE_DATAPDU (7). The pduType2 field of the Share Data Header MUST be set
//  to PDUTYPE2_INPUT (28).

// numEvents (2 bytes): A 16-bit, unsigned integer. The number of slow-path
//  input events packed together in the slowPathInputEvents field.

// pad2Octets (2 bytes): A 16-bit, unsigned integer. Padding. Values in this
//  field MUST be ignored.

// slowPathInputEvents (variable): A collection of Slow-Path Input Events
//  (section 2.2.8.1.1.3.1.1) to be processed by the server. The number of
//  events present in this array is given by the numEvents field.

    struct ClientInputEventPDU_Recv {
        uint16_t  numEvents;
        InStream payload;

        explicit ClientInputEventPDU_Recv(InStream & stream)

        : numEvents(
            [&stream](){
                if (!stream.in_check_rem(2)) {
                    LOG(LOG_ERR, "SlowPath::ClientInputEventPDU: data truncated (numEvents)");
                    throw Error(ERR_RDP_SLOWPATH);
                }

                auto numEvents = stream.in_uint16_le();
                const unsigned expected =
                      2                    // pad(2)
                    + numEvents * 12 // (time(4) + mes_type(2) + device_flags(2) + param1(2) + param2(2)) * 12
                    ;
                if (!stream.in_check_rem(expected)) {
                    LOG(LOG_ERR, "SlowPath::ClientInputEventPDU: data truncated, expected=%u remains=%zu",
                        expected, stream.in_remain());
                    throw Error(ERR_RDP_SLOWPATH);
                }

                stream.in_skip_bytes(2); // pad
                return numEvents;
            }()
        )
        // (time(4) + mes_type(2) + device_flags(2) + param1(2) + param2(2)) * 12
        , payload({stream.get_current(), this->numEvents * 12u})
        {
            // This is the constructor body, we skip payload now that it is packaged

            stream.in_skip_bytes(this->payload.get_capacity());
        }
    };

    struct ClientInputEventPDU_Send {
        ClientInputEventPDU_Send(OutStream & stream, uint16_t numEvents) {
            stream.out_uint16_le(numEvents);

            stream.out_clear_bytes(2); // pad
        }
    };

// 2.2.8.1.1.3.1.1 Slow-Path Input Event (TS_INPUT_EVENT)
// ======================================================

// The TS_INPUT_EVENT structure is used to wrap event-specific information for
//  all slow-path input events.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                            eventTime                          |
// +-------------------------------+-------------------------------+
// |          messageType          | slowPathInputData (variable)  |
// +-------------------------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// eventTime (4 bytes): A 32-bit, unsigned integer. The 32-bit time stamp for
//  the input event. This value is ignored by the server.

// messageType (2 bytes): A 16-bit, unsigned integer. The input event type.

// +-----------------------------+---------------------------------------------+
// | Value                       | Meaning                                     |
// +-----------------------------+---------------------------------------------+
// | 0x0000 INPUT_EVENT_SYNC     | Indicates a Synchronize Event (section      |
// |                             | 2.2.8.1.1.3.1.1.5).                         |
// +-----------------------------+---------------------------------------------+
// | 0x0002 INPUT_EVENT_UNUSED   | Indicates an Unused Event (section          |
// |                             | 2.2.8.1.1.3.1.1.6).                         |
// +-----------------------------+---------------------------------------------+
// | 0x0004 INPUT_EVENT_SCANCODE | Indicates a Keyboard Event (section         |
// |                             | 2.2.8.1.1.3.1.1.1).                         |
// +-----------------------------+---------------------------------------------+
// | 0x0005 INPUT_EVENT_UNICODE  | Indicates a Unicode Keyboard Event (section |
// |                             | 2.2.8.1.1.3.1.1.2).                         |
// +-----------------------------+---------------------------------------------+
// | 0x8001 INPUT_EVENT_MOUSE    | Indicates a Mouse Event (section            |
// |                             | 2.2.8.1.1.3.1.1.3).                         |
// +-----------------------------+---------------------------------------------+
// | 0x8002 INPUT_EVENT_MOUSEX   | Indicates an Extended Mouse Event (section  |
// |                             | 2.2.8.1.1.3.1.1.4).                         |
// +-----------------------------+---------------------------------------------+

    enum {
          INPUT_EVENT_SYNC     = 0x0000
        , INPUT_EVENT_UNUSED   = 0x0002
        , INPUT_EVENT_SCANCODE = 0x0004
        , INPUT_EVENT_UNICODE  = 0x0005
        , INPUT_EVENT_MOUSE    = 0x8001
        , INPUT_EVENT_MOUSEX   = 0x8002
    };

// slowPathInputData (variable): TS_KEYBOARD_EVENT, TS_UNICODE_KEYBOARD_EVENT,
//  TS_POINTER_EVENT, TS_POINTERX_EVENT, or TS_SYNC_EVENT. The actual contents
//  of the slow-path input event (see sections 2.2.8.1.1.3.1.1.1 through
//  2.2.8.1.1.3.1.1.5).

    struct InputEvent_Recv {
        uint32_t  eventTime;
        uint16_t  messageType;
        InStream payload;

        explicit InputEvent_Recv(InStream & stream)
        : eventTime([&stream](){
            // time(4) + mes_type(2) + device_flags(2) + param1(2) + param2(2)
            if (!stream.in_check_rem(12)) {
                LOG(LOG_ERR, "SlowPath::InputEvent: data truncated, expected=12 remains=%zu", stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }
            return stream.in_uint32_le();
        }())
        , messageType(stream.in_uint16_le())
         // device_flags(2) + param1(2) + param2(2)
        , payload({stream.get_current(), 6})
        // Body of constructor
        {
            stream.in_skip_bytes(this->payload.get_capacity());
        }
    };

    struct InputEvent_Send {
        InputEvent_Send(OutStream & stream, uint32_t eventTime, uint16_t messageType) {
            stream.out_uint32_le(eventTime);

            stream.out_uint16_le(messageType);
        }
    };

// 2.2.8.1.1.3.1.1.1 Keyboard Event (TS_KEYBOARD_EVENT)
// ====================================================

// The TS_KEYBOARD_EVENT structure is a standard T.128 Keyboard Event (see
//  [T128] section 8.18.2). RDP keyboard input is restricted to keyboard
//  scancodes, unlike the code-point or virtual codes supported in T.128 (a
//  scancode is an 8-bit value specifying a key location on the keyboard).
//  The server accepts a scancode value and translates it into the correct
//  character depending on the language locale and keyboard layout used in the
//  session.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |           keyboardFlags       |           keyCode             |
// +-------------------------------+-------------------------------+
// |            pad2Octets         |
// +-------------------------------+

// keyboardFlags (2 bytes): A 16-bit, unsigned integer. The flags describing the
//  keyboard event.

// +---------------------------+-----------------------------------------------+
// | Flag                      | Meaning                                       |
// +---------------------------+-----------------------------------------------+
// | 0x0100 KBDFLAGS_EXTENDED  | Indicates that the keystroke message contains |
// |                           | an extended scancode. For enhanced 101-key    |
// |                           | and 102-key keyboards, extended keys include  |
// |                           | the right ALT and right CTRL keys on the main |
// |                           | section of the keyboard; the INS, DEL, HOME,  |
// |                           | END, PAGE UP, PAGE DOWN and ARROW keys in the |
// |                           | clusters to the left of the numeric keypad;   |
// |                           | and the Divide ("/") and ENTER keys in the    |
// |                           | numeric keypad.                               |
// +---------------------------+-----------------------------------------------+
// | 0x0200 KBDFLAGS_EXTENDED1 | Used to send keyboard events triggered by the |
// |                           | PAUSE key.                                    |
// |                           |                                               |
// |                           | A PAUSE key press and release MUST be sent as |
// |                           | the following sequence of keyboard events:    |
// |                           |                                               |
// |                           | * CTRL (0x1D) DOWN                            |
// |                           |                                               |
// |                           | * NUMLOCK (0x45) DOWN                         |
// |                           |                                               |
// |                           | * CTRL (0x1D) UP                              |
// |                           |                                               |
// |                           | * NUMLOCK (0x45) UP                           |
// |                           |                                               |
// |                           | The CTRL DOWN and CTRL UP events MUST both    |
// |                           | include the KBDFLAGS_EXTENDED1 flag.          |
// +---------------------------+-----------------------------------------------+
// | 0x4000 KBDFLAGS_DOWN      | Indicates that the key was down prior to this |
// |                           | event.                                        |
// +---------------------------+-----------------------------------------------+
// | 0x8000 KBDFLAGS_RELEASE   | The absence of this flag indicates a key-down |
// |                           | event, while its presence indicates a         |
// |                           | key-release event.                            |
// +---------------------------+-----------------------------------------------+

    enum {
          KBDFLAGS_EXTENDED  = 0x0100
        , KBDFLAGS_EXTENDED1 = 0x0200
        , KBDFLAGS_DOWN      = 0x4000
        , KBDFLAGS_RELEASE   = 0x8000
    };

// keyCode (2 bytes): A 16-bit, unsigned integer. The scancode of the key which
//  triggered the event.

// pad2Octets (2 bytes): A 16-bit, unsigned integer. Padding. Values in this
//  field MUST be ignored.

    struct KeyboardEvent_Recv {
        uint16_t keyboardFlags = 0;
        uint16_t keyCode = 0;

        explicit KeyboardEvent_Recv(InStream & stream)
        {
            const unsigned expected =
                6; // keyboardFlags(2) + keyCode(2) + pad2Octets(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::KeyboardEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            this->keyboardFlags = stream.in_uint16_le();
            this->keyCode       = stream.in_uint16_le();

            stream.in_skip_bytes(2); // pad2Octets
        }
    };

    struct KeyboardEvent_Send {
        KeyboardEvent_Send(OutStream & stream, uint16_t keyboardFlags, uint16_t keyCode) {
            stream.out_uint16_le(keyboardFlags);
            stream.out_uint16_le(keyCode);

            stream.out_clear_bytes(2); // pad2Octets
        }
    };

// 2.2.8.1.1.3.1.1.2 Unicode Keyboard Event (TS_UNICODE_KEYBOARD_EVENT)
// ====================================================================

// The TS_UNICODE_KEYBOARD_EVENT structure is used to transmit a Unicode input
//  code, as opposed to a keyboard scancode. Support for the Unicode Keyboard
//  Event is advertised in the Input Capability Set (section 2.2.7.1.6).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |           keyboardFlags       |           unicodeCode         |
// +-------------------------------+-------------------------------+
// |           pad2Octets          |
// +-------------------------------+

// keyboardFlags (2 bytes): A 16-bit unsigned integer. The flags describing the
//  Unicode keyboard event.

// +-------------------------+-------------------------------------------------+
// | Flag                    | Meaning                                         |
// +-------------------------+-------------------------------------------------+
// | 0x8000 KBDFLAGS_RELEASE | The absence of this flag indicates a key-down   |
// |                         | event, whereas its presence indicates a         |
// |                         | key-release event.                              |
// +-------------------------+-------------------------------------------------+

// unicodeCode (2 bytes): A 16-bit unsigned integer. The Unicode character input
//  code.

// pad2Octets (2 bytes): A 16-bit unsigned integer. Padding. Values in this
//  field MUST be ignored.

    struct UnicodeKeyboardEvent_Recv {
        uint16_t keyboardFlags;
        uint16_t unicodeCode;

        explicit UnicodeKeyboardEvent_Recv(InStream & stream)
        : keyboardFlags(0)
        , unicodeCode(0) {
            const unsigned expected =
                6; // keyboardFlags(2) + unicodeCode(2) + pad2Octets(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::UnicodeKeyboardEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            this->keyboardFlags = stream.in_uint16_le();
            this->unicodeCode   = stream.in_uint16_le();

            stream.in_skip_bytes(2); // pad2Octets
        }
    };

    struct UnicodeKeyboardEvent_Send {
        UnicodeKeyboardEvent_Send(OutStream & stream, uint16_t keyboardFlags, uint16_t unicodeCode) {
            stream.out_uint16_le(keyboardFlags);
            stream.out_uint16_le(unicodeCode);

            stream.out_clear_bytes(2); // pad2Octets
        }
    };

// 2.2.8.1.1.3.1.1.3 Mouse Event (TS_POINTER_EVENT)
// ================================================
// The TS_POINTER_EVENT structure is a standard T.128 Keyboard Event (see [T128]
//  section 8.18.1). RDP adds flags to deal with wheel mice and extended mouse
//  buttons.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |            pointerFlags       |              xPos             |
// +-------------------------------+-------------------------------+
// |              yPos             |
// +-------------------------------+

// pointerFlags (2 bytes): A 16-bit, unsigned integer. The flags describing the
//  pointer event.

// Mouse wheel event:

// +--------------------------------+------------------------------------------+
// | Flag Meaning                   |                                          |
// +--------------------------------+------------------------------------------+
// | 0x0200 PTRFLAGS_WHEEL          | The event is a mouse wheel rotation. The |
// |                                | only valid flags in a wheel rotation     |
// |                                | event are PTRFLAGS_WHEEL_NEGATIVE and    |
// |                                | the WheelRotationMask; all other pointer |
// |                                | flags are ignored.                       |
// +--------------------------------+------------------------------------------+
// | 0x0100 PTRFLAGS_WHEEL_NEGATIVE | The wheel rotation value (contained in   |
// |                                | the WheelRotationMask bit field) is      |
// |                                | negative and MUST be sign-extended       |
// |                                | before injection at the server.          |
// +--------------------------------+------------------------------------------+
// | 0x01FF WheelRotationMask       | The bit field describing the number of   |
// |                                | rotation units the mouse wheel was       |
// |                                | rotated. The value is negative if the    |
// |                                | PTRFLAGS_WHEEL_NEGATIVE flag is set.     |
// +--------------------------------+------------------------------------------+

    enum {
          PTRFLAGS_WHEEL                = 0x0200
        , PTRFLAGS_WHEEL_NEGATIVE       = 0x0100

        , PTRFLAGS_WHEEL_ROTATION_MASK  = 0x01FF
    };

// Mouse movement event:

// +----------------------+----------------------------------------------------+
// | Flag                 | Meaning                                            |
// +----------------------+----------------------------------------------------+
// | 0x0800 PTRFLAGS_MOVE | Indicates that the mouse position MUST be updated  |
// |                      | to the location specified by the xPos and yPos     |
// |                      | fields.                                            |
// +----------------------+----------------------------------------------------+

    enum {
          PTRFLAGS_MOVE = 0x0800
    };

// Mouse button events:

// +-------------------------+-------------------------------------------------+
// | Flag                    | Meaning                                         |
// +-------------------------+-------------------------------------------------+
// | 0x8000 PTRFLAGS_DOWN    | Indicates that a click event has occurred at    |
// |                         | the position specified by the xPos and yPos     |
// |                         | fields. The button flags indicate which button  |
// |                         | has been clicked and at least one of these      |
// |                         | flags MUST be set.                              |
// +-------------------------+-------------------------------------------------+
// | 0x1000 PTRFLAGS_BUTTON1 | Mouse button 1 (left button) was clicked or     |
// |                         | released. If the PTRFLAGS_DOWN flag is set,     |
// |                         | then the button was clicked, otherwise it was   |
// |                         | released.                                       |
// +-------------------------+-------------------------------------------------+
// | 0x2000 PTRFLAGS_BUTTON2 | Mouse button 2 (right button) was clicked or    |
// |                         | released. If the PTRFLAGS_DOWN flag is set,     |
// |                         | then the button was clicked, otherwise it was   |
// |                         | released.                                       |
// +-------------------------+-------------------------------------------------+
// | 0x4000 PTRFLAGS_BUTTON3 | Mouse button 3 (middle button or wheel) was     |
// |                         | clicked or released. If the PTRFLAGS_DOWN flag  |
// |                         | is set, then the button was clicked, otherwise  |
// |                         | it was released.                                |
// +-------------------------+-------------------------------------------------+

    enum {
          PTRFLAGS_DOWN    = 0x8000
        , PTRFLAGS_BUTTON1 = 0x1000
        , PTRFLAGS_BUTTON2 = 0x2000
        , PTRFLAGS_BUTTON3 = 0x4000
    };

// xPos (2 bytes): A 16-bit, unsigned integer. The x-coordinate of the pointer
//  relative to the top-left corner of the server's desktop.

// yPos (2 bytes): A 16-bit, unsigned integer. The y-coordinate of the pointer
//  relative to the top-left corner of the server's desktop.

    struct MouseEvent_Recv {
        uint16_t pointerFlags;
        uint16_t xPos;
        uint16_t yPos;

        explicit MouseEvent_Recv(InStream & stream)
        : pointerFlags(0)
        , xPos(0)
        , yPos(0) {
            const unsigned expected =
                6; // pointerFlags(2) + xPos(2) + yPos(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::MouseEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            this->pointerFlags = stream.in_uint16_le();
            this->xPos         = stream.in_uint16_le();
            this->yPos         = stream.in_uint16_le();
        }
    };

    struct MouseEvent_Send {
        MouseEvent_Send( OutStream & stream, uint16_t pointerFlags, uint16_t xPos
                       , uint16_t yPos) {
            stream.out_uint16_le(pointerFlags);
            stream.out_uint16_le(xPos);
            stream.out_uint16_le(yPos);
        }
    };

// 2.2.8.1.1.3.1.1.4 Extended Mouse Event (TS_POINTERX_EVENT)
// ==========================================================

// The TS_POINTERX_EVENT structure has the same format as the TS_POINTER_EVENT
//  (section 2.2.8.1.1.3.1.1.3). The fields and possible field values are all
//  the same, except for the pointerFlags field. Support for the Extended Mouse
//  Event is advertised in the Input Capability Set (section 2.2.7.1.6).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |            pointerFlags       |              xPos             |
// +-------------------------------+-------------------------------+
// |              yPos             |
// +-------------------------------+

// pointerFlags (2 bytes): A 16-bit unsigned integer. The flags describing the
//  extended mouse event.

// +--------------------------+------------------------------------------------+
// | Flag                     | Meaning                                        |
// +--------------------------+------------------------------------------------+
// | 0x8000 PTRXFLAGS_DOWN    | Indicates that a click event has occurred at   |
// |                          | the position specified by the xPos and yPos    |
// |                          | fields. The button flags indicate which button |
// |                          | has been clicked and at least one of these     |
// |                          | flags MUST be set.                             |
// +--------------------------+------------------------------------------------+
// | 0x0001 PTRXFLAGS_BUTTON1 | Extended mouse button 1 (also referred to as   |
// |                          | button 4) was clicked or released. If the      |
// |                          | PTRXFLAGS_DOWN flag is set, the button was     |
// |                          | clicked; otherwise, it was released.           |
// +--------------------------+------------------------------------------------+
// | 0x0002 PTRXFLAGS_BUTTON2 | Extended mouse button 2 (also referred to as   |
// |                          | button 5) was clicked or released. If the      |
// |                          | PTRXFLAGS_DOWN flag is set, the button was     |
// |                          | clicked; otherwise, it was released.           |
// +--------------------------+------------------------------------------------+

    enum {
          PTRXFLAGS_DOWN    = 0x8000
        , PTRXFLAGS_BUTTON1 = 0x0001
        , PTRXFLAGS_BUTTON2 = 0x0002
    };

// xPos (2 bytes): A 16-bit unsigned integer. The x-coordinate of the pointer.

// yPos (2 bytes): A 16-bit unsigned integer. The y-coordinate of the pointer.

    struct ExtendedMouseEvent_Recv {
        uint16_t pointerFlags;
        uint16_t xPos;
        uint16_t yPos;

        explicit ExtendedMouseEvent_Recv(InStream & stream)
        : pointerFlags(0)
        , xPos(0)
        , yPos(0) {
            const unsigned expected =
                6; // pointerFlags(2) + xPos(2) + yPos(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::ExtendedMouseEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            this->pointerFlags = stream.in_uint16_le();
            this->xPos         = stream.in_uint16_le();
            this->yPos         = stream.in_uint16_le();
        }
    };

    struct ExtendedMouseEvent_Send {
        ExtendedMouseEvent_Send(  OutStream & stream, uint16_t pointerFlags, uint16_t xPos
                        , uint16_t yPos) {
            stream.out_uint16_le(pointerFlags);
            stream.out_uint16_le(xPos);
            stream.out_uint16_le(yPos);
        }
    };

// 2.2.8.1.1.3.1.1.5 Synchronize Event (TS_SYNC_EVENT)
// ===================================================

// The TS_SYNC_EVENT structure is a standard T.128 Input Synchronize Event (see
//  [T128] section 8.18.6). In RDP this event is used to synchronize the values
//  of the toggle keys (for example, Caps Lock) and to reset the server key
//  state to all keys up. This event is sent by the client to communicate the
//  state of the toggle keys. The synchronize event SHOULD be followed by
//  key-down events to communicate which keyboard and mouse keys are down.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |            pad2Octets         |            toggleFlags        |
// +-------------------------------+-------------------------------+
// |              ...              |
// +-------------------------------+

// pad2Octets (2 bytes): A 16-bit, unsigned integer. Padding. Values in this
//  field MUST be ignored.

// toggleFlags (4 bytes): A 32-bit, unsigned integer. Flags indicating the "on"
//  status of the keyboard toggle keys.

// +--------------------------------+------------------------------------------+
// | Flag                           | Meaning                                  |
// +--------------------------------+------------------------------------------+
// | 0x00000001 TS_SYNC_SCROLL_LOCK | Indicates that the Scroll Lock indicator |
// |                                | light SHOULD be on.                      |
// +--------------------------------+------------------------------------------+
// | 0x00000002 TS_SYNC_NUM_LOCK    | Indicates that the Num Lock indicator    |
// |                                | light SHOULD be on.                      |
// +--------------------------------+------------------------------------------+
// | 0x00000004 TS_SYNC_CAPS_LOCK   | Indicates that the Caps Lock indicator   |
// |                                | light SHOULD be on.                      |
// +--------------------------------+------------------------------------------+
// | 0x00000008 TS_SYNC_KANA_LOCK   | Indicates that the Kana Lock indicator   |
// |                                | light SHOULD be on.                      |
// +--------------------------------+------------------------------------------+

    enum {
          TS_SYNC_SCROLL_LOCK = 0x00000001
        , TS_SYNC_NUM_LOCK    = 0x00000002
        , TS_SYNC_CAPS_LOCK   = 0x00000004
        , TS_SYNC_KANA_LOCK   = 0x00000008
    };

    struct SynchronizeEvent_Recv {
        uint32_t toggleFlags;

        explicit SynchronizeEvent_Recv(InStream & stream)
        : toggleFlags(0) {
            const unsigned expected =
                6; // pad2Octets(2) + toggleFlags(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::SynchronizeEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            stream.in_skip_bytes(2); // pad2Octets

            this->toggleFlags = stream.in_uint32_le();
        }
    };

    struct SynchronizeEvent_Send {
        SynchronizeEvent_Send(OutStream & stream, uint32_t toggleFlags) {
            stream.out_clear_bytes(2); // pad2Octets

            stream.out_uint32_le(toggleFlags);
        }
    };

// 2.2.8.1.1.3.1.1.6 Unused Event (TS_UNUSED_EVENT)
// ================================================

// The TS_UNUSED_EVENT structure is sent by RDP 4.0, 5.0, 5.1, 5.2, 6.0, 6.1,
//  and 7.0 clients if the server erroneously did not indicate support for
//  scancodes in the Input Capability Set (TS_INPUT_CAPABILITYSET) (section
//  2.2.7.1.6).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                          pad4Octets                           |
// +-------------------------------+-------------------------------+
// |          pad2Octets           |
// +-------------------------------+

// pad4Octets (4 bytes): A 32-bit, unsigned integer. This field is padding, and
//  the values in this field MUST be ignored.

// pad2Octets (2 bytes): A 32-bit, unsigned integer. This field is padding, and
//  the values in this field MUST be ignored.

    struct UnusedEvent_Recv {
        explicit UnusedEvent_Recv(InStream & stream) {
            const unsigned expected =
                6; // pad4Octets(4) + pad2Octets(2)
            if (!stream.in_check_rem(expected)) {
                LOG(LOG_ERR, "SlowPath::UnusedEvent: data truncated, expected=%u remains=%zu",
                    expected, stream.in_remain());
                throw Error(ERR_RDP_SLOWPATH);
            }

            stream.in_skip_bytes(6); // pad4Octets(4) + pad2Octets(2)
        }
    };

    struct UnusedEvent_Send {
        explicit UnusedEvent_Send(OutStream & stream) {
            stream.out_clear_bytes(6); // pad4Octets(4) + pad2Octets(2)
        }
    };


// 2.2.9.1.1.3.1 Slow-Path Graphics Update (TS_GRAPHICS_UPDATE)
// ============================================================

// The TS_GRAPHICS_UPDATE structure is used to describe the type and
//  encapsulate the data for a slow-path graphics update sent from server to
//  client.<19> All slow-path graphic updates conform to this basic structure
//  (section 2.2.9.1.1.3.1.1).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |                        shareDataHeader                        |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+
// |                              ...                              |
// +-------------------------------+-------------------------------+
// |              ...              |           updateType          |
// +-------------------------------+-------------------------------+
// |                     updateData (variable)                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// shareDataHeader (18 bytes): Share Data Header (section 2.2.8.1.1.1.2)
//  containing information about the packet. The type subfield of the pduType
//  field of the Share Control Header (section 2.2.8.1.1.1.1) MUST be set to
//  PDUTYPE_DATAPDU (7). The pduType2 field of the Share Data Header MUST be
//  set to PDUTYPE2_UPDATE (2).

// updateType (2 bytes): A 16-bit, unsigned integer. Type of the graphics
//  update.

// +------------------------+--------------------------------------------------+
// | Value                  | Meaning                                          |
// +------------------------+--------------------------------------------------+
// | UPDATETYPE_ORDERS      | Indicates an Orders Update (see [MS-RDPEGDI]     |
// | 0x0000                 | section 2.2.2.2).                                |
// +------------------------+--------------------------------------------------+
// | UPDATETYPE_BITMAP      | Indicates a Bitmap Graphics Update (see section  |
// | 0x0001                 | 2.2.9.1.1.3.1.2).                                |
// +------------------------+--------------------------------------------------+
// | UPDATETYPE_PALETTE     | Indicates a Palette Update (see section          |
// | 0x0002                 | 2.2.9.1.1.3.1.1).                                |
// +------------------------+--------------------------------------------------+
// | UPDATETYPE_SYNCHRONIZE | Indicates a Synchronize Update (see section      |
// | 0x0003                 | 2.2.9.1.1.3.1.3).                                |
// +------------------------+--------------------------------------------------+

// updateData (variable): Variable-length data specific to the graphics
//  update.

struct GraphicsUpdate_Recv {
    uint16_t update_type;

    explicit GraphicsUpdate_Recv(InStream & stream)
    : update_type(stream.in_uint16_le())
    {
    }
};

// 2.2.9.1.1.3.1.1.1 Palette Update Data (TS_UPDATE_PALETTE_DATA)
// ==============================================================

// The TS_UPDATE_PALETTE_DATA encapsulates the palette data that defines a
//  Palette Update (section 2.2.9.1.1.3.1.1).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |          updateType           |           pad2Octets          |
// +-------------------------------+-------------------------------+
// |                          numberColors                         |
// +---------------------------------------------------------------+
// |                   paletteEntries (variable)                   |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// updateType (2 bytes): A 16-bit, unsigned integer. The update type. This field
//  MUST be set to UPDATETYPE_PALETTE (0x0002).

// pad2Octets (2 bytes): A 16-bit, unsigned integer. Padding. Values in this
//  field MUST be ignored.

// numberColors (4 bytes): A 32-bit, unsigned integer. The number of RGB
//  triplets in the paletteData field. This field MUST be set to 256 (the number
//  of entries in an 8 bpp palette).

// paletteEntries (variable): An array of palette entries in RGB triplet format
//  (section 2.2.9.1.1.3.1.1.2) packed on byte boundaries. The number of triplet
//  entries is given by the numberColors field.

// 2.2.9.1.1.3.1.1.2 RGB Palette Entry (TS_PALETTE_ENTRY)
// ======================================================

// The TS_PALETTE_ENTRY structure is used to express the red, green, and blue
//  components necessary to reproduce a color in the additive RGB space.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |      red      |     green     |      blue     |
// +---------------+---------------+---------------+

// red (1 byte): An 8-bit, unsigned integer. The red RGB color component.

// green (1 byte): An 8-bit, unsigned integer. The green RGB color component.

// blue (1 byte): An 8-bit, unsigned integer. The blue RGB color component.

/*
    struct PaletteUpdateData_Recv {
        uint32_t  numberColors;
        InStream payload;

        PaletteUpdateData_Recv(InStream & stream)
        : numberColors([&](){
            stream.in_skip_bytes(2); // pad2Octets
            return stream.in_uint32_le();})
        // red(1) + green(1) + blue(1)
        , payload(stream.get_current(), this->numberColors * 3)
        {
            stream.in_skip_bytes(this->payload.get_capacity());
        }
    };
*/

// 2.2.9.1.1.3.1.2.1 Bitmap Update Data (TS_UPDATE_BITMAP_DATA)
// ============================================================

// The TS_UPDATE_BITMAP_DATA structure encapsulates the bitmap data that defines
//  a Bitmap Update (section 2.2.9.1.1.3.1.2).

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |          updateType           |        numberRectangles       |
// +-------------------------------+-------------------------------+
// |                     rectangles (variable)                     |
// +---------------------------------------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// updateType (2 bytes): A 16-bit, unsigned integer. The update type. This field
//  MUST be set to UPDATETYPE_BITMAP (0x0001).

// numberRectangles (2 bytes): A 16-bit, unsigned integer. The number of screen
//  rectangles present in the rectangles field.

// rectangles (variable): Variable-length array of TS_BITMAP_DATA (section
//  2.2.9.1.1.3.1.2.2) structures, each of which contains a rectangular clipping
//  taken from the server-side screen frame buffer. The number of screen
//  clippings in the array is specified by the numberRectangles field.

// 2.2.9.1.1.3.1.2.2 Bitmap Data (TS_BITMAP_DATA)
// ==============================================

// The TS_BITMAP_DATA structure wraps the bitmap data for a screen area
//  rectangle containing a clipping taken from the server-side screen frame
//  buffer.

// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// | | | | | | | | | | |1| | | | | | | | | |2| | | | | | | | | |3| |
// |0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0|1|
// +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
// |           destLeft            |            destTop            |
// +-------------------------------+-------------------------------+
// |           destRight           |           destBottom          |
// +-------------------------------+-------------------------------+
// |             width             |             height            |
// +-------------------------------+-------------------------------+
// |         bitsPerPixel          |             flags             |
// +-------------------------------+-------------------------------+
// |         bitmapLength          |   bitmapComprHdr (optional)   |
// +-------------------------------+-------------------------------+
// |                              ...                              |
// +-------------------------------+-------------------------------+
// |              ...              |  bitmapDataStream (variable)  |
// +-------------------------------+-------------------------------+
// |                              ...                              |
// +---------------------------------------------------------------+

// destLeft (2 bytes): A 16-bit, unsigned integer. Left bound of the rectangle.

// destTop (2 bytes): A 16-bit, unsigned integer. Top bound of the rectangle.

// destRight (2 bytes): A 16-bit, unsigned integer. Inclusive right bound of the
//  rectangle.

// destBottom (2 bytes): A 16-bit, unsigned integer. Inclusive bottom bound of
//  the rectangle.

// width (2 bytes): A 16-bit, unsigned integer. The width of the rectangle.

// height (2 bytes): A 16-bit, unsigned integer. The height of the rectangle.

// bitsPerPixel (2 bytes): A 16-bit, unsigned integer. The color depth of the
//  rectangle data in bits-per-pixel.

// flags (2 bytes): A 16-bit, unsigned integer. The flags describing the format
//  of the bitmap data in the bitmapDataStream field.

// +----------------------------------+----------------------------------------+
// | Flags                            | Meaning                                |
// +----------------------------------+----------------------------------------+
// | 0x0001 BITMAP_COMPRESSION        | Indicates that the bitmap data is      |
// |                                  | compressed. The bitmapComprHdr field   |
// |                                  | MUST be present if the                 |
// |                                  | NO_BITMAP_COMPRESSION_HDR (0x0400)     |
// |                                  | flag is not set.                       |
// +----------------------------------+----------------------------------------+
// | 0x0400 NO_BITMAP_COMPRESSION_HDR | Indicates that the bitmapComprHdr      |
// |                                  | field is not present (removed for      |
// |                                  | bandwidth efficiency to save 8 bytes). |
// +----------------------------------+----------------------------------------+

// bitmapLength (2 bytes): A 16-bit, unsigned integer. The size in bytes of the
//  data in the bitmapComprHdr and bitmapDataStream fields.

// bitmapComprHdr (8 bytes): Optional Compressed Data Header structure (section
//  2.2.9.1.1.3.1.2.3) specifying the bitmap data in the bitmapDataStream. This
//  field MUST be present if the BITMAP_COMPRESSION (0x0001) flag is present in
//  the Flags field, but the NO_BITMAP_COMPRESSION_HDR (0x0400) flag is not.

// bitmapDataStream (variable): A variable-length array of bytes describing a
//  bitmap image. Bitmap data is either compressed or uncompressed, depending on
//  whether the BITMAP_COMPRESSION flag is present in the Flags field.
//  Uncompressed bitmap data is formatted as a bottom-up, left-to-right series
//  of pixels. Each pixel is a whole number of bytes. Each row contains a
//  multiple of four bytes (including up to three bytes of padding, as
//  necessary). Compressed bitmaps not in 32 bpp format are compressed using
//  Interleaved RLE and encapsulated in an RLE Compressed Bitmap Stream
//  structure (section 2.2.9.1.1.3.1.2.4), while compressed bitmaps at a color
//  depth of 32 bpp are compressed using RDP 6.0 Bitmap Compression and stored
//  inside an RDP 6.0 Bitmap Compressed Stream structure ([MS-RDPEGDI] section
//  2.2.2.5.1).

/*
    struct BitmapUpdateData_Recv {
        uint16_t numberRectangles;

        BitmapUpdateData_Recv(InStream & stream)
        : numberRectangles(0) {
            this->numberRectangles = stream.in_uint16_le();
        }
    };
*/

} // namespace SlowPath

