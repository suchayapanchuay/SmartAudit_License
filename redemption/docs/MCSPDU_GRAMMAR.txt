Excerpt from T.125 Multipoint Communication Protocol Specification
==================================================================


-- 9 Encoding of MCSPDUs
-- =====================
-- Each MCSPDU is transported as one TSDU across a TC belonging to an MCS connection. 
-- Connect MCSPDUs are unlimited in size. Domain MCSPDUs are limited in size by a parameter of the MCS domain.

-- A standard ASN.1 data value encoding is used to transfer MCSPDUs between peer MCS providers.
-- Encoding rules are selected as part of protocol version negotiation. This negotiation involves 
-- the exchange of a Connect-Initial and a Connect-Response MCSPDU over the initial TC. Three 
-- versions of this protocol are defined:

-- – Version 1 – All MCSPDUs are described in clause 7 and use the Basic Encoding Rules of Recommendation X.690.
-- – Version 2 – All MCSPDUs are described in clause 7. This version uses Basic Encoding Rules for connect 
--   MCSPDUs and the Packed Encoding Rules of Recommendation X.691 for all subsequent domain MCSPDUs. 
--   Specifically, the ALIGNED variant of BASIC-PER shall be applied to the ASN.1 type DomainMCSPDU. 
--   The bit string produced shall be conveyed as an integral number of octets. The leading bit of this
--   string shall coincide with the most significant bit of the first octet.

-- – Version 3 – Connect MCSPDUs are described in clause 7 and use Basic Encoding Rules for
--     backward compatibility with Version 2. Extended Parameters and Domain MCSPDUs are
--    described in clause 8 and use Packed Encoding Rules as specified for Version 2, above.
--   Version 3 enabled nodes must be able to translate version 3 protocol into version 2 protocol
--  for transmission over a connection to a node which has specified version 2 protocol in the
-- domain parameters. This translation is described in 13.11.

-- NOTE 1 – The Packed Encoding Rules yield more compact MCSPDU headers.
-- NOTE 2 – Both BER and PER are self-delimiting, in the sense that they contain enough information to locate
-- the end of each encoded MCSPDU. It might be argued that this makes the use of TSDUs unnecessary and
-- that this protocol could be implemented over non-standard transport services that convey octet streams
-- without preserving TSDU boundaries. However, such an approach is more vulnerable to implementation
-- errors. If the boundary between MCSPDUs were ever lost, recovery would be difficult.

-- *********************************************************************************************************************
-- 7 Structure of Version 2 MCSPDUs
-- ================================

-- The structure of version 2 MCSPDUs is specified using the notation ASN.1 of Recommendation
-- X.208. The use and significance of these MCSPDUs is further described in clauses 9 and 10.


MCS-PROTOCOL DEFINITIONS ::=

BEGIN

-- Part 1: Fundamental MCS types

ChannelId ::= INTEGER (0..65535) -- range is 16 bits

StaticChannelId ::= ChannelId (1..1000) -- those known permanently

DynamicChannelId ::= ChannelId (1001..65535) -- those created and deleted

UserId ::= DynamicChannelId -- created by Attach-User
                            -- deleted by Detach-User

PrivateChannelId ::= DynamicChannelId -- created by Channel-Convene
                                     -- deleted by Channel-Disband

AssignedChannelId ::= DynamicChannelId -- created by Channel-Join zero
                                      -- deleted by last Channel-Leave

TokenId ::= INTEGER (1..65535) -- all are known permanently

TokenStatus ::= ENUMERATED 
{ 
    notInUse        (0),
    selfGrabbed     (1),
    otherGrabbed    (2),
    selfInhibited   (3),
    otherInhibited  (4),
    selfRecipient   (5),
    selfGiving      (6),
    otherGiving     (7)
}

DataPriority ::= ENUMERATED
{
    top         (0),
    high        (1),
    medium      (2),
    low         (3)
}


Segmentation ::= BIT STRING
{
    begin       (0),
    end         (1)
} (SIZE (2))


DomainParameters ::= SEQUENCE
{
    maxChannelIds   INTEGER (0..MAX),
                    -- a limit on channel ids in use,
                    -- static + user id + private + assigned

    maxUserIds      INTEGER (0..MAX),
                    -- a sublimit on user id channels alone
    maxTokenIds     INTEGER (0..MAX),
                    -- a limit on token ids in use
                    -- grabbed + inhibited + giving + ungivable + given
    numPriorities   INTEGER (0..MAX),
                    -- the number of TCs in an MCS connection
    minThroughput   INTEGER (0..MAX),
                    -- the enforced number of octets per second
    maxHeight       INTEGER (0..MAX),
                    -- a limit on the height of a provider
    maxMCSPDUsize   INTEGER (0..MAX),
                    -- an octet limit on domain MCSPDUs
    protocolVersion INTEGER (0..MAX)
}

-- Part 2: Connect provider

Connect-Initial ::= [APPLICATION 101] IMPLICIT SEQUENCE
{
    callingDomainSelector   OCTET STRING,
    calledDomainSelector    OCTET STRING,
    upwardFlag              BOOLEAN,
                            -- TRUE if called provider is higher
    targetParameters        DomainParameters,
    minimumParameters       DomainParameters,
    maximumParameters       DomainParameters,
    userData                OCTET STRING
}

Connect-Response ::= [APPLICATION 102] IMPLICIT SEQUENCE
{
    result              Result,
    calledConnectId     INTEGER (0..MAX),
                        -- assigned by the called provider
                        -- to identify additional TCs of
                        -- the same MCS connection
    domainParameters    DomainParameters,
    userData            OCTET STRING
}

Connect-Additional ::= [APPLICATION 103] IMPLICIT SEQUENCE
{
    calledConnectId INTEGER (0..MAX),
    dataPriority    DataPriority
}

Connect-Result ::= [APPLICATION 104] IMPLICIT SEQUENCE
{
    result          Result
}

-- Part 3: Merge domain

PlumbDomainIndication ::= [APPLICATION 0] IMPLICIT SEQUENCE
{
    heightLimit     INTEGER (0..MAX)
                    -- a restriction on the MCSPDU receiver
}

ErectDomainRequest ::= [APPLICATION 1] IMPLICIT SEQUENCE
{
    subHeight   INTEGER (0..MAX),
                -- height in domain of the MCSPDU transmitter
    subInterval INTEGER (0..MAX)
                -- its throughput enforcement interval in milliseconds
}

ChannelAttributes ::= CHOICE
{
    static [0] IMPLICIT SEQUENCE
    {
        channelId   StaticChannelId
                    -- joined is implicitly TRUE
    },

    userId  [1] IMPLICIT SEQUENCE
    {
        joined      BOOLEAN,
                    -- TRUE if user is joined to its user id
        userId      UserId
    },

    private [2] IMPLICIT SEQUENCE
    {
        joined      BOOLEAN,
                    -- TRUE if channel id is joined below
        channelId   PrivateChannelId,
        manager     UserId,
        admitted    SET OF UserId
                    -- may span multiple MergeChannelsRequest
    },

    assigned [3] IMPLICIT SEQUENCE
    {
        channelId   AssignedChannelId
                    -- joined is implicitly TRUE
    }
}

MergeChannelsRequest ::= [APPLICATION 2] IMPLICIT SEQUENCE
{
    mergeChannels   SET OF ChannelAttributes,
    purgeChannelIds SET OF ChannelId
}

MergeChannelsConfirm ::= [APPLICATION 3] IMPLICIT SEQUENCE
{
    mergeChannels   SET OF ChannelAttributes,
    purgeChannelIds SET OF ChannelId
}

PurgeChannelsIndication ::= [APPLICATION 4] IMPLICIT SEQUENCE
{
    detachUserIds       SET OF UserId,
                        -- purge user id channels
    purgeChannelIds     SET OF ChannelId
                        -- purge other channels
}

TokenAttributes ::= CHOICE
{
    grabbed [0] IMPLICIT SEQUENCE
    {
        tokenId     TokenId,
        grabber     UserId
    },

    inhibited [1] IMPLICIT SEQUENCE
    {
        tokenId     TokenId,
        inhibitors  SET OF UserId
                    -- may span multiple MergeTokensRequest
    },

    giving [2] IMPLICIT SEQUENCE
    {
        tokenId     TokenId,
        grabber     UserId,
        recipient   UserId
    },

    ungivable [3] IMPLICIT SEQUENCE
    {
        tokenId     TokenId,
        grabber     UserId
                    -- recipient has since detached
    },

    given [4] IMPLICIT SEQUENCE
    {
        tokenId         TokenId,
        recipient       UserId
                        -- grabber released or detached
    }
}

MergeTokensRequest ::= [APPLICATION 5] IMPLICIT SEQUENCE
{
    mergeTokens     SET OF TokenAttributes,
    purgeTokenIds   SET OF TokenId
}
MergeTokensConfirm ::= [APPLICATION 6] IMPLICIT SEQUENCE
{
    mergeTokens     SET OF TokenAttributes,
    purgeTokenIds   SET OF TokenId
}

PurgeTokensIndication ::= [APPLICATION 7] IMPLICIT SEQUENCE
{
    purgeTokenIds   SET OF TokenId
}

-- Part 4: Disconnect provider

DisconnectProviderUltimatum ::= [APPLICATION 8] IMPLICIT SEQUENCE
{
    reason          Reason
}

RejectMCSPDUUltimatum ::= [APPLICATION 9] IMPLICIT SEQUENCE
{
    diagnostic      Diagnostic,
    initialOctets   OCTET STRING
}

-- Part 5: Attach/Detach user

AttachUserRequest ::= [APPLICATION 10] IMPLICIT SEQUENCE
{
}

AttachUserConfirm ::= [APPLICATION 11] IMPLICIT SEQUENCE
{
    result          Result,
    initiator       UserId OPTIONAL
}

DetachUserRequest ::= [APPLICATION 12] IMPLICIT SEQUENCE
{
    reason          Reason,
    userIds         SET OF UserId
}
DetachUserIndication ::= [APPLICATION 13] IMPLICIT SEQUENCE
{
    reason          Reason,
    userIds         SET OF UserId
}
-- Part 6: Channel management

ChannelJoinRequest ::= [APPLICATION 14] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       ChannelId
                    -- may be zero
}

ChannelJoinConfirm ::= [APPLICATION 15] IMPLICIT SEQUENCE
{
    result          Result,
    initiator       UserId,
    requested       ChannelId,
                    -- may be zero
    channelId       ChannelId OPTIONAL
}

ChannelLeaveRequest ::= [APPLICATION 16] IMPLICIT SEQUENCE
{
    channelIds      SET OF ChannelId
}

ChannelConveneRequest ::= [APPLICATION 17] IMPLICIT SEQUENCE
{
    initiator       UserId
}

ChannelConveneConfirm ::= [APPLICATION 18] IMPLICIT SEQUENCE
{
    result          Result,
    initiator       UserId,
    channelId       PrivateChannelId OPTIONAL
}

ChannelDisbandRequest ::= [APPLICATION 19] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       PrivateChannelId
}

ChannelDisbandIndication ::= [APPLICATION 20] IMPLICIT SEQUENCE
{
    channelId       PrivateChannelId
}

ChannelAdmitRequest ::= [APPLICATION 21] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       PrivateChannelId,
    userIds         SET OF UserId
}

ChannelAdmitIndication ::= [APPLICATION 22] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       PrivateChannelId,
    userIds         SET OF UserId
}

ChannelExpelRequest ::= [APPLICATION 23] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       PrivateChannelId,
    userIds         SET OF UserId
}

ChannelExpelIndication ::= [APPLICATION 24] IMPLICIT SEQUENCE
{
    channelId       PrivateChannelId,
    userIds         SET OF UserId
}

-- Part 7: Data transfer

SendDataRequest ::= [APPLICATION 25] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       ChannelId,
    dataPriority    DataPriority,
    segmentation    Segmentation,
    userData        OCTET STRING
}

SendDataIndication ::= [APPLICATION 26] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       ChannelId,
    dataPriority    DataPriority,
    segmentation    Segmentation,
    userData        OCTET STRING
}

UniformSendDataRequest ::= [APPLICATION 27] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       ChannelId,
    dataPriority    DataPriority,
    segmentation    Segmentation,
    userData        OCTET STRING
}

UniformSendDataIndication ::= [APPLICATION 28] IMPLICIT SEQUENCE
{
    initiator       UserId,
    channelId       ChannelId,
    dataPriority    DataPriority,
    segmentation    Segmentation,
    userData        OCTET STRING
}

-- Part 8: Token management

TokenGrabRequest ::= [APPLICATION 29] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId
}

TokenGrabConfirm ::= [APPLICATION 30] IMPLICIT SEQUENCE
{
    result      Result,
    initiator   UserId,
    tokenId     TokenId,
    tokenStatus TokenStatus
}

TokenInhibitRequest ::= [APPLICATION 31] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId
}

TokenInhibitConfirm ::= [APPLICATION 32] IMPLICIT SEQUENCE
{
    result      Result,
    initiator   UserId,
    tokenId     TokenId,
    tokenStatus TokenStatus
}

TokenGiveRequest ::= [APPLICATION 33] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId,
    recipient   UserId
}

TokenGiveIndication ::= [APPLICATION 34] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId,
    recipient   UserId
}

TokenGiveResponse ::= [APPLICATION 35] IMPLICIT SEQUENCE
{
    result      Result,
    recipient   UserId,
    tokenId     TokenId
}

TokenGiveConfirm ::= [APPLICATION 36] IMPLICIT SEQUENCE
{
    result       Result,
    initiator    UserId,
    tokenId      TokenId,
    tokenStatus  TokenStatus
}

TokenPleaseRequest ::= [APPLICATION 37] IMPLICIT SEQUENCE
{
    initiator    UserId,
    tokenId      TokenId
}

TokenPleaseIndication ::= [APPLICATION 38] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId
}

TokenReleaseRequest ::= [APPLICATION 39] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId
}

TokenReleaseConfirm ::= [APPLICATION 40] IMPLICIT SEQUENCE
{
    result      Result,
    initiator   UserId,
    tokenId     TokenId,
    tokenStatus TokenStatus
}

TokenTestRequest ::= [APPLICATION 41] IMPLICIT SEQUENCE
{
    initiator   UserId,
    tokenId     TokenId
}

TokenTestConfirm ::= [APPLICATION 42] IMPLICIT SEQUENCE
{
    initiator    UserId,
    tokenId      TokenId,
    tokenStatus  TokenStatus
}

-- Part 9: Status codes

Reason ::= ENUMERATED   -- in DisconnectProviderUltimatum, DetachUserRequest, DetachUserIndication
{
    rn-domain-disconnected  (0),
    rn-provider-initiated   (1),
    rn-token-purged         (2),
    rn-user-requested       (3),
    rn-channel-purged       (4)
}

Result ::= ENUMERATED   -- in Connect, response, confirm
{
    rt-successful               (0),
    rt-domain-merging           (1),
    rt-domain-not-hierarchical  (2),
    rt-no-such-channel          (3),
    rt-no-such-domain           (4),
    rt-no-such-user             (5),
    rt-not-admitted             (6),
    rt-other-user-id            (7),
    rt-parameters-unacceptable  (8),
    rt-token-not-available      (9),
    rt-token-not-possessed      (10),
    rt-too-many-channels        (11),
    rt-too-many-tokens          (12),
    rt-too-many-users           (13),
    rt-unspecified-failure      (14),
    rt-user-rejected            (15)
}

Diagnostic ::= ENUMERATED -- in RejectMCSPDUUltimatum
{
    dc-inconsistent-merge           (0),
    dc-forbidden-PDU-downward       (1),
    dc-forbidden-PDU-upward         (2),
    dc-invalid-BER-encoding         (3),
    dc-invalid-PER-encoding         (4),
    dc-misrouted-user               (5),
    dc-unrequested-confirm          (6),
    dc-wrong-transport-priority     (7),
    dc-channel-id-conflict          (8),
    dc-token-id-conflict            (9),
    dc-not-user-id-channel          (10),
    dc-too-many-channels            (11),
    dc-too-many-tokens              (12),
    dc-too-many-users               (13)
}

-- Part 10: MCSPDU repertoire

ConnectMCSPDU ::= CHOICE
{
    connect-initial     Connect-Initial,
    connect-response    Connect-Response,
    connect-additional  Connect-Additional,
    connect-result      Connect-Result
}

DomainMCSPDU ::= CHOICE
{
    plumbDomainIndication       PlumbDomainIndication,
    erectDomainRequest          ErectDomainRequest,
    mergeChannelsRequest        MergeChannelsRequest,
    mergeChannelsConfirm        MergeChannelsConfirm,
    purgeChannelsIndication     PurgeChannelsIndication,
    mergeTokensRequest          MergeTokensRequest,
    mergeTokensConfirm          MergeTokensConfirm,
    purgeTokensIndication       PurgeTokensIndication,
    disconnectProviderUltimatum DisconnectProviderUltimatum,
    rejectMCSPDUUltimatum       RejectMCSPDUUltimatum,
    attachUserRequest           AttachUserRequest,
    attachUserConfirm           AttachUserConfirm,
    detachUserRequest           DetachUserRequest,
    detachUserIndication        DetachUserIndication,
    channelJoinRequest          ChannelJoinRequest,
    channelJoinConfirm          ChannelJoinConfirm,
    channelLeaveRequest         ChannelLeaveRequest,
    channelConveneRequest       ChannelConveneRequest,
    channelConveneConfirm       ChannelConveneConfirm,
    channelDisbandRequest       ChannelDisbandRequest,
    channelDisbandIndication    ChannelDisbandIndication,
    channelAdmitRequest         ChannelAdmitRequest,
    channelAdmitIndication      ChannelAdmitIndication,
    channelExpelRequest         ChannelExpelRequest,
    channelExpelIndication      ChannelExpelIndication,
    sendDataRequest             SendDataRequest,
    sendDataIndication          SendDataIndication,
    uniformSendDataRequest      UniformSendDataRequest,
    uniformSendDataIndication   UniformSendDataIndication,
    tokenGrabRequest            TokenGrabRequest,
    tokenGrabConfirm            TokenGrabConfirm,
    tokenInhibitRequest         TokenInhibitRequest,
    tokenInhibitConfirm         TokenInhibitConfirm,
    tokenGiveRequest            TokenGiveRequest,
    tokenGiveIndication         TokenGiveIndication,
    tokenGiveResponse           TokenGiveResponse,
    tokenGiveConfirm            TokenGiveConfirm,
    tokenPleaseRequest          TokenPleaseRequest,
    tokenPleaseIndication       TokenPleaseIndication,
    tokenReleaseRequest         TokenReleaseRequest,
    tokenReleaseConfirm         TokenReleaseConfirm,
    tokenTestRequest            TokenTestRequest,
    tokenTestConfirm            TokenTestConfirm
}
END

-- *********************************************************************************************************************

-- 8 Structure of Version 3 MCSPDUs
-- =================================

-- The structure of version 3 MCSPDUs is specified using the notation ASN.1 of Recommendation
-- X.208. The use and significance of these MCSPDUs is further described in clauses 9 and 10.

MCS-PROTOCOL-3 DEFINITIONS AUTOMATIC TAGS::=
BEGIN

-- Part 1: Fundamental MCS types

H221NonStandardIdentifier ::= OCTET STRING (SIZE (4..255))
                          -- First four octets shall be country
                          -- code and Manufacturer code, assigned
                          -- as specified in Annex A/H.221 for
                          -- NS-cap and NS-comm
Key ::= CHOICE
{
    object                OBJECT IDENTIFIER,
    h221NonStandard       H221NonStandardIdentifier
}

-- Identifier of a standard or non-standard object

NonStandardParameter ::= SEQUENCE
{
    key Key,
    data OCTET STRING
}

ChannelId ::= INTEGER (0..65535)             -- range is 16 bits

StaticChannelId ::= ChannelId (1..1000)      -- those known permanently

DynamicChannelId ::= ChannelId (1001..65535) -- those created and deleted

UserId ::= DynamicChannelId                  -- created by Attach-User
                                             -- deleted by Detach-User

PrivateChannelId ::= DynamicChannelId        -- created by Channel-Convene
                                             -- deleted by Channel-Disband

AssignedChannelId ::= DynamicChannelId       -- created by Channel-Join zero
                                             -- deleted by last Channel-Leave

TokenId ::= INTEGER (1..65535)               -- all are known permanently

TokenStatus ::= CHOICE
{
    notInUse       NULL,
    selfGrabbed    NULL,
    otherGrabbed   NULL,
    selfInhibited  NULL,
    otherInhibited NULL, 
    selfRecipient  NULL,
    selfGiving     NULL,
    otherGiving    NULL,
    ...
}

DataPriority ::= CHOICE
{
    top     NULL,
    high    NULL,
    medium  NULL,
    low     NULL,
    ...
}

Segmentation ::= BIT STRING
{
    begin (0),
    end   (1)
} (SIZE (2))

-- Part 2: Extended parameter

ExtendedParameters ::= SEQUENCE
{
    unreliableDataSupported BOOLEAN,
    domainReferenceID       INTEGER (0 .. 65535),
    nonStandard             SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ExtendedParameterPropose ::= SEQUENCE
{
    targetExtendedParameters    ExtendedParameters,
    minimumExtendedParameters   ExtendedParameters,
    maximumExtendedParameters   ExtendedParameters,
    nonStandard                 SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ExtendedParameterAccept ::= SEQUENCE
{
    extendedParameters          ExtendedParameters,
    nonStandard                 SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 3: Merge domain

PlumbDomainIndication ::= SEQUENCE
{
    heightLimit     INTEGER (0..MAX),
                    -- a restriction on the MCSPDU receiver
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ErectDomainRequest ::= SEQUENCE
{
    subHeight       INTEGER (0..MAX),
                    -- height in domain of the MCSPDU transmitter
    subInterval     INTEGER (0..MAX),
                    -- its throughput enforcement interval in milliseconds
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelAttributes ::= CHOICE
{
    static  SEQUENCE
    {
        channelId   StaticChannelId,
                    -- joined is implicitly TRUE
        nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    userId      SEQUENCE
    {
        joined      BOOLEAN,
                    -- TRUE if user is joined to its user id
        userId      UserId,
        nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    private     SEQUENCE
    {
        joined      BOOLEAN,
                    -- TRUE if channel id is joined below
        channelId   PrivateChannelId,
        manager     UserId,
        admitted    SET OF UserId,
                    -- may span multiple MergeChannelsRequest
        nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    assigned    SEQUENCE
    {
        channelId   AssignedChannelId,
                    -- joined is implicitly TRUE
        nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },
    
    ...
}

MergeChannelsRequest ::= SEQUENCE
{
    mergeChannels   SET OF ChannelAttributes,
    purgeChannelIds SET OF ChannelId,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

MergeChannelsConfirm ::= SEQUENCE
{
    mergeChannels   SET OF ChannelAttributes,
    purgeChannelIds SET OF ChannelId,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

PurgeChannelsIndication ::= SEQUENCE
{
    detachChannelIds    SET OF ChannelId,
                        -- purge user id channels
    purgeChannelIds     SET OF ChannelId,
                        -- purge other channels
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenAttributes ::= CHOICE
{
    grabbed     SEQUENCE
    {
        tokenId         TokenId,
        grabber         UserId,
        nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    inhibited   SEQUENCE
    {
        tokenId         TokenId,
        inhibitors      SET OF UserId,
                        -- may span multiple MergeTokensRequest
        nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    giving      SEQUENCE
    {
        tokenId         TokenId,
        grabber         UserId,
        recipient       UserId,
        nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    ungivable   SEQUENCE
    {
        tokenId         TokenId,
        grabber         UserId,
                        -- recipient has since detached
        nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },

    given      SEQUENCE
    {
        tokenId         TokenId,
        recipient       UserId,
                        -- grabber released or detached
        nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
        ...
    },
    
    ...
}

MergeTokensRequest ::= SEQUENCE
{
    mergeTokens         SET OF TokenAttributes,
    purgeTokenIds       SET OF TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

MergeTokensConfirm ::= SEQUENCE
{
    mergeTokens         SET OF TokenAttributes,
    purgeTokenIds       SET OF TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

PurgeTokensIndication ::= SEQUENCE
{
    purgeTokenIds   SET OF TokenId,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 4: Disconnect provider

DisconnectProviderUltimatum ::= SEQUENCE
{
    reason          Reason,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
}

RejectMCSPDUUltimatum ::= SEQUENCE
{
    diagnostic      Diagnostic,
    initialOctets   OCTET STRING,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 5: Attach/Detach user

AttachUserRequest ::= SEQUENCE
{ 
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
} 

AttachUserConfirm ::= SEQUENCE
{ 
    result      Result,
    initiator   UserId OPTIONAL,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
} 

DetachUserRequest ::= SEQUENCE
{
    reason      Reason,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}


DetachUserIndication ::= SEQUENCE
{
    reason      Reason,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 6: Channel management

ChannelJoinRequest ::= SEQUENCE
{
    initiator   UserId,
    channelId   ChannelId,
                -- may be zero
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelJoinConfirm ::= SEQUENCE
{
    result      Result,
    initiator   UserId,
    requested   ChannelId,
                -- may be zero
    channelId   ChannelId OPTIONAL,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelLeaveRequest ::= SEQUENCE
{
    channelIds  SET OF ChannelId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}
ChannelConveneRequest ::= SEQUENCE
{
    initiator   UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelConveneConfirm ::= SEQUENCE
{
    result      Result,
    initiator   UserId,
    channelId   PrivateChannelId OPTIONAL,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelDisbandRequest ::= SEQUENCE
{
    initiator   UserId,
    channelId   PrivateChannelId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelDisbandIndication ::= SEQUENCE
{
    channelId   PrivateChannelId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelAdmitRequest ::= SEQUENCE
{
    initiator   UserId,
    channelId   PrivateChannelId,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelAdmitIndication ::= SEQUENCE
{
    initiator   UserId,
    channelId   PrivateChannelId,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelExpelRequest ::= SEQUENCE
{
    initiator   UserId,
    channelId   PrivateChannelId,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

ChannelExpelIndication ::= SEQUENCE
{
    channelId   PrivateChannelId,
    userIds     SET OF UserId,
    nonStandard SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}
-- Part 7: Data transfer

SendDataRequest ::= SEQUENCE
{
    initiator           UserId,
    channelId           ChannelId,
    reliability         BOOLEAN,
    domainReferenceID   INTEGER (0 .. 65535) OPTIONAL,
    dataPriority        DataPriority,
    segmentation        Segmentation,
    userData            OCTET STRING,
    totalDataSize       INTEGER OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

SendDataIndication ::= SEQUENCE
{
    initiator           UserId,
    channelId           ChannelId,
    reliability         BOOLEAN,
    domainReferenceID   INTEGER (0 .. 65535) OPTIONAL,
    dataPriority        DataPriority,
    segmentation        Segmentation,
    userData            OCTET STRING,
    totalDataSize       INTEGER OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

UniformSendDataRequest ::= SEQUENCE
{
    initiator           UserId,
    channelId           ChannelId,
    reliability         BOOLEAN,
    domainReferenceID   INTEGER (0 .. 65535) OPTIONAL,
    dataPriority        DataPriority,
    segmentation        Segmentation,
    userData            OCTET STRING,
    totalDataSize       INTEGER OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

UniformSendDataIndication ::= SEQUENCE
{
    initiator           UserId,
    channelId           ChannelId,
    reliability         BOOLEAN,
    domainReferenceID   INTEGER (0 .. 65535) OPTIONAL,
    dataPriority        DataPriority,
    segmentation        Segmentation,
    userData            OCTET STRING,
    totalDataSize       INTEGER OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 8: Token management

TokenGrabRequest ::= SEQUENCE
{
    initiator           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenGrabConfirm ::= SEQUENCE
{
    result              Result,
    initiator           UserId,
    tokenId             TokenId,
    tokenStatus         TokenStatus,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenInhibitRequest ::= SEQUENCE
{
    initiator           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenInhibitConfirm ::= SEQUENCE 
{ 
    result              Result,
    initiator           UserId,
    tokenId             TokenId,
    tokenStatus         TokenStatus,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
} 

TokenGiveRequest ::= SEQUENCE 
{ 
    initiator           UserId,
    tokenId             TokenId,
    recipient           UserId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
}
 
TokenGiveIndication ::= SEQUENCE
{ 
    initiator           UserId,
    tokenId             TokenId,
    recipient           UserId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
} 

TokenGiveResponse ::= SEQUENCE
{
    result              Result,
    recipient           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ... 
} 

TokenGiveConfirm ::= SEQUENCE 
{ 
    result              Result,
    initiator           UserId,
    tokenId             TokenId,
    tokenStatus         TokenStatus,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenPleaseRequest ::= SEQUENCE
{
    initiator           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}


TokenPleaseIndication ::= SEQUENCE
{
    initiator           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenReleaseRequest ::= SEQUENCE
{
    initiator           UserId,
    tokenId             TokenId,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenReleaseConfirm ::= SEQUENCE
{
    result              Result,
    initiator           UserId,
    tokenId             TokenId,
    tokenStatus         TokenStatus,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenTestRequest ::= SEQUENCE
{
    initiator       UserId,
    tokenId         TokenId,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

TokenTestConfirm ::= SEQUENCE
{
    initiator       UserId,
    tokenId         TokenId,
    tokenStatus     TokenStatus,
    nonStandard     SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 9: Capabilities notification

CapabilityID ::= CHOICE
{
    standardID      INTEGER (0 .. 65535),
    nonstandardID   Key
}

CapabilityClass ::= CHOICE
{
    null            NULL,
    unsignedMin     INTEGER (0 .. MAX),
    unsignedMax     INTEGER (0 .. MAX)
}

ParticipationIndicator ::= CHOICE
{
    global          NULL,
    partial         INTEGER (1 .. 2)
}

RequestCapability ::= SEQUENCE
{
    capabilityID                CapabilityID,
    capabilityClass             CapabilityClass,
    participationIndicator      ParticipationIndicator,
    nonStandard                 SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

SeqOfRequestCapabilities ::= SEQUENCE OF RequestCapability

IndicationCapability ::= SEQUENCE
{
    capabilityID                CapabilityID,
    capabilityClass             CapabilityClass,
    summitProviderSupported     BOOLEAN,
    intermediateNodeSupported   BOOLEAN,
    nonStandard                 SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

SeqOfIndicationCapabilities ::= SEQUENCE OF IndicationCapability

CapabilitiesNotificationRequest ::= SEQUENCE
{
    v2NodePresent       BOOLEAN,
    addList             SeqOfRequestCapabilities OPTIONAL,
    removeList          SeqOfRequestCapabilities OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

CapabilitiesNotificationIndication ::= SEQUENCE
{
    v2NodePresent       BOOLEAN,
    addList             SeqOfIndicationCapabilities OPTIONAL,
    removeList          SeqOfIndicationCapabilities OPTIONAL,
    nonStandard         SEQUENCE OF NonStandardParameter OPTIONAL,
    ...
}

-- Part 10: Status codes

Reason ::= CHOICE
        -- in DisconnectProviderUltimatum, DetachUserRequest, DetachUserIndication
{
    rn-domain-disconnected  NULL,
    rn-provider-initiated   NULL,
    rn-token-purged         NULL,
    rn-user-requested       NULL,
    rn-channel-purged       NULL,
    ...
}

Result ::= CHOICE
        -- in Connect, response, confirm
{
    rt-successful               NULL,
    rt-domain-merging           NULL,
    rt-domain-not-hierarchical  NULL,
    rt-no-such-channel          NULL,
    rt-no-such-domain           NULL,
    rt-no-such-user             NULL,
    rt-not-admitted             NULL,
    rt-other-user-id            NULL,
    rt-parameters-unacceptable  NULL,
    rt-token-not-available      NULL,
    rt-token-not-possessed      NULL,
    rt-too-many-channels        NULL,
    rt-too-many-tokens          NULL,
    rt-too-many-users           NULL,
    rt-unspecified-failure      NULL,
    rt-user-rejected            NULL,
    ...
}

Diagnostic ::= CHOICE -- in RejectMCSPDUUltimatum
{
    dc-inconsistent-merge       NULL,
    dc-forbidden-PDU-downward   NULL,
    dc-forbidden-PDU-upward     NULL,
    dc-invalid-BER-encoding     NULL,
    dc-invalid-PER-encoding     NULL,
    dc-misrouted-user           NULL,
    dc-unrequested-confirm      NULL,
    dc-wrong-transport-priority NULL,
    dc-channel-id-conflict      NULL,
    dc-token-id-conflict        NULL,
    dc-not-user-id-channel      NULL,
    dc-too-many-channels        NULL,
    dc-too-many-tokens          NULL,
    dc-too-many-users           NULL,
    ...
}

-- Part 11: MCSPDU repertoire

NonStandardPDU ::= SEQUENCE
{
    data    NonStandardParameter,
    ...
}

ExtendedParameterMCSPDU ::= CHOICE
{
    extendedParameterPropose
    ExtendedParameterPropose,
    extendedParameterAccept ExtendedParameterAccept,
    nonStandard
    NonStandardPDU,
    ...
}

DomainMCSPDU ::= CHOICE
{
    plumbDomainIndication           PlumbDomainIndication,
    erectDomainRequest              ErectDomainRequest,
    mergeChannelsRequest            MergeChannelsRequest,
    mergeChannelsConfirm            MergeChannelsConfirm,
    purgeChannelsIndication         PurgeChannelsIndication,
    mergeTokensRequest              MergeTokensRequest,
    mergeTokensConfirm              MergeTokensConfirm,
    purgeTokensIndication           PurgeTokensIndication,
    disconnectProviderUltimatum     DisconnectProviderUltimatum,
    rejectMCSPDUUltimatum           RejectMCSPDUUltimatum,
    attachUserRequest               AttachUserRequest,
    attachUserConfirm               AttachUserConfirm,
    detachUserRequest               DetachUserRequest,
    detachUserIndication            DetachUserIndication,
    channelJoinRequest              ChannelJoinRequest,
    channelJoinConfirm              ChannelJoinConfirm,
    channelLeaveRequest             ChannelLeaveRequest,
    channelConveneRequest           ChannelConveneRequest,
    channelConveneConfirm           ChannelConveneConfirm,
    channelDisbandRequest           ChannelDisbandRequest,
    channelDisbandIndication        ChannelDisbandIndication,
    channelAdmitRequest             ChannelAdmitRequest,
    channelAdmitIndication          ChannelAdmitIndication,
    channelExpelRequest             ChannelExpelRequest,
    channelExpelIndication          ChannelExpelIndication,
    sendDataRequest                 SendDataRequest,
    sendDataIndication              SendDataIndication,
    uniformSendDataRequest          UniformSendDataRequest,
    uniformSendDataIndication       UniformSendDataIndication,
    tokenGrabRequest                TokenGrabRequest,
    tokenGrabConfirm                TokenGrabConfirm,
    tokenInhibitRequest             TokenInhibitRequest,
    tokenInhibitConfirm             TokenInhibitConfirm,
    tokenGiveRequest                TokenGiveRequest,
    tokenGiveIndication             TokenGiveIndication,
    tokenGiveResponse               TokenGiveResponse,
    tokenGiveConfirm                TokenGiveConfirm,
    tokenPleaseRequest              TokenPleaseRequest,
    tokenPleaseIndication           TokenPleaseIndication,
    tokenReleaseRequest             TokenReleaseRequest,
    tokenReleaseConfirm             TokenReleaseConfirm,
    tokenTestRequest                TokenTestRequest,
    tokenTestConfirm                TokenTestConfirm,
    nonStandard                     NonStandardPDU,
    ...
}

END

