/*
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

   Product name: redemption, a FLOSS RDP proxy
   Copyright (C) Wallix 2012
   Author(s): Christophe Grosjean

   Unit test for mouse cursor primitives
*/

#include "test_only/test_framework/redemption_unit_tests.hpp"
#include "test_only/test_framework/sig.hpp"

#include "utils/stream.hpp"
#include "utils/colors.hpp"
#include "core/RDP/rdp_pointer.hpp"


RED_AUTO_TEST_CASE(TestDataSize)
{
    RED_CHECK_EQUAL(RdpPointer().get_native_xor_mask().size(), 0);
    RED_CHECK_EQUAL(normal_pointer().get_native_xor_mask().size(), 32 * 32 * 3);
}

RED_AUTO_TEST_CASE(TestPointerNormal)
{
    RdpPointer const& p = normal_pointer();
    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0008 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0010 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0018 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0020 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0028 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFF, 0xFF, 0xFF, 0xFF,
        /* 0030 */ 0xFF, 0xFF, 0xFF, 0xFF,
                   0xFE, 0x7F, 0xFF, 0xFF, // 11111110 01111111
        /* 0038 */ 0xFC, 0x3F, 0xFF, 0xFF, // 11111100 00111111
                   0xFC, 0x3F, 0xFF, 0xFF,
        /* 0040 */ 0xF8, 0x7F, 0xFF, 0xFF,
                   0x78, 0x7F, 0xFF, 0xFF,
        /* 0048 */ 0x30, 0xFF, 0xFF, 0xFF,
                   0x10, 0xFF, 0xFF, 0xFF, // 00010000
        /* 0050 */ 0x01, 0xFF, 0xFF, 0xFF,
                   0x00, 0x1F, 0xFF, 0xFF,
        /* 0058 */ 0x00, 0x3F, 0xFF, 0xFF,
                   0x00, 0x7F, 0xFF, 0xFF,
        /* 0060 */ 0x00, 0xFF, 0xFF, 0xFF,
                   0x01, 0xFF, 0xFF, 0xFF,
        /* 0068 */ 0x03, 0xFF, 0xFF, 0xFF,
                   0x07, 0xFF, 0xFF, 0xFF,
        /* 0070 */ 0x0F, 0xFF, 0xFF, 0xFF,
                   0x1F, 0xFF, 0xFF, 0xFF,
        /* 0078 */ 0x3F, 0xFF, 0xFF, 0xFF,
                   0x7F, 0xFF, 0xFF, 0xFF,
    };

    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\x48\x58\x41\x28\xb0\xb4\x03\x27\x69\x31\x47\xc8\x2b\x43\x3e\xf3\x33\x80\x1c\xb2");
}

RED_AUTO_TEST_CASE(TestPointerEdit)
{
    RdpPointer const& p = edit_pointer();

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0008 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0010 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0018 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xe1 ,0x0f ,0xff
        /* 0020 */  ,0xff ,0xe0 ,0x0f ,0xff
                    ,0xff ,0xe0 ,0x0f ,0xff
        /* 0028 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0030 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0038 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0040 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0048 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0050 */  ,0xff ,0xfc ,0x7f ,0xff
                    ,0xff ,0xfc ,0x7f ,0xff
        /* 0058 */  ,0xff ,0xe0 ,0x0f ,0xff
                    ,0xff ,0xe0 ,0x0f ,0xff
        /* 0060 */  ,0xff ,0xe1 ,0x0f ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0068 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0070 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
        /* 0078 */  ,0xff ,0xff ,0xff ,0xff
                    ,0xff ,0xff ,0xff ,0xff
    };
    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\x09\xb3\xc6\x81\x07\xef\x2e\xd4\xcb\x1a\xa9\xeb\x2c\xb8\xe9\x13\xfb\xaf\xe2\xe3");
}

RED_AUTO_TEST_CASE(TestPointerSizeNS)
{
    RdpPointer const& p = size_NS_pointer();

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xdf, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x07, 0xFF, 0xFF
        /* 0038 */ , 0xfe, 0x03, 0xFF, 0xFF
                   , 0xfc, 0x01, 0xFF, 0xFF
        /* 0040 */ , 0xfc, 0x01, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0048 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0050 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0060 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0068 */ , 0xfc, 0x01, 0xFF, 0xFF
                   , 0xfc, 0x01, 0xFF, 0xFF
        /* 0070 */ , 0xfe, 0x03, 0xFF, 0xFF
                   , 0xFF, 0x07, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0x8f, 0xFF, 0xFF
                   , 0xFF, 0xdf, 0xFF, 0xFF
    };
    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\x3a\x74\xfe\x82\xcf\xa9\x15\x9e\xa0\x8a\xf9\x43\x77\x40\xf8\xe6\xdf\x13\xd0\xe1");
}

RED_AUTO_TEST_CASE(TestPointerSizeNESW)
{
    RdpPointer const& p = size_NESW_pointer();

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {

        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xe0, 0x3f, 0xFF, 0xFF
                   , 0xe0, 0x3f, 0xFF, 0xFF
        /* 0040 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0xff, 0xFF, 0xFF
        /* 0048 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe2, 0x3f, 0xFF, 0xFF
        /* 0050 */ , 0xe7, 0x1f, 0xFF, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xFF, 0xc7, 0x3f, 0xFF
                   , 0xFF, 0xe2, 0x3f, 0xFF
        /* 0060 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xf8, 0x3f, 0xFF
        /* 0068 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xe0, 0x3f, 0xFF
        /* 0070 */ , 0xFF, 0xe0, 0x3f, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\x57\xed\x01\xb4\xe3\x9c\xe7\xc1\x0c\x9f\x01\xa1\xdc\x66\x4c\x92\x83\x05\x0e\x91");
}

RED_AUTO_TEST_CASE(TestPointerSizeNWSE)
{
    RdpPointer const& p = size_NWSE_pointer();

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {

        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xFF, 0xe0, 0x3f, 0xFF
                   , 0xFF, 0xe0, 0x3f, 0xFF
        /* 0040 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xf8, 0x3f, 0xFF
        /* 0048 */ , 0xFF, 0xf0, 0x3f, 0xFF
                   , 0xFF, 0xe2, 0x3f, 0xFF
        /* 0050 */ , 0xFF, 0xc7, 0x3f, 0xFF
                   , 0xFF, 0x8f, 0xFF, 0xFF
        /* 0058 */ , 0xe7, 0x1f, 0xFF, 0xFF
                   , 0xe2, 0x3f, 0xFF, 0xFF
        /* 0060 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0xff, 0xFF, 0xFF
        /* 0068 */ , 0xe0, 0x7f, 0xFF, 0xFF
                   , 0xe0, 0x3f, 0xFF, 0xFF
        /* 0070 */ , 0xe0, 0x3f, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\x6b\x3a\xec\xa9\x22\x1f\x23\x5d\x2c\xe6\x91\xcc\x70\x56\xf9\x02\x30\x05\xaa\x3f");
}

RED_AUTO_TEST_CASE(TestPointerSizeWE)
{
    RdpPointer const& p = size_WE_pointer();

    RED_CHECK_EQUAL(p.bit_mask_size(), 32*4);

    uint8_t expected[] = {
        /* 0000 */   0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0008 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0010 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0018 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0020 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0028 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0030 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0038 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0040 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xf3, 0xfe, 0x7f, 0xFF
        /* 0048 */ , 0xe3, 0xfe, 0x3f, 0xFF
                   , 0xc3, 0xfe, 0x1f, 0xFF
        /* 0050 */ , 0x80, 0x00, 0x0f, 0xFF
                   , 0x00, 0x00, 0x07, 0xFF
        /* 0058 */ , 0x80, 0x00, 0x0f, 0xFF
                   , 0xc3, 0xfe, 0x1f, 0xFF
        /* 0060 */ , 0xe3, 0xfe, 0x3f, 0xFF
                   , 0xf3, 0xfe, 0x7f, 0xFF
        /* 0068 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0070 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
        /* 0078 */ , 0xFF, 0xFF, 0xFF, 0xFF
                   , 0xFF, 0xFF, 0xFF, 0xFF
    };
    RED_CHECK(p.get_monochrome_and_mask() == make_array_view(expected));
    auto av = p.get_native_xor_mask();
    RED_CHECK_SIG(av,
        "\xae\x83\x2a\x8e\xd0\x73\x0b\x77\xe3\xb5\xf0\x4e\xbd\x0f\x4e\xa9\xd0\x65\xeb\x59");
}

RED_AUTO_TEST_CASE(TestPointer1bit)
{
/*
    width=32 height=32 mlen=128 dlen=128Data For Cursor




           ***    ***
           **********
              ****
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
               **
              ****
           **********
           ***    ***




Mask For Cursor
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
********************************
*********************************/



    const uint8_t buffer[] = {
            8, 0, // hotspot X
            9, 0,  // hotspot Y
            32, 0, // width
            32, 0,  // height
            0x80, 0x00, // mlen
            0x80, 0x00, // dlen
            // xor_data
            /*0000*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0010*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0020*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0030*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0040*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0050*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0060*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            /*0070*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*...............*/
            // mask_data
            /*0000*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
            /*0010*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
            /*0020*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*...............*/
            /*0030*/ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x23, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*........#......*/
            /*0040*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
            /*0050*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
            /*0060*/ 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, /*...............*/
            /*0070*/ 0xff, 0xdf, 0xff, 0xff, 0xfe, 0x23, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, /*....#..........*/
    };

    InStream in_stream_cursor(buffer);
    RdpPointerView cursor = pointer_loader_new(BitsPerPixel{1}, in_stream_cursor);

    RED_CHECK_EQ(cursor.hotspot().x, 8);
    RED_CHECK_EQ(cursor.hotspot().y, 9);
    RED_CHECK_EQ(cursor.dimensions().width, 32);
    RED_CHECK_EQ(cursor.dimensions().height, 32);
    auto d = cursor.xor_mask();
    auto m = cursor.and_mask();

    RED_CHECK_EQUAL(m.size(), 32 * 4);
    RED_CHECK_SIG(m,
        "\xff\x5f\x9e\x6f\x76\x30\xf2\xd3\xad\x4d\xe8\xa1\xb2\x67\x8e\xd8\xb7\x5e\x37\x06");

    RED_CHECK_EQUAL(d.size(), 32 / 8 * 32);
    RED_CHECK_SIG(d,
        "\x0a\xe4\xf7\x11\xef\x5d\x6e\x9d\x26\xc6\x11\xfd\x2c\x8c\x8a\xc4\x5e\xcb\xf9\xe7");
}

RED_AUTO_TEST_CASE(TestLinux32bppPointer)
{
    const uint8_t new_pointer_32bpp[] = {
/* 0000 */             0x0f, 0x00, 0x0a, 0x00, 0x20, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x10, 0x00, 0x00,  //   .... . .......
/* 0010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0030 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0040 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0050 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0080 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0090 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 00f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0100 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0110 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0120 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0130 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0140 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0150 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0160 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0170 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0180 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0190 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 01f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0200 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0210 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0220 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0230 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0240 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0250 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0260 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0270 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0280 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0290 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 02f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0300 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0310 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0320 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0330 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0340 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0350 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0360 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0370 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0380 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0390 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03b0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03d0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03e0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 03f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0400 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0410 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0420 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0430 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0440 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0450 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0460 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0470 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0480 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0490 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 04a0 */ 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00,  // ................
/* 04b0 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 04c0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ................
/* 04d0 */ 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 04e0 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 04f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0500 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0510 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00,  // ................
/* 0520 */ 0x00, 0x1a, 0x1b, 0x1b, 0x1b, 0x5a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00,  // .....Z...Z...1..
/* 0530 */ 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0540 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00,  // ................
/* 0550 */ 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00,  // ................
/* 0560 */ 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0570 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0580 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0590 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x19, 0x49, 0x49,  // ..............II
/* 05a0 */ 0x49, 0x80, 0xf4, 0xf4, 0xf4, 0xfb, 0x6a, 0x6a, 0x6a, 0xbb, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00,  // I.....jjj....j..
/* 05b0 */ 0x00, 0x2f, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ./..............
/* 05c0 */ 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x41, 0x41, 0x41, 0x6d, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00,  // ......AAAm...L..
/* 05d0 */ 0x00, 0x35, 0x11, 0x11, 0x11, 0x69, 0x11, 0x11, 0x11, 0x7e, 0x01, 0x01, 0x01, 0x6d, 0x00, 0x00,  // .5...i...~...m..
/* 05e0 */ 0x00, 0x40, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@..............
/* 05f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0600 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0610 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x5b, 0x5b, 0x5b, 0x7c, 0xe7, 0xe7,  // ..........[[[|..
/* 0620 */ 0xe7, 0xf9, 0x56, 0x56, 0x56, 0xff, 0xe2, 0xe2, 0xe2, 0xfb, 0x59, 0x59, 0x59, 0xb5, 0x00, 0x00,  // ..VVV.....YYY...
/* 0630 */ 0x00, 0x67, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // .g...+..........
/* 0640 */ 0x00, 0x14, 0x3c, 0x3c, 0x3c, 0x6e, 0xf4, 0xf4, 0xf4, 0xfa, 0x00, 0x00, 0x00, 0x6b, 0xbb, 0xbb,  // ..<<<n.......k..
/* 0650 */ 0xbb, 0xd8, 0xee, 0xee, 0xee, 0xfb, 0xee, 0xee, 0xee, 0xfc, 0xc8, 0xc8, 0xc8, 0xec, 0x01, 0x01,  // ................
/* 0660 */ 0x01, 0x61, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .a..............
/* 0670 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0680 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0690 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x2a, 0x2a, 0x2d, 0xfc, 0xfc, 0xfc, 0xfe, 0x4b, 0x4b,  // ......***-....KK
/* 06a0 */ 0x4b, 0xff, 0x00, 0x00, 0x00, 0xff, 0x2b, 0x2b, 0x2b, 0xff, 0xe7, 0xe7, 0xe7, 0xfb, 0x4a, 0x4a,  // K.....+++.....JJ
/* 06b0 */ 0x4a, 0xad, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x1b, 0x37, 0x37,  // J....c...+....77
/* 06c0 */ 0x37, 0x6a, 0xe9, 0xe9, 0xe9, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // 7j...........s..
/* 06d0 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 06e0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 06f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0700 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0710 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x65, 0x65, 0x65, 0x6d, 0xe0, 0xe0,  // ..........eeem..
/* 0720 */ 0xe0, 0xf7, 0x22, 0x22, 0x22, 0xff, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36, 0xff, 0xe9, 0xe9,  // ..""".....666...
/* 0730 */ 0xe9, 0xfb, 0x3e, 0x3e, 0x3e, 0xa6, 0x00, 0x00, 0x00, 0x67, 0x2f, 0x2f, 0x2f, 0x74, 0xe7, 0xe7,  // ..>>>....g///t..
/* 0740 */ 0xe7, 0xf8, 0x4c, 0x4c, 0x4c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // ..LLL........s..
/* 0750 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0760 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0770 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0780 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0790 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6a, 0x6a,  // ..............jj
/* 07a0 */ 0x6a, 0x72, 0xde, 0xde, 0xde, 0xf6, 0x20, 0x20, 0x20, 0xff, 0x00, 0x00, 0x00, 0xff, 0x44, 0x44,  // jr....   .....DD
/* 07b0 */ 0x44, 0xff, 0xe9, 0xe9, 0xe9, 0xfa, 0x5b, 0x5b, 0x5b, 0xb6, 0xe7, 0xe7, 0xe7, 0xf8, 0x50, 0x50,  // D.....[[[.....PP
/* 07c0 */ 0x50, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // P............s..
/* 07d0 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 07e0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 07f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0800 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0810 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0820 */ 0x00, 0x01, 0x6a, 0x6a, 0x6a, 0x72, 0xde, 0xde, 0xde, 0xf6, 0x20, 0x20, 0x20, 0xff, 0x00, 0x00,  // ..jjjr....   ...
/* 0830 */ 0x00, 0xff, 0x52, 0x52, 0x52, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x56, 0x56, 0x56, 0xfe, 0x00, 0x00,  // ..RRR.....VVV...
/* 0840 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // .............s..
/* 0850 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0860 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0870 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0880 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0890 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 08a0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x6b, 0x6b, 0x6b, 0x74, 0xde, 0xde, 0xde, 0xf7, 0x1f, 0x1f,  // ......kkkt......
/* 08b0 */ 0x1f, 0xff, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x1f, 0x1f, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 08c0 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // .............s..
/* 08d0 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 08e0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 08f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0900 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0910 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0920 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x8e, 0x8e, 0x8e, 0xb0, 0xd7, 0xd7,  // ................
/* 0930 */ 0xd7, 0xfc, 0x04, 0x04, 0x04, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 0940 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // .............s..
/* 0950 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0960 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0970 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0980 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0990 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 09a0 */ 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, 0x33, 0x33, 0x33, 0x69, 0xe7, 0xe7, 0xe7, 0xf8, 0x4d, 0x4d,  // ......333i....MM
/* 09b0 */ 0x4d, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // M...............
/* 09c0 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x73, 0xf8, 0xf8,  // .............s..
/* 09d0 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 09e0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 09f0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0a00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0a10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,  // ................
/* 0a20 */ 0x00, 0x15, 0x33, 0x33, 0x33, 0x69, 0xe7, 0xe7, 0xe7, 0xf8, 0x4d, 0x4d, 0x4d, 0xff, 0x00, 0x00,  // ..333i....MMM...
/* 0a30 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 0a40 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x72, 0xf8, 0xf8,  // .............r..
/* 0a50 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0a60 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0a70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0a80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0a90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x39, 0x39,  // ..............99
/* 0aa0 */ 0x39, 0x5a, 0xed, 0xed, 0xed, 0xf9, 0x58, 0x58, 0x58, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11,  // 9Z....XXX.......
/* 0ab0 */ 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11,  // ................
/* 0ac0 */ 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x5c, 0xf8, 0xf8,  // ................
/* 0ad0 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0ae0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0af0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0b00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0b10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2f, 0x2f, 0x2f, 0x37, 0xe0, 0xe0,  // ..........///7..
/* 0b20 */ 0xe0, 0xe7, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee,  // ................
/* 0b30 */ 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee,  // ................
/* 0b40 */ 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf8, 0xee, 0xee, 0xee, 0xf5, 0x00, 0x00, 0x00, 0x3d, 0xf8, 0xf8,  // .............=..
/* 0b50 */ 0xf8, 0xfc, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0b60 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0b70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0b80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0b90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x10, 0x10,  // ............. ..
/* 0ba0 */ 0x10, 0x66, 0x11, 0x11, 0x11, 0x80, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11,  // .f..............
/* 0bb0 */ 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11,  // ................
/* 0bc0 */ 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11, 0x11, 0x83, 0x11, 0x11, 0x11, 0x85, 0xf8, 0xf8,  // ................
/* 0bd0 */ 0xf8, 0xfd, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0be0 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0bf0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0c00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0c10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xb6, 0xb6, 0xb6, 0xcf, 0xef, 0xef,  // ................
/* 0c20 */ 0xef, 0xfb, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee,  // ................
/* 0c30 */ 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee,  // ................
/* 0c40 */ 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee, 0xee, 0xfc, 0xee, 0xee,  // ................
/* 0c50 */ 0xee, 0xfd, 0x07, 0x07, 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0c60 */ 0x07, 0x6b, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .k..............
/* 0c70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0c80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0c90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf8, 0xf8, 0xf8, 0xfc, 0x07, 0x07,  // ................
/* 0ca0 */ 0x07, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 0cb0 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 0cc0 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,  // ................
/* 0cd0 */ 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xf8, 0xf8, 0xfe, 0x07, 0x07,  // ................
/* 0ce0 */ 0x07, 0x65, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .e..............
/* 0cf0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0d00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0d10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xf8, 0xf8, 0xf8, 0xfc, 0x18, 0x18,  // ................
/* 0d20 */ 0x18, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11,  // ................
/* 0d30 */ 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11,  // ................
/* 0d40 */ 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11,  // ................
/* 0d50 */ 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0x11, 0x11, 0x11, 0xff, 0xf8, 0xf8, 0xf8, 0xfd, 0x07, 0x07,  // ................
/* 0d60 */ 0x07, 0x47, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .G..............
/* 0d70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0d80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0d90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9c, 0x9c, 0x9c, 0xac, 0xee, 0xee,  // ................
/* 0da0 */ 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee,  // ................
/* 0db0 */ 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee,  // ................
/* 0dc0 */ 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee,  // ................
/* 0dd0 */ 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xee, 0xee, 0xee, 0xf7, 0xab, 0xab, 0xab, 0xc0, 0x00, 0x00,  // ................
/* 0de0 */ 0x00, 0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0df0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0e00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0e10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0e20 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0e30 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0e40 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0e50 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ................
/* 0e60 */ 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0e70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0e80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0e90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ea0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0eb0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ec0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ed0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ee0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ef0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f00 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f10 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f20 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f30 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f40 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f50 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f60 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f70 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f80 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0f90 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0fa0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0fb0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0fc0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0fd0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0fe0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 0ff0 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1000 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1010 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1020 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1030 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1040 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1050 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1060 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1070 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ................
/* 1080 */ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ................
    };

    InStream stream(new_pointer_32bpp);
    RdpPointerView cursor = pointer_loader_new(BitsPerPixel{32}, stream);

    RED_CHECK_EQ(cursor.hotspot().x, 15);
    RED_CHECK_EQ(cursor.hotspot().y, 10);
    RED_CHECK_EQ(cursor.dimensions().width, 32);
    RED_CHECK_EQ(cursor.dimensions().height, 32);
    auto d = cursor.xor_mask();
    auto m = cursor.and_mask();

    RED_CHECK_EQUAL(m.size(), 32 * 4);
    RED_CHECK_SIG(m,
        "\x0a\xe4\xf7\x11\xef\x5d\x6e\x9d\x26\xc6\x11\xfd\x2c\x8c\x8a\xc4\x5e\xcb\xf9\xe7");

    RED_CHECK_EQUAL(d.size(), 32 * 32 * 4);
    RED_CHECK_SIG(d,
        "\xa7\xc3\xa3\xe2\x16\x1a\xcb\x92\xe6\x36\xdd\x60\xae\x22\xc0\xff\xa6\xae\x86\x19");
}
