from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
from database import get_db
from models.license import License
from models.user import User
from models.activity_log import ActivityLog  
from datetime import date
from sqlalchemy import func
from fastapi.responses import JSONResponse

router = APIRouter()

@router.get("/dashboard")
def get_dashboard_data(db: Session = Depends(get_db)):
    today = date.today()

    total_licenses = db.query(func.count(License.id)).scalar()
    active_licenses = db.query(License).filter(License.expire_date >= today).count()
    expired_licenses = db.query(License).filter(License.expire_date < today).count()
    total_users = db.query(func.count(User.id)).scalar()

    raw_chart = (
        db.query(
            func.date_format(License.created_at, '%Y-%m').label("month"),
            func.count(License.id).label("activations")
        )
        .group_by(func.date_format(License.created_at, '%Y-%m'))
        .order_by(func.date_format(License.created_at, '%Y-%m'))
        .all()
    )

    chart_data = [{"month": month, "activations": activations} for month, activations in raw_chart]

    logs = (
        db.query(ActivityLog)
        .order_by(ActivityLog.created_at.desc())
        .limit(10)
        .all()
    )

    activity_log = [
        f"{log.created_at.strftime('%Y-%m-%d %H:%M:%S')} - {log.action}" for log in logs
    ]

    return JSONResponse(
        content={
            "total_licenses": total_licenses,
            "active_licenses": active_licenses,
            "expired_licenses": expired_licenses,
            "total_users": total_users,
            "chart_data": chart_data,
            "activity_log": activity_log,
        },
        media_type="application/json; charset=utf-8"
    )


# models/activity_log.py

from sqlalchemy import Column, Integer, String, DateTime
from datetime import datetime
from database import Base

class ActivityLog(Base):
    __tablename__ = "activity_logs"

    id = Column(Integer, primary_key=True, index=True)
    action = Column(String(255), nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)  

# utils/logging.py

from models.activity_log import ActivityLog
from sqlalchemy.orm import Session

def log_action(db: Session, action: str):
    print("Logging action:", action) 
    log = ActivityLog(action=action)
    db.add(log)
    db.commit()



from fastapi import APIRouter, Depends, HTTPException
from pydantic import BaseModel
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
import random, string
from typing import List, Optional
from utils.logging import log_action
from database import get_db
from models.license import License


router = APIRouter()

def generate_license_key():
    return '-'.join(''.join(random.choices(string.ascii_uppercase + string.digits, k=4)) for _ in range(4))

class LicenseCreateRequest(BaseModel):
    product_name: str
    license_type_id: Optional[int] = None
    user_id: Optional[int] = None
    duration_days: int = 30
    max_activations: int = 3

class LicenseCreateResponse(BaseModel):
    license_key: str
    product_name: str
    expire_date: datetime
    status: str

class LicenseOut(BaseModel):
    id: int
    license_key: str
    product_name: str
    user_id: Optional[int]
    license_type_id: Optional[int]
    issued_date: datetime
    expire_date: datetime
    max_activations: int
    activations: int
    status: str
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True

@router.post("/license", response_model=LicenseCreateResponse)
def create_license(req: LicenseCreateRequest, db: Session = Depends(get_db)):
    if not req.product_name:
        raise HTTPException(status_code=400, detail="product_name is required")

    for _ in range(5):
        license_key = generate_license_key()
        existing = db.query(License).filter(License.license_key == license_key).first()
        if not existing:
            break
    else:
        raise HTTPException(status_code=500, detail="Failed to generate unique license key")

    now = datetime.utcnow()
    expire = now + timedelta(days=req.duration_days)

    license = License(
        license_key=license_key,
        product_name=req.product_name,
        user_id=req.user_id,
        license_type_id=req.license_type_id,
        issued_date=now,
        expire_date=expire,
        max_activations=req.max_activations,
        activations=0,
        status="active",
        created_at=now,
        updated_at=now,
    )

    db.add(license)
    db.commit()
    db.refresh(license)

    user_info = f"‡πÉ‡∏´‡πâ user {license.user_id}" if license.user_id is not None else "‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
    log_action(db, f"‡∏™‡∏£‡πâ‡∏≤‡∏á License ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {license.product_name} {user_info}")

    return LicenseCreateResponse(
        license_key=license.license_key,
        product_name=license.product_name,
        expire_date=license.expire_date,
        status=license.status
    )


@router.get("/licenses", response_model=List[LicenseOut])
def get_licenses(db: Session = Depends(get_db)):
    licenses = db.query(License).all()
    return licenses

@router.delete("/license/{license_id}")
def delete_license(license_id: int, db: Session = Depends(get_db)):
    license = db.query(License).filter(License.id == license_id).first()
    if not license:
        raise HTTPException(status_code=404, detail="License not found")

    db.delete(license)
    db.commit()

    log_action(db, f"‡∏•‡∏ö License {license.license_key} ‡∏Ç‡∏≠‡∏á user {license.user_id}")

    return {"message": "License deleted successfully"}








import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  ResponsiveContainer,
} from "recharts";

export default function Dashboard() {
  const navigate = useNavigate();
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboard = async () => {
      try {
        const res = await fetch("http://127.0.0.1:8000/api/dashboard");
        if (!res.ok) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        const json = await res.json();
        setData(json);
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchDashboard();
  }, []);

  if (loading) return <div style={statusStyle}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</div>;
  if (error) return <div style={{ ...statusStyle, color: "#dc2626" }}>{error}</div>;

  return (
    <div style={containerStyle}>
      <h2 style={titleStyle}>Admin Dashboard</h2>

      <div style={cardGrid}>
        <Card title="License ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" value={data.total_licenses} />
        <Card title="‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" value={data.active_licenses} />
        <Card title="‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" value={data.expired_licenses} />
        <Card title="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" value={data.total_users} />
      </div>

      <div style={sectionStyle}>
        <h3 style={sectionTitle}>‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô License (‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)</h3>
        <ResponsiveContainer width="100%" height={300}>
          <BarChart data={data.chart_data}>
            <XAxis dataKey="month" />
            <YAxis />
            <Tooltip />
            <Bar dataKey="activations" fill="#2563eb" radius={[4, 4, 0, 0]} />
          </BarChart>
        </ResponsiveContainer>
      </div>

      <div style={{ display: "flex", gap: 16, marginBottom: 40 }}>
        <button style={btnStyle} onClick={() => navigate("/create")}>
          ‚ûï Create License
        </button>
        <button style={btnStyle} onClick={() => navigate("/licenses")}>
          View License
        </button>
      </div>

      <div style={sectionStyle}>
        <h3 style={sectionTitle}>‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h3>
        {data?.activity_log?.length > 0 ? (
          data.activity_log.map((item, idx) => (
            <div key={idx} style={logItemStyle}>
              ‚Ä¢ {item}
            </div>
          ))
        ) : (
          <div style={{ color: "#94a3b8" }}>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>
        )}
      </div>
    </div>
  );
}

// üî∏ Card component
const Card = ({ title, value }) => (
  <div style={cardStyle}>
    <div style={{ color: "#64748b", fontSize: 14 }}>{title}</div>
    <div style={{ fontSize: 28, fontWeight: "bold", color: "#1e3a8a", marginTop: 8 }}>{value}</div>
  </div>
);

const containerStyle = {
  maxWidth: 1200,
  margin: "0 auto",
  padding: "40px 20px",
  fontFamily: "system-ui, sans-serif",
};

const titleStyle = {
  fontSize: 32,
  fontWeight: "bold",
  color: "#1e3a8a",
  marginBottom: 32,
  textAlign: "center",
};

const cardGrid = {
  display: "grid",
  gridTemplateColumns: "repeat(auto-fit, minmax(240px, 1fr))",
  gap: 20,
  marginBottom: 40,
};

const cardStyle = {
  background: "#ffffff",
  borderRadius: 16,
  boxShadow: "0 2px 10px rgba(0, 0, 0, 0.05)",
  padding: 24,
  textAlign: "center",
};

const sectionStyle = {
  background: "#ffffff",
  padding: 24,
  borderRadius: 16,
  boxShadow: "0 2px 8px rgba(0, 0, 0, 0.04)",
  marginBottom: 40,
};

const sectionTitle = {
  color: "#1e3a8a",
  fontSize: 18,
  fontWeight: 600,
  marginBottom: 16,
};

const btnStyle = {
  flex: 1,
  padding: "14px 20px",
  fontSize: 16,
  fontWeight: 600,
  color: "#ffffff",
  backgroundColor: "#2563eb",
  border: "none",
  borderRadius: 10,
  boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
  cursor: "pointer",
  transition: "background 0.2s",
};

const logItemStyle = {
  padding: "10px 0",
  borderBottom: "1px solid #f1f5f9",
  fontSize: 15,
  color: "#334155",
};

const statusStyle = {
  textAlign: "center",
  padding: "100px 0",
  fontSize: 18,
  color: "#334155",
};
