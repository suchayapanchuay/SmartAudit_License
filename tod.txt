-- สร้างตารางเริ่มต้น (หากต้องการ)
USE smartaudit;

CREATE TABLE licenses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    license_key VARCHAR(255) UNIQUE NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    user_id INT NULL,
    issued_date DATETIME NOT NULL,
    expire_date DATETIME NOT NULL,
    max_activations INT NOT NULL DEFAULT 1,
    activations INT NOT NULL DEFAULT 0,
    status ENUM('active', 'revoked', 'expired') NOT NULL DEFAULT 'active',
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);

CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,  -- ควรเพิ่มความยาวสำหรับเก็บ hash ที่ปลอดภัย
    is_admin BOOLEAN NOT NULL DEFAULT FALSE,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE activations (
    id INT PRIMARY KEY AUTO_INCREMENT,
    license_id INT NOT NULL,
    machine_id VARCHAR(100) NOT NULL,
    activated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_seen DATETIME NULL,
    status ENUM('active', 'revoked') NOT NULL DEFAULT 'active',
    FOREIGN KEY (license_id) REFERENCES licenses(id) ON DELETE CASCADE,
    UNIQUE KEY (license_id, machine_id)  -- กันไม่ให้เครื่องเดียวกัน activate license เดียวกันหลายครั้ง
);

CREATE TABLE revoked_licenses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    license_id INT NOT NULL,
    revoked_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    reason TEXT NULL,
    FOREIGN KEY (license_id) REFERENCES licenses(id) ON DELETE CASCADE
);

CREATE INDEX idx_license_key ON licenses(license_key);
CREATE INDEX idx_license_status ON licenses(status);
CREATE INDEX idx_license_user ON licenses(user_id);
CREATE INDEX idx_activation_license ON activations(license_id);

CREATE TABLE products (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    description TEXT NULL,
    default_max_activations INT NOT NULL DEFAULT 1
);

CREATE TABLE license_types (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    duration_days INT NOT NULL  -- จำนวนวันก่อนหมดอายุ
);

CREATE TABLE audit_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NULL,
    action VARCHAR(50) NOT NULL,
    table_name VARCHAR(50) NOT NULL,
    record_id INT NOT NULL,
    old_values TEXT NULL,
    new_values TEXT NULL,
    created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL
);




from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session
from pydantic import BaseModel
from datetime import datetime

from database import SessionLocal
from models.license import License

router = APIRouter()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class LicenseCheckRequest(BaseModel):
    license_key: str

@router.post("/check_license")
def check_license(request: LicenseCheckRequest, db: Session = Depends(get_db)):
    license_key = request.license_key
    license = db.query(License).filter(License.license_key == license_key).first()
    
    if not license:
        raise HTTPException(status_code=404, detail="License not found")
    
    # ตรวจสอบสถานะ license (เปลี่ยนจาก active เป็นตรวจสอบ status)
    if license.status != 'active':
        raise HTTPException(status_code=403, detail="License is not active")
    
    # ตรวจสอบวันหมดอายุ (เปลี่ยนจาก valid_until เป็น expire_date)
    if license.expire_date and license.expire_date < datetime.utcnow():
        raise HTTPException(status_code=403, detail="License expired")
    
    return {
        "status": "valid",
        "product": license.product_name,  # เปลี่ยนจาก product เป็น product_name
        "expire_date": license.expire_date,
        "max_activations": license.max_activations,
        "current_activations": license.activations
    }

@router.get("/check_license", response_class=HTMLResponse)
def check_license_form():
    return """
    <html>
        <head>
            <title>Check License</title>
        </head>
        <body>
            <h2>Check License Key</h2>
            <form id="checkForm">
                <input type="text" id="licenseKey" placeholder="Enter license key" required />
                <button type="submit">Check</button>
            </form>
            <div id="result" style="margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;"></div>

            <script>
                const form = document.getElementById("checkForm");
                const resultDiv = document.getElementById("result");
                
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const key = document.getElementById("licenseKey").value.trim();
                    
                    if (!key) {
                        resultDiv.innerHTML = '<p style="color: red;">Please enter a license key</p>';
                        return;
                    }
                    
                    try {
                        const response = await fetch("/check_license", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ license_key: key })
                        });
                        
                        if (!response.ok) {
                            const error = await response.json();
                            resultDiv.innerHTML = `<p style="color: red;">Error: ${error.detail}</p>`;
                            return;
                        }
                        
                        const data = await response.json();
                        let html = `<h3>License Information</h3>
                                   <p><strong>Status:</strong> <span style="color: green;">${data.status}</span></p>
                                   <p><strong>Product:</strong> ${data.product}</p>
                                   <p><strong>Expire Date:</strong> ${new Date(data.expire_date).toLocaleDateString()}</p>
                                   <p><strong>Activations:</strong> ${data.current_activations}/${data.max_activations}</p>`;
                        resultDiv.innerHTML = html;
                        
                    } catch (error) {
                        resultDiv.innerHTML = `<p style="color: red;">Network error: ${error.message}</p>`;
                    }
                });
            </script>
        </body>
    </html>
    """

--------------------------
from fastapi import FastAPI
from routes import license_check, auth_route

app = FastAPI()

@app.get("/")
def root():
    return {"status": "License Server Running"}

app.include_router(license_check.router, prefix="/api")
app.include_router(auth_route.router, prefix="/api")
--------------------------

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from passlib.context import CryptContext
from jose import JWTError, jwt
from pydantic import BaseModel
from datetime import datetime, timedelta
from database import SessionLocal
from models.user import User
import os
from dotenv import load_dotenv
from models.user import User

load_dotenv()

router = APIRouter()

SECRET_KEY = os.getenv("SECRET_KEY", "default-secret")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: str | None = None

class UserLogin(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    id: int
    username: str

# Auth Utils
def verify_password(plain, hashed):
    return pwd_context.verify(plain, hashed)

def create_access_token(data: dict, expires_delta: timedelta | None = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

@router.post("/login", response_model=Token)
def login(user: UserLogin, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.username == user.username).first()
    if not db_user or not verify_password(user.password, db_user.password_hash):
        raise HTTPException(status_code=400, detail="Invalid credentials")

    access_token = create_access_token(data={"sub": db_user.username})
    return {"access_token": access_token, "token_type": "bearer"}

@router.get("/logout")
def logout():
    return {"message": "Logout successful (handled client-side)"}
-------------

from fastapi import APIRouter, Depends, HTTPException
from fastapi.responses import HTMLResponse
from sqlalchemy.orm import Session
from pydantic import BaseModel
from datetime import datetime
from database import SessionLocal
from models.license import License

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Request Model
class LicenseCheckRequest(BaseModel):
    license_key: str

# POST: Check license key
@router.post("/check_license")
def check_license(request: LicenseCheckRequest, db: Session = Depends(get_db)):
    license_key = request.license_key.strip()
    license = db.query(License).filter(License.license_key == license_key).first()
    
    if not license:
        raise HTTPException(status_code=404, detail="License not found")
    
    if license.status != 'active':
        raise HTTPException(status_code=403, detail="License is not active")
    
    if license.expire_date and license.expire_date < datetime.utcnow():
        raise HTTPException(status_code=403, detail="License expired")
    
    return {
        "status": "valid",
        "product": license.product_name,
        "expire_date": license.expire_date,
        "max_activations": license.max_activations,
        "current_activations": license.activations
    }

# GET: Web form
@router.get("/check_license", response_class=HTMLResponse)
def check_license_form():
    return """
    <html>
        <head>
            <title>Check License</title>
        </head>
        <body>
            <h2>Check License Key</h2>
            <form id="checkForm">
                <input type="text" id="licenseKey" placeholder="Enter license key" required />
                <button type="submit">Check</button>
            </form>
            <div id="result" style="margin-top: 20px; padding: 15px; border: 1px solid #ddd; border-radius: 5px;"></div>

            <script>
                const form = document.getElementById("checkForm");
                const resultDiv = document.getElementById("result");
                
                form.addEventListener("submit", async (e) => {
                    e.preventDefault();
                    const key = document.getElementById("licenseKey").value.trim();
                    
                    if (!key) {
                        resultDiv.innerHTML = '<p style="color: red;">Please enter a license key</p>';
                        return;
                    }
                    
                    try {
                        const response = await fetch("/api/check_license", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ license_key: key })
                        });
                        
                        if (!response.ok) {
                            const error = await response.json();
                            resultDiv.innerHTML = `<p style="color: red;">Error: ${error.detail}</p>`;
                            return;
                        }
                        
                        const data = await response.json();
                        let html = `<h3>License Information</h3>
                                   <p><strong>Status:</strong> <span style="color: green;">${data.status}</span></p>
                                   <p><strong>Product:</strong> ${data.product}</p>
                                   <p><strong>Expire Date:</strong> ${new Date(data.expire_date).toLocaleDateString()}</p>
                                   <p><strong>Activations:</strong> ${data.current_activations}/${data.max_activations}</p>`;
                        resultDiv.innerHTML = html;
                        
                    } catch (error) {
                        resultDiv.innerHTML = `<p style="color: red;">Network error: ${error.message}</p>`;
                    }
                });
            </script>
        </body>
    </html>
    """

